#!/usr/bin/env python
import sys
import urllib2
import subprocess
import json

MAX_OPEN_PATCHES = 5

def get_project():
    # example output of git remote -v | head -n 1:
    # origin	ssh://jgonera@gerrit.wikimedia.org:29418/mediawiki/extensions/MobileFrontend (fetch)
    # desired output after sed regex:
    # mediawiki/extensions/MobileFrontend
    command = "git remote -v | head -n 1 | sed -e 's/.*:\/\/[^\/]*\/\([^ ]*\) .*/\\1/'"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

    output, error = process.communicate()
    return output.strip()

def get_last_commit():
    command = "git log -1"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

    #Launch the shell command:
    output, error = process.communicate()
    return output

def query_gerrit(project):
    url = "https://gerrit.wikimedia.org/r/changes/?q=status:open+project:" \
        + project + "&n=25&O=1"
    req = urllib2.Request(url)
    req.add_header('Accept', 'application/json')
    resp, data = urllib2.urlopen(req)
    return json.loads(data)


changes = query_gerrit(get_project())
open_patches = 0
commit = get_last_commit()

for change in changes:
    # This patch is updating an existing one so let's allow it.
    if change["change_id"] in commit:
        sys.exit()

    reviews = change["labels"]["Code-Review"]
    jenkins = change["labels"]["Verified"]

    if (
        'disliked' not in reviews and
        'rejected' not in reviews and
        'approved' not in reviews and
        'rejected' not in jenkins and
        'WIP' not in change['subject']
    ):
        open_patches += 1

if open_patches > MAX_OPEN_PATCHES:
    print 'Do some code review first! There are %s open unreviewed patches!' % open_patches
    print 'You can still send this review but note this will generate bad karma by running `git review master --no-custom-script`.'
    sys.exit(1)
