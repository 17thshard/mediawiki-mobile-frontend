{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/mobile.notifications.overlay.js"],"names":["NotificationsFilterOverlay","Overlay","require","util","mfExtend","options","self","this","call","extend","className","on","mainMenu","closeNavigationDrawers","$crossWikiUnreadFilter","hide","$notifReadState","find","$el","append","parseHTML","addClass","defaults","prototype","heading","mw","msg","preRender","message","escaped","module","exports","NotificationsOverlay","View","promisedView","Anchor","params","wrapperWidget","maxNotificationCount","config","get","echoApi","echo","api","EchoApi","unreadCounter","dm","UnreadNotificationCounter","markAllReadButton","OO","ui","ButtonWidget","icon","title","modelManager","ModelManager","type","controller","Controller","markAsReadHandler","toggle","manager","hasLocalUnread","$moreOptions","footerAnchor","href","getUrl","progressive","additionalClassNames","label","headerActions","make","class","$element","isBorderBox","badge","error","onError","maxPrioritizedActions","NotificationsWrapper","$overlay","count","cappedCount","setCount","onCountChange","getUnreadCounter","getCappedNotificationCount","numNotifications","getLocalUnread","length","markLocalNotificationsRead","then","notify","populate","updateSeenTime","markAsSeen","m","define"],"mappings":"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","file":"mobile.notifications.overlay.js","sourcesContent":["var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tNotificationsFilterOverlay;\n\n/**\n * Overlay for notifications filter\n *\n * @class NotificationsFilterOverlay\n * @extends Overlay\n * @param {Object} options\n * @param {jQuery.Object} options.$notifReadState - notification read status widgets\n * @param {jQuery.Object} options.$crossWikiUnreadFilter - notification unread filter\n *\n */\nNotificationsFilterOverlay = function ( options ) {\n\tvar self = this;\n\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend( {\n\t\t\t// FIXME: notification-overlay class to be generalized\n\t\t\tclassName: 'overlay notifications-filter-overlay notifications-overlay navigation-drawer'\n\t\t}, options )\n\t);\n\n\t// Initialize\n\tthis.on( 'hide', function () {\n\t\toptions.mainMenu.closeNavigationDrawers();\n\t} );\n\toptions.$crossWikiUnreadFilter.on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\toptions.$notifReadState.find( '.oo-ui-buttonElement' ).on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\tthis.$el.find( '.overlay-content' ).append(\n\t\tthis.parseHTML( '<div>' )\n\t\t\t.addClass( 'notifications-filter-overlay-read-state' )\n\t\t\t.append( options.$notifReadState ),\n\t\toptions.$crossWikiUnreadFilter\n\t);\n};\n\nmfExtend( NotificationsFilterOverlay, Overlay, {\n\t/**\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.heading Heading text.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-notifications-filter-title' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tthis.options.heading = '<strong>' + mw.message( 'mobile-frontend-notifications-filter-title' ).escaped() + '</strong>';\n\t}\n} );\n\nmodule.exports = NotificationsFilterOverlay;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tpromisedView = require( '../mobile.startup/promisedView' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAnchor = require( '../mobile.startup/Anchor' ),\n\tNotificationsOverlay;\n\n/**\n * Overlay for notifications\n * @class NotificationsOverlay\n * @extend Overlay\n * @uses mw.Api\n *\n * @param {Object} params Configuration options\n */\nNotificationsOverlay = function ( params ) {\n\tvar wrapperWidget,\n\t\tmaxNotificationCount = mw.config.get( 'wgEchoMaxNotificationCount' ),\n\t\techoApi = new mw.echo.api.EchoApi(),\n\t\tunreadCounter = new mw.echo.dm.UnreadNotificationCounter( echoApi, 'all', maxNotificationCount ),\n\t\tmarkAllReadButton = new OO.ui.ButtonWidget( {\n\t\t\ticon: 'checkAll',\n\t\t\ttitle: mw.msg( 'echo-mark-all-as-read' )\n\t\t} ),\n\t\tmodelManager = new mw.echo.dm.ModelManager( unreadCounter, { type: [ 'message', 'alert' ] } ),\n\t\tcontroller = new mw.echo.Controller(\n\t\t\techoApi,\n\t\t\tmodelManager,\n\t\t\t{\n\t\t\t\ttype: [ 'message', 'alert' ]\n\t\t\t}\n\t\t),\n\t\tmarkAsReadHandler = function () {\n\t\t\tmarkAllReadButton.toggle(\n\t\t\t\tcontroller.manager.hasLocalUnread()\n\t\t\t);\n\t\t},\n\t\t// Create a container which will be revealed when \"more options\" (...)\n\t\t// is clicked on a notification. Hidden by default.\n\t\t$moreOptions = util.parseHTML( '<div>' )\n\t\t\t.addClass( 'notifications-overlay-overlay position-fixed' ),\n\t\toptions = util.extend( {}, {\n\t\t\theading: '<strong>' + mw.message( 'notifications' ).escaped() + '</strong>',\n\t\t\tfooterAnchor: new Anchor( {\n\t\t\t\thref: mw.util.getUrl( 'Special:Notifications' ),\n\t\t\t\tprogressive: true,\n\t\t\t\tadditionalClassNames: 'footer-link notifications-archive-link',\n\t\t\t\tlabel: mw.msg( 'echo-overlay-link' )\n\t\t\t} ).options,\n\t\t\theaderActions: [\n\t\t\t\tView.make(\n\t\t\t\t\t{ class: 'notifications-overlay-header-markAllRead' },\n\t\t\t\t\t[ markAllReadButton.$element ]\n\t\t\t\t)\n\t\t\t],\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay notifications-overlay navigation-drawer'\n\t\t}, params ),\n\t\t// Anchor tag that corresponds to a notifications badge\n\t\tbadge = options.badge,\n\t\tonCountChange = function ( cappedCount ) {\n\t\t\tbadge.setCount( cappedCount );\n\t\t},\n\t\tonNotificationListRendered = function () {\n\t\t\tbadge.markAsSeen();\n\t\t};\n\n\tOverlay.call( this, options );\n\n\t// On error use the url as a fallback\n\tif ( options.error ) {\n\t\toptions.onError();\n\t\treturn;\n\t}\n\n\tmw.echo.config.maxPrioritizedActions = 1;\n\n\twrapperWidget = new mw.echo.ui.NotificationsWrapper( controller, modelManager, {\n\t\t$overlay: $moreOptions\n\t} );\n\n\t// Mark all read\n\tmarkAllReadButton.toggle( false );\n\n\t// Events\n\tunreadCounter.on( 'countChange', function ( count ) {\n\t\tonCountChange(\n\t\t\tcontroller.manager.getUnreadCounter().getCappedNotificationCount( count )\n\t\t);\n\t\tmarkAsReadHandler();\n\t} );\n\tmarkAllReadButton.on( 'click', function () {\n\t\tvar numNotifications = controller.manager.getLocalUnread().length;\n\n\t\tcontroller.markLocalNotificationsRead()\n\t\t\t.then( function () {\n\t\t\t\tmw.notify( mw.msg( 'echo-mark-all-as-read-confirmation', numNotifications ) );\n\t\t\t\tmarkAllReadButton.toggle( false );\n\t\t\t}, function () {\n\t\t\t\tmarkAllReadButton.toggle( false );\n\t\t\t} );\n\t} );\n\n\t// Initialize\n\tthis.$el.find( '.overlay-content' ).append(\n\t\tpromisedView(\n\t\t\t// Populate notifications\n\t\t\twrapperWidget.populate().then( function () {\n\t\t\t\tcontroller.updateSeenTime();\n\t\t\t\tonNotificationListRendered();\n\t\t\t\tmarkAsReadHandler();\n\t\t\t\t// Connect event here as we know that everything loaded correctly\n\t\t\t\tmodelManager.on( 'update', markAsReadHandler );\n\t\t\t\treturn View.make( {}, [ wrapperWidget.$element, $moreOptions ] );\n\t\t\t} )\n\t\t).$el\n\t);\n};\n\n// The third parameter is essential. If not defined, per mfExtend,\n// prototype will not be copied across.\nmfExtend( NotificationsOverlay, Overlay, {} );\n\nmodule.exports = NotificationsOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tNotificationsOverlay = require( './NotificationsOverlay' ),\n\tNotificationsFilterOverlay = require( './NotificationsFilterOverlay' );\n\nm.define( 'mobile.notifications.overlay/NotificationsFilterOverlay', NotificationsFilterOverlay );\nm.define( 'mobile.notifications.overlay/NotificationsOverlay', NotificationsOverlay );\n"],"sourceRoot":""}