{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/mobile.notifications.overlay.js"],"names":["NotificationsFilterOverlay","Overlay","require","util","mfExtend","options","self","this","call","extend","className","on","mainMenu","closeNavigationDrawers","$crossWikiUnreadFilter","hide","$notifReadState","find","$el","append","parseHTML","addClass","defaults","prototype","heading","mw","msg","preRender","message","escaped","module","exports","NotificationsOverlay","View","promisedView","Anchor","params","modelManager","unreadCounter","wrapperWidget","confirmationWidget","markAllReadButton","OO","ui","ButtonWidget","icon","title","$moreOptions","footerAnchor","href","getUrl","progressive","additionalClassNames","label","headerActions","make","class","$element","isBorderBox","maxNotificationCount","config","get","echoApi","echo","api","EchoApi","badge","error","onError","maxPrioritizedActions","dm","UnreadNotificationCounter","ModelManager","type","controller","Controller","NotificationsWrapper","$overlay","toggle","ConfirmationPopupWidget","connect","countChange","click","populate","then","updateSeenTime","markAsSeen","checkShowMarkAllRead","update","manager","hasLocalUnread","onMarkAllReadButtonClick","overlay","numNotifications","getLocalUnread","length","markLocalNotificationsRead","setLabel","showAnimated","onUnreadCountChange","count","setCount","getUnreadCounter","getCappedNotificationCount","m","define"],"mappings":"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","file":"mobile.notifications.overlay.js","sourcesContent":["var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tNotificationsFilterOverlay;\n\n/**\n * Overlay for notifications filter\n *\n * @class NotificationsFilterOverlay\n * @extends Overlay\n * @param {Object} options\n * @param {jQuery.Object} options.$notifReadState - notification read status widgets\n * @param {jQuery.Object} options.$crossWikiUnreadFilter - notification unread filter\n *\n */\nNotificationsFilterOverlay = function ( options ) {\n\tvar self = this;\n\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend( {\n\t\t\t// FIXME: notification-overlay class to be generalized\n\t\t\tclassName: 'overlay notifications-filter-overlay notifications-overlay navigation-drawer'\n\t\t}, options )\n\t);\n\n\t// Initialize\n\tthis.on( 'hide', function () {\n\t\toptions.mainMenu.closeNavigationDrawers();\n\t} );\n\toptions.$crossWikiUnreadFilter.on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\toptions.$notifReadState.find( '.oo-ui-buttonElement' ).on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\tthis.$el.find( '.overlay-content' ).append(\n\t\tthis.parseHTML( '<div>' )\n\t\t\t.addClass( 'notifications-filter-overlay-read-state' )\n\t\t\t.append( options.$notifReadState ),\n\t\toptions.$crossWikiUnreadFilter\n\t);\n};\n\nmfExtend( NotificationsFilterOverlay, Overlay, {\n\t/**\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.heading Heading text.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-notifications-filter-title' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tthis.options.heading = '<strong>' + mw.message( 'mobile-frontend-notifications-filter-title' ).escaped() + '</strong>';\n\t}\n} );\n\nmodule.exports = NotificationsFilterOverlay;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tpromisedView = require( '../mobile.startup/promisedView' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAnchor = require( '../mobile.startup/Anchor' ),\n\tNotificationsOverlay;\n\n/**\n * Overlay for notifications\n * @class NotificationsOverlay\n * @extend Overlay\n * @uses mw.Api\n *\n * @param {Object} params Configuration options\n */\nNotificationsOverlay = function ( params ) {\n\tvar modelManager, unreadCounter, wrapperWidget,\n\t\tconfirmationWidget,\n\t\tself = this,\n\t\tmarkAllReadButton = new OO.ui.ButtonWidget( {\n\t\t\ticon: 'checkAll',\n\t\t\ttitle: mw.msg( 'echo-mark-all-as-read' )\n\t\t} ),\n\t\t// Create a container which will be revealed when \"more options\" (...)\n\t\t// is clicked on a notification. Hidden by default.\n\t\t$moreOptions = util.parseHTML( '<div>' )\n\t\t\t.addClass( 'notifications-overlay-overlay position-fixed' ),\n\t\toptions = util.extend( {}, {\n\t\t\theading: '<strong>' + mw.message( 'notifications' ).escaped() + '</strong>',\n\t\t\tfooterAnchor: new Anchor( {\n\t\t\t\thref: mw.util.getUrl( 'Special:Notifications' ),\n\t\t\t\tprogressive: true,\n\t\t\t\tadditionalClassNames: 'footer-link notifications-archive-link',\n\t\t\t\tlabel: mw.msg( 'echo-overlay-link' )\n\t\t\t} ).options,\n\t\t\theaderActions: [\n\t\t\t\tView.make(\n\t\t\t\t\t{ class: 'notifications-overlay-header-markAllRead' },\n\t\t\t\t\t[ markAllReadButton.$element ]\n\t\t\t\t)\n\t\t\t],\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay notifications-overlay navigation-drawer'\n\t\t}, params ),\n\t\tmaxNotificationCount = mw.config.get( 'wgEchoMaxNotificationCount' ),\n\t\techoApi = new mw.echo.api.EchoApi();\n\n\tOverlay.call( this, options );\n\n\t// Anchor tag that corresponds to a notifications badge\n\tthis.badge = options.badge;\n\n\t// On error use the url as a fallback\n\tif ( options.error ) {\n\t\toptions.onError();\n\t\treturn;\n\t}\n\n\tmw.echo.config.maxPrioritizedActions = 1;\n\n\tunreadCounter = new mw.echo.dm.UnreadNotificationCounter( echoApi, 'all', maxNotificationCount );\n\tmodelManager = new mw.echo.dm.ModelManager( unreadCounter, { type: [ 'message', 'alert' ] } );\n\tthis.controller = new mw.echo.Controller(\n\t\techoApi,\n\t\tmodelManager,\n\t\t{\n\t\t\ttype: [ 'message', 'alert' ]\n\t\t}\n\t);\n\n\twrapperWidget = new mw.echo.ui.NotificationsWrapper( this.controller, modelManager, {\n\t\t$overlay: $moreOptions\n\t} );\n\n\t// Mark all read\n\tthis.markAllReadButton = markAllReadButton;\n\tmarkAllReadButton.toggle( false );\n\n\t// TODO: We should be using 'toast' (which uses mw.notify)\n\t// when this bug is fixed: https://phabricator.wikimedia.org/T143837\n\tconfirmationWidget = new mw.echo.ui.ConfirmationPopupWidget();\n\t$moreOptions.append( confirmationWidget.$element );\n\t// Expose for usage in onMarkAllReadButtonClick handler\n\t// to be fixed in I56b4111518c8440dcb5d9cff2d4b54b263b8ab31\n\tthis.confirmationWidget = confirmationWidget;\n\n\t// Events\n\tunreadCounter.connect( this, {\n\t\tcountChange: 'onUnreadCountChange'\n\t} );\n\tthis.markAllReadButton.connect( this, {\n\t\tclick: 'onMarkAllReadButtonClick'\n\t} );\n\n\t// Initialize\n\tthis.$el.find( '.overlay-content' ).append(\n\t\tpromisedView(\n\t\t\t// Populate notifications\n\t\t\twrapperWidget.populate().then( function () {\n\t\t\t\tself.controller.updateSeenTime();\n\t\t\t\tself.badge.markAsSeen();\n\t\t\t\tself.checkShowMarkAllRead();\n\t\t\t\t// Connect event here as we know that everything loaded correctly\n\t\t\t\tmodelManager.connect( self, {\n\t\t\t\t\tupdate: 'checkShowMarkAllRead'\n\t\t\t\t} );\n\t\t\t\treturn View.make( {}, [ wrapperWidget.$element, $moreOptions ] );\n\t\t\t} )\n\t\t).$el\n\t);\n};\n\nmfExtend( NotificationsOverlay, Overlay, {\n\t/**\n\t * Toggle mark all read button\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tcheckShowMarkAllRead: function () {\n\t\tthis.markAllReadButton.toggle(\n\t\t\tthis.controller.manager.hasLocalUnread()\n\t\t);\n\t},\n\t/**\n\t * Respond to mark all read button click\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tonMarkAllReadButtonClick: function () {\n\t\tvar overlay = this,\n\t\t\tnumNotifications = this.controller.manager.getLocalUnread().length;\n\n\t\tthis.controller.markLocalNotificationsRead()\n\t\t\t.then( function () {\n\t\t\t\toverlay.confirmationWidget.setLabel(\n\t\t\t\t\tmw.msg( 'echo-mark-all-as-read-confirmation', numNotifications )\n\t\t\t\t);\n\t\t\t\toverlay.confirmationWidget.showAnimated();\n\t\t\t} );\n\t},\n\t/**\n\t * Update the unread number on the notifications badge\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t * @param {number} count Number of unread notifications\n\t */\n\tonUnreadCountChange: function ( count ) {\n\t\tthis.badge.setCount(\n\t\t\tthis.controller.manager.getUnreadCounter().getCappedNotificationCount( count )\n\t\t);\n\n\t\tthis.checkShowMarkAllRead();\n\t}\n} );\n\nmodule.exports = NotificationsOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tNotificationsOverlay = require( './NotificationsOverlay' ),\n\tNotificationsFilterOverlay = require( './NotificationsFilterOverlay' );\n\nm.define( 'mobile.notifications.overlay/NotificationsFilterOverlay', NotificationsFilterOverlay );\nm.define( 'mobile.notifications.overlay/NotificationsOverlay', NotificationsOverlay );\n"],"sourceRoot":""}