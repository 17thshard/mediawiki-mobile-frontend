{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/NotificationsOverlay.js","webpack://mfModules.[name]/./src/mobile.notifications.overlay/mobile.notifications.overlay.js"],"names":["NotificationsFilterOverlay","Overlay","__webpack_require__","util","mfExtend","options","self","this","call","extend","className","on","mainMenu","closeNavigationDrawers","$crossWikiUnreadFilter","hide","$notifReadState","find","$","append","parseHTML","addClass","defaults","prototype","heading","mw","msg","preRender","message","escaped","module","exports","NotificationsOverlay","Anchor","params","modelManager","unreadCounter","wrapperWidget","isBorderBox","maxNotificationCount","config","get","echoApi","echo","api","EchoApi","badge","$overlay","error","onError","maxPrioritizedActions","doneLoading","dm","UnreadNotificationCounter","ModelManager","type","controller","Controller","ui","NotificationsWrapper","markAllReadButton","OO","ButtonWidget","icon","title","toggle","$element","confirmationWidget","ConfirmationPopupWidget","connect","countChange","update","click","populate","then","setDoneLoading","updateSeenTime","markAsSeen","checkShowMarkAllRead","footerAnchor","href","getUrl","progressive","additionalClassNames","label","isDoneLoading","manager","hasLocalUnread","onMarkAllReadButtonClick","overlay","numNotifications","getLocalUnread","length","markLocalNotificationsRead","setLabel","showAnimated","onUnreadCountChange","count","setCount","getUnreadCounter","getCappedNotificationCount","postRender","apply","notifications","errorMessage","remove","m","define"],"mappings":"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","file":"mobile.notifications.overlay.js","sourcesContent":["var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tNotificationsFilterOverlay;\n\n/**\n * Overlay for notifications filter\n *\n * @class NotificationsFilterOverlay\n * @extends Overlay\n * @param {Object} options\n * @param {jQuery.Object} options.$notifReadState - notification read status widgets\n * @param {jQuery.Object} options.$crossWikiUnreadFilter - notification unread filter\n *\n */\nNotificationsFilterOverlay = function ( options ) {\n\tvar self = this;\n\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend( {\n\t\t\t// FIXME: notification-overlay class to be generalized\n\t\t\tclassName: 'overlay notifications-filter-overlay notifications-overlay navigation-drawer'\n\t\t}, options )\n\t);\n\n\t// Initialize\n\tthis.on( 'hide', function () {\n\t\toptions.mainMenu.closeNavigationDrawers();\n\t} );\n\toptions.$crossWikiUnreadFilter.on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\toptions.$notifReadState.find( '.oo-ui-buttonElement' ).on( 'click', function () {\n\t\tself.hide();\n\t} );\n\n\tthis.$( '.overlay-content' ).append(\n\t\tthis.parseHTML( '<div>' )\n\t\t\t.addClass( 'notifications-filter-overlay-read-state' )\n\t\t\t.append( options.$notifReadState ),\n\t\toptions.$crossWikiUnreadFilter\n\t);\n};\n\nmfExtend( NotificationsFilterOverlay, Overlay, {\n\t/**\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.heading Heading text.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-notifications-filter-title' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof NotificationsFilterOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tthis.options.heading = '<strong>' + mw.message( 'mobile-frontend-notifications-filter-title' ).escaped() + '</strong>';\n\t}\n} );\n\nmodule.exports = NotificationsFilterOverlay;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAnchor = require( '../mobile.startup/Anchor' ),\n\tNotificationsOverlay;\n\n/**\n * Overlay for notifications\n * @class NotificationsOverlay\n * @extend Overlay\n * @uses mw.Api\n *\n * @param {Object} params Configuration options\n */\nNotificationsOverlay = function ( params ) {\n\tvar modelManager, unreadCounter, wrapperWidget,\n\t\tself = this,\n\t\toptions = util.extend( {}, {\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay notifications-overlay navigation-drawer'\n\t\t}, params ),\n\t\tmaxNotificationCount = mw.config.get( 'wgEchoMaxNotificationCount' ),\n\t\techoApi = new mw.echo.api.EchoApi();\n\n\tOverlay.call( this, options );\n\n\t// Anchor tag that corresponds to a notifications badge\n\tthis.badge = options.badge;\n\tthis.$overlay = this.parseHTML( '<div>' )\n\t\t.addClass( 'notifications-overlay-overlay position-fixed' );\n\n\t// On error use the url as a fallback\n\tif ( options.error ) {\n\t\toptions.onError();\n\t\treturn;\n\t}\n\n\tmw.echo.config.maxPrioritizedActions = 1;\n\n\tthis.doneLoading = false;\n\n\tunreadCounter = new mw.echo.dm.UnreadNotificationCounter( echoApi, 'all', maxNotificationCount );\n\tmodelManager = new mw.echo.dm.ModelManager( unreadCounter, { type: [ 'message', 'alert' ] } );\n\tthis.controller = new mw.echo.Controller(\n\t\techoApi,\n\t\tmodelManager,\n\t\t{\n\t\t\ttype: [ 'message', 'alert' ]\n\t\t}\n\t);\n\n\twrapperWidget = new mw.echo.ui.NotificationsWrapper( this.controller, modelManager, {\n\t\t$overlay: this.$overlay\n\t} );\n\n\t// Mark all read\n\tthis.markAllReadButton = new OO.ui.ButtonWidget( {\n\t\ticon: 'checkAll',\n\t\ttitle: mw.msg( 'echo-mark-all-as-read' )\n\t} );\n\tthis.markAllReadButton.toggle( false );\n\tthis.$( '.overlay-header' )\n\t\t.append(\n\t\t\tthis.parseHTML( '<div>' )\n\t\t\t\t.addClass( 'notifications-overlay-header-markAllRead' )\n\t\t\t\t.append(\n\t\t\t\t\tthis.markAllReadButton.$element\n\t\t\t\t)\n\t\t);\n\n\t// TODO: We should be using 'toast' (which uses mw.notify)\n\t// when this bug is fixed: https://phabricator.wikimedia.org/T143837\n\tthis.confirmationWidget = new mw.echo.ui.ConfirmationPopupWidget();\n\tthis.$overlay.append( this.confirmationWidget.$element );\n\n\t// Events\n\tunreadCounter.connect( this, {\n\t\tcountChange: 'onUnreadCountChange'\n\t} );\n\tmodelManager.connect( this, {\n\t\tupdate: 'checkShowMarkAllRead'\n\t} );\n\tthis.markAllReadButton.connect( this, {\n\t\tclick: 'onMarkAllReadButtonClick'\n\t} );\n\n\t// Initialize\n\tthis.$( '.overlay-content' ).append(\n\t\twrapperWidget.$element,\n\t\tthis.$overlay\n\t);\n\n\t// Populate notifications\n\twrapperWidget.populate().then( function () {\n\t\tself.setDoneLoading();\n\t\tself.controller.updateSeenTime();\n\t\tself.badge.markAsSeen();\n\t\tself.checkShowMarkAllRead();\n\t} );\n};\n\nmfExtend( NotificationsOverlay, Overlay, {\n\t/**\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.heading Heading text.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'notifications' ),\n\t\tfooterAnchor: new Anchor( {\n\t\t\thref: mw.util.getUrl( 'Special:Notifications' ),\n\t\t\tprogressive: true,\n\t\t\tadditionalClassNames: 'footer-link notifications-archive-link',\n\t\t\tlabel: mw.msg( 'echo-overlay-link' )\n\t\t} ).options\n\t} ),\n\t/**\n\t * Set done loading flag for notifications list\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tsetDoneLoading: function () {\n\t\tthis.doneLoading = true;\n\t},\n\t/**\n\t * Check if notifications have finished loading\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t * @return {boolean} Notifications list has finished loading\n\t */\n\tisDoneLoading: function () {\n\t\treturn this.doneLoading;\n\t},\n\t/**\n\t * Toggle mark all read button\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tcheckShowMarkAllRead: function () {\n\t\tthis.markAllReadButton.toggle(\n\t\t\tthis.isDoneLoading() &&\n\t\t\tthis.controller.manager.hasLocalUnread()\n\t\t);\n\t},\n\t/**\n\t * Respond to mark all read button click\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tonMarkAllReadButtonClick: function () {\n\t\tvar overlay = this,\n\t\t\tnumNotifications = this.controller.manager.getLocalUnread().length;\n\n\t\tthis.controller.markLocalNotificationsRead()\n\t\t\t.then( function () {\n\t\t\t\toverlay.confirmationWidget.setLabel(\n\t\t\t\t\tmw.msg( 'echo-mark-all-as-read-confirmation', numNotifications )\n\t\t\t\t);\n\t\t\t\toverlay.confirmationWidget.showAnimated();\n\t\t\t} );\n\t},\n\t/**\n\t * Update the unread number on the notifications badge\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t * @param {number} count Number of unread notifications\n\t */\n\tonUnreadCountChange: function ( count ) {\n\t\tthis.badge.setCount(\n\t\t\tthis.controller.manager.getUnreadCounter().getCappedNotificationCount( count )\n\t\t);\n\n\t\tthis.checkShowMarkAllRead();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tthis.options.heading = '<strong>' + mw.message( 'notifications' ).escaped() + '</strong>';\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof NotificationsOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tif ( this.options.notifications || this.options.errorMessage ) {\n\t\t\tthis.$( '.loading' ).remove();\n\t\t}\n\t}\n} );\n\nmodule.exports = NotificationsOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tNotificationsOverlay = require( './NotificationsOverlay' ),\n\tNotificationsFilterOverlay = require( './NotificationsFilterOverlay' );\n\nm.define( 'mobile.notifications.overlay/NotificationsFilterOverlay', NotificationsFilterOverlay );\nm.define( 'mobile.notifications.overlay/NotificationsOverlay', NotificationsOverlay );\n"],"sourceRoot":""}