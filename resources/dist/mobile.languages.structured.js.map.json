{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.languages.structured/LanguageOverlay.js","webpack://mfModules.[name]/./src/mobile.languages.structured/mobile.languages.structured.js","webpack://mfModules.[name]/./src/mobile.languages.structured/rtlLanguages.js","webpack://mfModules.[name]/./src/mobile.languages.structured/util.js"],"names":["Overlay","__webpack_require__","util","langUtil","LanguageOverlay","options","this","languages","getStructuredLanguages","variants","getFrequentlyUsedLanguages","deviceLanguage","call","extend","events","click a","input .search","className","mfExtend","defaults","prototype","heading","mw","msg","inputPlaceholder","allLanguagesHeader","toLocaleUpperCase","suggestedLanguagesHeader","templatePartials","content","template","get","preRender","allLanguages","all","allLanguagesCount","length","suggestedLanguages","suggested","suggestedLanguagesCount","postRender","apply","$siteLinksList","$","$languageItems","find","$subheaders","onLinkClick","ev","lang","currentTarget","attr","self","$visibleLanguageLinks","filter","saveLanguageUsageCount","each","i","link","hasClass","onSearchInput","filterLanguages","target","val","toLowerCase","filteredList","forEach","language","langname","autonym","indexOf","push","variant","addClass","join","removeClass","module","exports","m","define","log","mfUtils","rtlLanguages","getDir","dir","frequentlyUsedLanguages","hasOwn","Object","hasOwnProperty","maxFrequency","minFrequency","missingDir","addLangDir","parentLanguage","index","deviceLanguagesWithVariants","slice","getDeviceLanguageOrParent","keys","frequency","map","sort","a","b","toLocaleLowerCase","warn","languageMap","storage","JSON","parse","saveFrequentlyUsedLanguages","set","stringify","languageCode","count"],"mappings":"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","file":"mobile.languages.structured.js","sourcesContent":["var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tlangUtil = require( './util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' );\n\n/**\n * Overlay displaying a structured list of languages for a page\n *\n * @class LanguageOverlay\n * @extends Overlay\n *\n * @param {Object} options Configuration options\n * @param {Object[]} options.languages list of language objects as returned by the API\n * @param {Array|boolean} options.variants language variant objects\n *  or false if no variants exist\n * @param {string} [options.deviceLanguage] the device's primary language\n */\nfunction LanguageOverlay( options ) {\n\t/**\n\t * @prop {StructuredLanguages} languages` JSDoc.\n\t */\n\tthis.languages = langUtil.getStructuredLanguages(\n\t\toptions.languages,\n\t\toptions.variants,\n\t\tlangUtil.getFrequentlyUsedLanguages(),\n\t\toptions.deviceLanguage\n\t);\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tevents: {\n\t\t\t\t'click a': 'onLinkClick',\n\t\t\t\t'input .search': 'onSearchInput'\n\t\t\t},\n\t\t\tclassName: 'overlay language-overlay'\n\t\t} )\n\t);\n}\n\nmfExtend( LanguageOverlay, Overlay, {\n\t/**\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object[]} defaults.languages each object has keys as\n\t *  returned by the langlink API https://www.mediawiki.org/wiki/API:Langlinks\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-language-heading' ),\n\t\tinputPlaceholder: mw.msg( 'mobile-frontend-languages-structured-overlay-search-input-placeholder' ),\n\t\t// we can't rely on CSS only to uppercase the headings. See https://stackoverflow.com/questions/3777443/css-text-transform-not-working-properly-for-turkish-characters\n\t\tallLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-all-languages-header' ).toLocaleUpperCase(),\n\t\tsuggestedLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-suggested-languages-header' ).toLocaleUpperCase()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: mw.template.get( 'mobile.languages.structured', 'LanguageOverlay.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tvar languages = this.languages;\n\t\t// Update options with template properties before we perform the render.\n\t\tutil.extend( this.options, {\n\t\t\tallLanguages: languages.all,\n\t\t\tallLanguagesCount: languages.all.length,\n\t\t\tsuggestedLanguages: languages.suggested,\n\t\t\tsuggestedLanguagesCount: languages.suggested.length\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\t// cache\n\t\tthis.$siteLinksList = this.$( '.site-link-list' );\n\t\tthis.$languageItems = this.$siteLinksList.find( 'a' );\n\t\tthis.$subheaders = this.$( 'h3' );\n\t},\n\t/**\n\t * Article link click event handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonLinkClick: function ( ev ) {\n\t\tvar $link = this.$( ev.currentTarget ),\n\t\t\tlang = $link.attr( 'lang' ),\n\t\t\tself = this,\n\t\t\t$visibleLanguageLinks = this.$languageItems.filter( ':visible' );\n\n\t\tlangUtil.saveLanguageUsageCount( lang, langUtil.getFrequentlyUsedLanguages() );\n\n\t\t// find the index of the clicked language in the list of visible results\n\t\t$visibleLanguageLinks.each( function ( i, link ) {\n\t\t\tif ( self.$( link ).hasClass( lang ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Search input handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev Event object.\n\t */\n\tonSearchInput: function ( ev ) {\n\t\tthis.filterLanguages( this.$( ev.target ).val().toLowerCase() );\n\t},\n\t/**\n\t * Filter the language list to only show languages that match the current search term.\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {string} val of search term (lowercase).\n\t */\n\tfilterLanguages: function ( val ) {\n\t\tvar filteredList = [];\n\n\t\tif ( val ) {\n\t\t\tthis.options.languages.forEach( function ( language ) {\n\t\t\t\tvar langname = language.langname;\n\t\t\t\t// search by language code or language name\n\t\t\t\tif ( language.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\t( langname && langname.toLowerCase().indexOf( val ) > -1 ) ||\n\t\t\t\t\t\tlanguage.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t) {\n\t\t\t\t\tfilteredList.push( language.lang );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( this.options.variants ) {\n\t\t\t\tthis.options.variants.forEach( function ( variant ) {\n\t\t\t\t\t// search by variant code or variant name\n\t\t\t\t\tif ( variant.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\tvariant.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tfilteredList.push( variant.lang );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$languageItems.addClass( 'hidden' );\n\t\t\tif ( filteredList.length ) {\n\t\t\t\tthis.$siteLinksList.find( '.' + filteredList.join( ',.' ) ).removeClass( 'hidden' );\n\t\t\t}\n\t\t\tthis.$siteLinksList.addClass( 'filtered' );\n\t\t\tthis.$subheaders.addClass( 'hidden' );\n\t\t} else {\n\t\t\tthis.$languageItems.removeClass( 'hidden' );\n\t\t\tthis.$siteLinksList.removeClass( 'filtered' );\n\t\t\tthis.$subheaders.removeClass( 'hidden' );\n\t\t}\n\t}\n} );\n\nmodule.exports = LanguageOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tLanguageOverlay = require( './LanguageOverlay' );\n\n// Exposed for Minerva integration\nm.define( 'mobile.languages.structured/LanguageOverlay', LanguageOverlay );\n","module.exports = [\n\t'aeb',\n\t'aeb-arab',\n\t'ar',\n\t'arc',\n\t'arq',\n\t'arz',\n\t'azb',\n\t'bcc',\n\t'bgn',\n\t'bqi',\n\t'ckb',\n\t'dv',\n\t'fa',\n\t'glk',\n\t'he',\n\t'khw',\n\t'kk-arab',\n\t'kk-cn',\n\t'ks',\n\t'ks-arab',\n\t'ku-arab',\n\t'lki',\n\t'lrc',\n\t'luz',\n\t'mzn',\n\t'pnb',\n\t'ps',\n\t'sd',\n\t'sdh',\n\t'skr',\n\t'skr-arab',\n\t'ug',\n\t'ug-arab',\n\t'ur',\n\t'yi'\n];\n","var\n\tlog = mw.log,\n\tmfUtils = require( '../mobile.startup/util' ),\n\trtlLanguages = require( './rtlLanguages' );\n\n/**\n * @typedef {Object} Language\n * @prop {string} autonym of language e.g. français\n * @prop {string} langname in the user's current language e.g French\n * @prop {string} title of the page in the language e.g. Espagne\n * @prop {string} dir (rtl or ltr)\n * @prop {string} url of the page\n *\n * @typedef {Object} SuggestedLanguage\n * @prop {string} autonym of language e.g. français\n * @prop {string} langname in the user's current language e.g French\n * @prop {string} title of the page in the language e.g. Espagne\n * @prop {string} dir (rtl or ltr)\n * @prop {string} url of the page\n * @prop {number} frequency of times the language has been used by the given user\n *\n * @typedef {Object} StructuredLanguages\n * @prop {Language[]} all languages that are available\n * @prop {SuggestedLanguage[]} suggested languages based on users browsing history\n */\n\n/**\n * Return the device language if it's in the list of article languages.\n * If the language is a variant of a general language, and if the article\n * is not available in that language, then return the general language\n * if article is available in it. For example, if the device language is\n * 'en-gb', and the article is only available in 'en', then return 'en'.\n * @param {Object[]} languages list of language objects as returned by the API\n * @param {string|undefined} deviceLanguage the device's primary language\n * @return {string|undefined} Return undefined if the article is not available in\n *  the (general or variant) device language\n */\nfunction getDeviceLanguageOrParent( languages, deviceLanguage ) {\n\tvar parentLanguage, index,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tdeviceLanguagesWithVariants = {};\n\n\tif ( !deviceLanguage ) {\n\t\treturn;\n\t}\n\n\t// Are we dealing with a variant?\n\tindex = deviceLanguage.indexOf( '-' );\n\tif ( index !== -1 ) {\n\t\tparentLanguage = deviceLanguage.slice( 0, index );\n\t}\n\n\tlanguages.forEach( function ( language ) {\n\t\tif ( language.lang === parentLanguage || language.lang === deviceLanguage ) {\n\t\t\tdeviceLanguagesWithVariants[ language.lang ] = true;\n\t\t}\n\t} );\n\n\tif ( hasOwn.call( deviceLanguagesWithVariants, deviceLanguage ) ) {\n\t\t// the device language is one of the available languages\n\t\treturn deviceLanguage;\n\t} else if ( hasOwn.call( deviceLanguagesWithVariants, parentLanguage ) ) {\n\t\t// no device language, but the parent language is one of the available languages\n\t\treturn parentLanguage;\n\t}\n}\n\n/**\n * Utility function for the structured language overlay\n *\n * @class util\n * @singleton\n */\nmodule.exports = {\n\t/**\n\t * Determine whether a language is LTR or RTL\n\t * This works around T74153 and T189036\n\t * @memberof util\n\t * @instance\n\t * @param {Object} language with 'lang' key.\n\t * @return {Object} language with 'lang' key and new 'dir' key.\n\t */\n\tgetDir: function ( language ) {\n\t\tvar dir = rtlLanguages.indexOf( language.lang ) > -1 ? 'rtl' : 'ltr';\n\t\treturn mfUtils.extend( {}, language, { dir: dir } );\n\t},\n\n\t/**\n\t * Return two sets of languages: suggested and all (everything else)\n\t *\n\t * Suggested languages are the ones that the user has used before. This also\n\t * includes the user device's primary language. Suggested languages are ordered\n\t * by frequency in descending order. The device's language is always at the top.\n\t * This group also includes the variants.\n\t *\n\t * All languages are the languages that are not suggested.\n\t * Languages in this list are ordered in the lexicographical order of\n\t * their language names.\n\t * @memberof util\n\t * @instance\n\t * @param {Object[]} languages list of language objects as returned by the API\n\t * @param {Array|boolean} variants language variant objects or false if no variants exist\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t * @param {string} [deviceLanguage] the device's primary language\n\t * @return {StructuredLanguages}\n\t */\n\tgetStructuredLanguages: function (\n\t\tlanguages, variants, frequentlyUsedLanguages, deviceLanguage\n\t) {\n\t\tvar hasOwn = Object.prototype.hasOwnProperty,\n\t\t\tmaxFrequency = 0,\n\t\t\tminFrequency = 0,\n\t\t\tmissingDir = 0,\n\t\t\tsuggestedLanguages = [],\n\t\t\tallLanguages = [],\n\t\t\tself = this;\n\n\t\t// Is the article available in the user's device language?\n\t\tdeviceLanguage = getDeviceLanguageOrParent( languages, deviceLanguage );\n\t\tif ( deviceLanguage ) {\n\t\t\tObject.keys( frequentlyUsedLanguages ).forEach( function ( language ) {\n\t\t\t\tvar frequency = frequentlyUsedLanguages[ language ];\n\t\t\t\tmaxFrequency = maxFrequency < frequency ? frequency : maxFrequency;\n\t\t\t\tminFrequency = minFrequency > frequency ? frequency : minFrequency;\n\t\t\t} );\n\n\t\t\t// Make the device language the most frequently used one so that\n\t\t\t// it appears at the top of the list when sorted by frequency.\n\t\t\tfrequentlyUsedLanguages[ deviceLanguage ] = maxFrequency + 1;\n\t\t}\n\n\t\t/**\n\t\t * @param {Object} language\n\t\t * @return {Object} which has 'dir' key.\n\t\t */\n\t\tfunction addLangDir( language ) {\n\t\t\tif ( language.dir ) {\n\t\t\t\treturn language;\n\t\t\t} else {\n\t\t\t\tmissingDir++;\n\t\t\t\treturn self.getDir( language );\n\t\t\t}\n\t\t}\n\n\t\t// Separate languages into suggested and all languages.\n\t\tlanguages.map( addLangDir ).forEach( function ( language ) {\n\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, language.lang ) ) {\n\t\t\t\tlanguage.frequency = frequentlyUsedLanguages[ language.lang ];\n\t\t\t\tsuggestedLanguages.push( language );\n\t\t\t} else {\n\t\t\t\tallLanguages.push( language );\n\t\t\t}\n\t\t} );\n\n\t\t// Add variants to the suggested languages list and assign the lowest\n\t\t// frequency because the variant hasn't been clicked on yet.\n\t\t// Note that the variants data doesn't contain the article title, thus\n\t\t// we cannot show it for the variants.\n\t\tif ( variants ) {\n\t\t\tvariants.map( addLangDir ).forEach( function ( variant ) {\n\t\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, variant.lang ) ) {\n\t\t\t\t\tvariant.frequency = frequentlyUsedLanguages[variant.lang];\n\t\t\t\t} else {\n\t\t\t\t\tvariant.frequency = minFrequency - 1;\n\t\t\t\t}\n\t\t\t\tsuggestedLanguages.push( variant );\n\t\t\t} );\n\t\t}\n\n\t\t// sort suggested languages in descending order by frequency\n\t\tsuggestedLanguages = suggestedLanguages.sort( function ( a, b ) {\n\t\t\treturn b.frequency - a.frequency;\n\t\t} );\n\n\t\t/**\n\t\t * Compare language names lexicographically\n\t\t *\n\t\t * @param {Object} a first language\n\t\t * @param {Object} b second language\n\t\t * @return {number} Comparison value, 1 or -1\n\t\t */\n\t\tfunction compareLanguagesByLanguageName( a, b ) {\n\t\t\treturn a.autonym.toLocaleLowerCase() < b.autonym.toLocaleLowerCase() ? -1 : 1;\n\t\t}\n\n\t\tallLanguages = allLanguages.sort( compareLanguagesByLanguageName );\n\n\t\t// This works around T74153\n\t\tlog.warn(\n\t\t\tmissingDir === 0 ? 'Direction is provided. Please remove handling in getStructuredLanguages' :\n\t\t\t\t'`dir` attribute was missing from languages. Is T74153 resolved?'\n\t\t);\n\n\t\treturn {\n\t\t\tsuggested: suggestedLanguages,\n\t\t\tall: allLanguages\n\t\t};\n\t},\n\n\t/**\n\t * Return a map of frequently used languages on the current device.\n\t * @memberof util\n\t * @instance\n\t * @return {Object}\n\t */\n\tgetFrequentlyUsedLanguages: function () {\n\t\tvar languageMap = mw.storage.get( 'langMap' );\n\n\t\treturn languageMap ? JSON.parse( languageMap ) : {};\n\t},\n\n\t/**\n\t * Save the frequently used languages to the user's device\n\t * @memberof util\n\t * @instance\n\t * @param {Object} languageMap\n\t */\n\tsaveFrequentlyUsedLanguages: function ( languageMap ) {\n\t\tmw.storage.set( 'langMap', JSON.stringify( languageMap ) );\n\t},\n\n\t/**\n\t * Increment the current language usage by one and save it to the device.\n\t * Cap the result at 100.\n\t * @memberof util\n\t * @instance\n\t * @param {string} languageCode\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t */\n\tsaveLanguageUsageCount: function ( languageCode, frequentlyUsedLanguages ) {\n\t\tvar count = frequentlyUsedLanguages[ languageCode ] || 0;\n\n\t\tcount += 1;\n\t\t// cap at 100 as this is enough data to work on\n\t\tfrequentlyUsedLanguages[ languageCode ] = count > 100 ? 100 : count;\n\t\tthis.saveFrequentlyUsedLanguages( frequentlyUsedLanguages );\n\t}\n};\n"],"sourceRoot":""}