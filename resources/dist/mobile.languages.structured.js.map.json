{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.languages.structured/util.js","webpack://mfModules.[name]/./src/mobile.languages.structured/LanguageOverlay.js","webpack://mfModules.[name]/./src/mobile.languages.structured/mobile.languages.structured.js"],"names":["util","log","mw","mfUtils","__webpack_require__","getDir","language","dir","indexOf","lang","extend","getStructuredLanguages","languages","variants","frequentlyUsedLanguages","deviceLanguage","hasOwn","Object","prototype","hasOwnProperty","maxFrequency","minFrequency","missingDir","suggestedLanguages","allLanguages","addLangDir","parentLanguage","index","deviceLanguagesWithVariants","slice","forEach","call","getDeviceLanguageOrParent","keys","frequency","map","push","variant","sort","a","b","autonym","toLocaleLowerCase","warn","suggested","all","getFrequentlyUsedLanguages","languageMap","storage","get","JSON","parse","saveFrequentlyUsedLanguages","set","stringify","saveLanguageUsageCount","languageCode","count","module","exports","Overlay","langUtil","LanguageOverlay","options","allLanguagesCount","length","suggestedLanguagesCount","this","className","mfExtend","defaults","heading","msg","inputPlaceholder","allLanguagesHeader","toLocaleUpperCase","suggestedLanguagesHeader","templatePartials","content","template","events","click a","input .search","postRender","apply","$siteLinksList","$","$languageItems","find","$subheaders","onLinkClick","ev","currentTarget","attr","self","$visibleLanguageLinks","filter","each","i","link","hasClass","onSearchInput","filterLanguages","target","val","toLowerCase","filteredList","langname","addClass","join","removeClass","mobileFrontend","define"],"mappings":"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","file":"mobile.languages.structured.js","sourcesContent":["/**\n * Utility function for the structured language overlay\n *\n * @class util\n * @singleton\n */\nvar util = {},\n\tlog = mw.log,\n\tmfUtils = require( '../mobile.startup/util' );\n\n/**\n * Return the device language if it's in the list of article languages.\n * If the language is a variant of a general language, and if the article\n * is not available in that language, then return the general language\n * if article is available in it. For example, if the device language is\n * 'en-gb', and the article is only available in 'en', then return 'en'.\n * @memberof util\n * @instance\n * @param {Object[]} languages list of language objects as returned by the API\n * @param {string|undefined} deviceLanguage the device's primary language\n * @return {string|undefined} Return undefined if the article is not available in\n *  the (general or variant) device language\n */\nfunction getDeviceLanguageOrParent( languages, deviceLanguage ) {\n\tvar parentLanguage, index,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tdeviceLanguagesWithVariants = {};\n\n\tif ( !deviceLanguage ) {\n\t\treturn;\n\t}\n\n\t// Are we dealing with a variant?\n\tindex = deviceLanguage.indexOf( '-' );\n\tif ( index !== -1 ) {\n\t\tparentLanguage = deviceLanguage.slice( 0, index );\n\t}\n\n\tlanguages.forEach( function ( language ) {\n\t\tif ( language.lang === parentLanguage || language.lang === deviceLanguage ) {\n\t\t\tdeviceLanguagesWithVariants[ language.lang ] = true;\n\t\t}\n\t} );\n\n\tif ( hasOwn.call( deviceLanguagesWithVariants, deviceLanguage ) ) {\n\t\t// the device language is one of the available languages\n\t\treturn deviceLanguage;\n\t} else if ( hasOwn.call( deviceLanguagesWithVariants, parentLanguage ) ) {\n\t\t// no device language, but the parent language is one of the available languages\n\t\treturn parentLanguage;\n\t}\n}\n\n/**\n * Determine whether a language is LTR or RTL\n * This works around T74153 and T189036\n * @memberof util\n * @instance\n * @param {Object} language with 'lang' key.\n * @return {Object} language with 'lang' key and new 'dir' key.\n */\nutil.getDir = function ( language ) {\n\tvar dir = [\n\t\t'aeb',\n\t\t'aeb-arab',\n\t\t'ar',\n\t\t'arc',\n\t\t'arq',\n\t\t'arz',\n\t\t'azb',\n\t\t'bcc',\n\t\t'bgn',\n\t\t'bqi',\n\t\t'ckb',\n\t\t'dv',\n\t\t'fa',\n\t\t'glk',\n\t\t'he',\n\t\t'khw',\n\t\t'kk-arab',\n\t\t'kk-cn',\n\t\t'ks',\n\t\t'ks-arab',\n\t\t'ku-arab',\n\t\t'lki',\n\t\t'lrc',\n\t\t'luz',\n\t\t'mzn',\n\t\t'pnb',\n\t\t'ps',\n\t\t'sd',\n\t\t'sdh',\n\t\t'skr',\n\t\t'skr-arab',\n\t\t'ug',\n\t\t'ug-arab',\n\t\t'ur',\n\t\t'yi'\n\t].indexOf( language.lang ) > -1 ? 'rtl' : 'ltr';\n\treturn mfUtils.extend( {}, language, { dir: dir } );\n};\n\n/**\n * Return two sets of languages: suggested and all (everything else)\n *\n * Suggested languages are the ones that the user has used before. This also\n * includes the user device's primary language. Suggested languages are ordered\n * by frequency in descending order. The device's language is always at the top.\n * This group also includes the variants.\n *\n * All languages are the languages that are not suggested.\n * Languages in this list are ordered in the lexicographical order of\n * their language names.\n * @memberof util\n * @instance\n * @param {Object[]} languages list of language objects as returned by the API\n * @param {Array|boolean} variants language variant objects or false if no variants exist\n * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n * @param {string} [deviceLanguage] the device's primary language\n * @return {Object[]}\n */\nutil.getStructuredLanguages = function (\n\tlanguages, variants, frequentlyUsedLanguages, deviceLanguage\n) {\n\tvar hasOwn = Object.prototype.hasOwnProperty,\n\t\tmaxFrequency = 0,\n\t\tminFrequency = 0,\n\t\tmissingDir = 0,\n\t\tsuggestedLanguages = [],\n\t\tallLanguages = [];\n\n\t// Is the article available in the user's device language?\n\tdeviceLanguage = getDeviceLanguageOrParent( languages, deviceLanguage );\n\tif ( deviceLanguage ) {\n\t\tObject.keys( frequentlyUsedLanguages ).forEach( function ( language ) {\n\t\t\tvar frequency = frequentlyUsedLanguages[ language ];\n\t\t\tmaxFrequency = maxFrequency < frequency ? frequency : maxFrequency;\n\t\t\tminFrequency = minFrequency > frequency ? frequency : minFrequency;\n\t\t} );\n\n\t\t// Make the device language the most frequently used one so that\n\t\t// it appears at the top of the list when sorted by frequency.\n\t\tfrequentlyUsedLanguages[ deviceLanguage ] = maxFrequency + 1;\n\t}\n\n\t/**\n\t * @param {Object} language\n\t * @return {Object} which has 'dir' key.\n\t */\n\tfunction addLangDir( language ) {\n\t\tif ( language.dir ) {\n\t\t\treturn language;\n\t\t} else {\n\t\t\tmissingDir++;\n\t\t\treturn util.getDir( language );\n\t\t}\n\t}\n\n\t// Separate languages into suggested and all languages.\n\tlanguages.map( addLangDir ).forEach( function ( language ) {\n\t\tif ( hasOwn.call( frequentlyUsedLanguages, language.lang ) ) {\n\t\t\tlanguage.frequency = frequentlyUsedLanguages[ language.lang ];\n\t\t\tsuggestedLanguages.push( language );\n\t\t} else {\n\t\t\tallLanguages.push( language );\n\t\t}\n\t} );\n\n\t// Add variants to the suggested languages list and assign the lowest\n\t// frequency because the variant hasn't been clicked on yet.\n\t// Note that the variants data doesn't contain the article title, thus\n\t// we cannot show it for the variants.\n\tif ( variants ) {\n\t\tvariants.map( addLangDir ).forEach( function ( variant ) {\n\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, variant.lang ) ) {\n\t\t\t\tvariant.frequency = frequentlyUsedLanguages[variant.lang];\n\t\t\t} else {\n\t\t\t\tvariant.frequency = minFrequency - 1;\n\t\t\t}\n\t\t\tsuggestedLanguages.push( variant );\n\t\t} );\n\t}\n\n\t// sort suggested languages in descending order by frequency\n\tsuggestedLanguages = suggestedLanguages.sort( function ( a, b ) {\n\t\treturn b.frequency - a.frequency;\n\t} );\n\n\t/**\n\t * Compare language names lexicographically\n\t *\n\t * @param {Object} a first language\n\t * @param {Object} b second language\n\t * @return {number} Comparison value, 1 or -1\n\t */\n\tfunction compareLanguagesByLanguageName( a, b ) {\n\t\treturn a.autonym.toLocaleLowerCase() < b.autonym.toLocaleLowerCase() ? -1 : 1;\n\t}\n\n\tallLanguages = allLanguages.sort( compareLanguagesByLanguageName );\n\n\t// This works around T74153\n\tlog.warn(\n\t\tmissingDir === 0 ? 'Direction is provided. Please remove handling in getStructuredLanguages' :\n\t\t\t'`dir` attribute was missing from languages. Is T74153 resolved?'\n\t);\n\n\treturn {\n\t\tsuggested: suggestedLanguages,\n\t\tall: allLanguages\n\t};\n};\n\n/**\n * Return a map of frequently used languages on the current device.\n * @memberof util\n * @instance\n * @return {Object}\n */\nutil.getFrequentlyUsedLanguages = function () {\n\tvar languageMap = mw.storage.get( 'langMap' );\n\n\treturn languageMap ? JSON.parse( languageMap ) : {};\n};\n\n/**\n * Save the frequently used languages to the user's device\n * @memberof util\n * @instance\n * @param {Object} languageMap\n */\nutil.saveFrequentlyUsedLanguages = function ( languageMap ) {\n\tmw.storage.set( 'langMap', JSON.stringify( languageMap ) );\n};\n\n/**\n * Increment the current language usage by one and save it to the device.\n * Cap the result at 100.\n * @memberof util\n * @instance\n * @param {string} languageCode\n * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n */\nutil.saveLanguageUsageCount = function ( languageCode, frequentlyUsedLanguages ) {\n\tvar count = frequentlyUsedLanguages[ languageCode ] || 0;\n\n\tcount += 1;\n\t// cap at 100 as this is enough data to work on\n\tfrequentlyUsedLanguages[ languageCode ] = count > 100 ? 100 : count;\n\tutil.saveFrequentlyUsedLanguages( frequentlyUsedLanguages );\n};\n\nmodule.exports = util;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tlangUtil = require( './util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' );\n\n/**\n * Overlay displaying a structured list of languages for a page\n *\n * @class LanguageOverlay\n * @extends Overlay\n *\n * @param {Object} options Configuration options\n * @param {Object[]} options.languages list of language objects as returned by the API\n * @param {Array|boolean} options.variants language variant objects\n *  or false if no variants exist\n * @param {string} [options.deviceLanguage] the device's primary language\n */\nfunction LanguageOverlay( options ) {\n\tvar languages;\n\n\tlanguages = langUtil.getStructuredLanguages(\n\t\toptions.languages,\n\t\toptions.variants,\n\t\tlangUtil.getFrequentlyUsedLanguages(),\n\t\toptions.deviceLanguage\n\t);\n\toptions.allLanguages = languages.all;\n\toptions.allLanguagesCount = languages.all.length;\n\toptions.suggestedLanguages = languages.suggested;\n\toptions.suggestedLanguagesCount = languages.suggested.length;\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'overlay language-overlay'\n\t\t} )\n\t);\n}\n\nmfExtend( LanguageOverlay, Overlay, {\n\t/**\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object[]} defaults.languages each object has keys as\n\t *  returned by the langlink API https://www.mediawiki.org/wiki/API:Langlinks\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-language-heading' ),\n\t\tinputPlaceholder: mw.msg( 'mobile-frontend-languages-structured-overlay-search-input-placeholder' ),\n\t\t// we can't rely on CSS only to uppercase the headings. See https://stackoverflow.com/questions/3777443/css-text-transform-not-working-properly-for-turkish-characters\n\t\tallLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-all-languages-header' ).toLocaleUpperCase(),\n\t\tsuggestedLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-suggested-languages-header' ).toLocaleUpperCase()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: mw.template.get( 'mobile.languages.structured', 'LanguageOverlay.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\tevents: util.extend( {}, Overlay.prototype.events, {\n\t\t'click a': 'onLinkClick',\n\t\t'input .search': 'onSearchInput'\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\t// cache\n\t\tthis.$siteLinksList = this.$( '.site-link-list' );\n\t\tthis.$languageItems = this.$siteLinksList.find( 'a' );\n\t\tthis.$subheaders = this.$( 'h3' );\n\t},\n\t/**\n\t * Article link click event handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonLinkClick: function ( ev ) {\n\t\tvar $link = this.$( ev.currentTarget ),\n\t\t\tlang = $link.attr( 'lang' ),\n\t\t\tself = this,\n\t\t\t$visibleLanguageLinks = this.$languageItems.filter( ':visible' );\n\n\t\tlangUtil.saveLanguageUsageCount( lang, langUtil.getFrequentlyUsedLanguages() );\n\n\t\t// find the index of the clicked language in the list of visible results\n\t\t$visibleLanguageLinks.each( function ( i, link ) {\n\t\t\tif ( self.$( link ).hasClass( lang ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Search input handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev Event object.\n\t */\n\tonSearchInput: function ( ev ) {\n\t\tthis.filterLanguages( this.$( ev.target ).val().toLowerCase() );\n\t},\n\t/**\n\t * Filter the language list to only show languages that match the current search term.\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {string} val of search term (lowercase).\n\t */\n\tfilterLanguages: function ( val ) {\n\t\tvar filteredList = [];\n\n\t\tif ( val ) {\n\t\t\tthis.options.languages.forEach( function ( language ) {\n\t\t\t\tvar langname = language.langname;\n\t\t\t\t// search by language code or language name\n\t\t\t\tif ( language.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\t( langname && langname.toLowerCase().indexOf( val ) > -1 ) ||\n\t\t\t\t\t\tlanguage.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t) {\n\t\t\t\t\tfilteredList.push( language.lang );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( this.options.variants ) {\n\t\t\t\tthis.options.variants.forEach( function ( variant ) {\n\t\t\t\t\t// search by variant code or variant name\n\t\t\t\t\tif ( variant.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\tvariant.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tfilteredList.push( variant.lang );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$languageItems.addClass( 'hidden' );\n\t\t\tif ( filteredList.length ) {\n\t\t\t\tthis.$siteLinksList.find( '.' + filteredList.join( ',.' ) ).removeClass( 'hidden' );\n\t\t\t}\n\t\t\tthis.$siteLinksList.addClass( 'filtered' );\n\t\t\tthis.$subheaders.addClass( 'hidden' );\n\t\t} else {\n\t\t\tthis.$languageItems.removeClass( 'hidden' );\n\t\t\tthis.$siteLinksList.removeClass( 'filtered' );\n\t\t\tthis.$subheaders.removeClass( 'hidden' );\n\t\t}\n\t}\n} );\n\nmodule.exports = LanguageOverlay;\n","var LanguageOverlay = require( './LanguageOverlay' );\n\nmw.mobileFrontend.define( 'mobile.languages.structured/LanguageOverlay', LanguageOverlay );\n\nmodule.exports = LanguageOverlay;\n"],"sourceRoot":""}