{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.languages.structured/util.js","webpack://mfModules.[name]/./src/mobile.languages.structured/LanguageOverlay.js","webpack://mfModules.[name]/./src/mobile.languages.structured/mobile.languages.structured.js"],"names":["log","mw","mfUtils","__webpack_require__","module","exports","getDir","language","dir","indexOf","lang","extend","getStructuredLanguages","languages","variants","frequentlyUsedLanguages","deviceLanguage","hasOwn","Object","prototype","hasOwnProperty","maxFrequency","minFrequency","missingDir","suggestedLanguages","allLanguages","self","this","addLangDir","parentLanguage","index","deviceLanguagesWithVariants","slice","forEach","call","getDeviceLanguageOrParent","keys","frequency","map","push","variant","sort","a","b","autonym","toLocaleLowerCase","warn","suggested","all","getFrequentlyUsedLanguages","languageMap","storage","get","JSON","parse","saveFrequentlyUsedLanguages","set","stringify","saveLanguageUsageCount","languageCode","count","Overlay","util","langUtil","LanguageOverlay","options","allLanguagesCount","length","suggestedLanguagesCount","className","mfExtend","defaults","heading","msg","inputPlaceholder","allLanguagesHeader","toLocaleUpperCase","suggestedLanguagesHeader","templatePartials","content","template","events","click a","input .search","postRender","apply","$siteLinksList","$","$languageItems","find","$subheaders","onLinkClick","ev","currentTarget","attr","$visibleLanguageLinks","filter","each","i","link","hasClass","onSearchInput","filterLanguages","target","val","toLowerCase","filteredList","langname","addClass","join","removeClass","mobileFrontend","define"],"mappings":"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","file":"mobile.languages.structured.js","sourcesContent":["var\n\tlog = mw.log,\n\tmfUtils = require( '../mobile.startup/util' );\n\n/**\n * Return the device language if it's in the list of article languages.\n * If the language is a variant of a general language, and if the article\n * is not available in that language, then return the general language\n * if article is available in it. For example, if the device language is\n * 'en-gb', and the article is only available in 'en', then return 'en'.\n * @param {Object[]} languages list of language objects as returned by the API\n * @param {string|undefined} deviceLanguage the device's primary language\n * @return {string|undefined} Return undefined if the article is not available in\n *  the (general or variant) device language\n */\nfunction getDeviceLanguageOrParent( languages, deviceLanguage ) {\n\tvar parentLanguage, index,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tdeviceLanguagesWithVariants = {};\n\n\tif ( !deviceLanguage ) {\n\t\treturn;\n\t}\n\n\t// Are we dealing with a variant?\n\tindex = deviceLanguage.indexOf( '-' );\n\tif ( index !== -1 ) {\n\t\tparentLanguage = deviceLanguage.slice( 0, index );\n\t}\n\n\tlanguages.forEach( function ( language ) {\n\t\tif ( language.lang === parentLanguage || language.lang === deviceLanguage ) {\n\t\t\tdeviceLanguagesWithVariants[ language.lang ] = true;\n\t\t}\n\t} );\n\n\tif ( hasOwn.call( deviceLanguagesWithVariants, deviceLanguage ) ) {\n\t\t// the device language is one of the available languages\n\t\treturn deviceLanguage;\n\t} else if ( hasOwn.call( deviceLanguagesWithVariants, parentLanguage ) ) {\n\t\t// no device language, but the parent language is one of the available languages\n\t\treturn parentLanguage;\n\t}\n}\n\n/**\n * Utility function for the structured language overlay\n *\n * @class util\n * @singleton\n */\nmodule.exports = {\n\t/**\n\t * Determine whether a language is LTR or RTL\n\t * This works around T74153 and T189036\n\t * @memberof util\n\t * @instance\n\t * @param {Object} language with 'lang' key.\n\t * @return {Object} language with 'lang' key and new 'dir' key.\n\t */\n\tgetDir: function ( language ) {\n\t\tvar dir = [\n\t\t\t'aeb',\n\t\t\t'aeb-arab',\n\t\t\t'ar',\n\t\t\t'arc',\n\t\t\t'arq',\n\t\t\t'arz',\n\t\t\t'azb',\n\t\t\t'bcc',\n\t\t\t'bgn',\n\t\t\t'bqi',\n\t\t\t'ckb',\n\t\t\t'dv',\n\t\t\t'fa',\n\t\t\t'glk',\n\t\t\t'he',\n\t\t\t'khw',\n\t\t\t'kk-arab',\n\t\t\t'kk-cn',\n\t\t\t'ks',\n\t\t\t'ks-arab',\n\t\t\t'ku-arab',\n\t\t\t'lki',\n\t\t\t'lrc',\n\t\t\t'luz',\n\t\t\t'mzn',\n\t\t\t'pnb',\n\t\t\t'ps',\n\t\t\t'sd',\n\t\t\t'sdh',\n\t\t\t'skr',\n\t\t\t'skr-arab',\n\t\t\t'ug',\n\t\t\t'ug-arab',\n\t\t\t'ur',\n\t\t\t'yi'\n\t\t].indexOf( language.lang ) > -1 ? 'rtl' : 'ltr';\n\t\treturn mfUtils.extend( {}, language, { dir: dir } );\n\t},\n\n\t/**\n\t * Return two sets of languages: suggested and all (everything else)\n\t *\n\t * Suggested languages are the ones that the user has used before. This also\n\t * includes the user device's primary language. Suggested languages are ordered\n\t * by frequency in descending order. The device's language is always at the top.\n\t * This group also includes the variants.\n\t *\n\t * All languages are the languages that are not suggested.\n\t * Languages in this list are ordered in the lexicographical order of\n\t * their language names.\n\t * @memberof util\n\t * @instance\n\t * @param {Object[]} languages list of language objects as returned by the API\n\t * @param {Array|boolean} variants language variant objects or false if no variants exist\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t * @param {string} [deviceLanguage] the device's primary language\n\t * @return {Object[]}\n\t */\n\tgetStructuredLanguages: function (\n\t\tlanguages, variants, frequentlyUsedLanguages, deviceLanguage\n\t) {\n\t\tvar hasOwn = Object.prototype.hasOwnProperty,\n\t\t\tmaxFrequency = 0,\n\t\t\tminFrequency = 0,\n\t\t\tmissingDir = 0,\n\t\t\tsuggestedLanguages = [],\n\t\t\tallLanguages = [],\n\t\t\tself = this;\n\n\t\t// Is the article available in the user's device language?\n\t\tdeviceLanguage = getDeviceLanguageOrParent( languages, deviceLanguage );\n\t\tif ( deviceLanguage ) {\n\t\t\tObject.keys( frequentlyUsedLanguages ).forEach( function ( language ) {\n\t\t\t\tvar frequency = frequentlyUsedLanguages[ language ];\n\t\t\t\tmaxFrequency = maxFrequency < frequency ? frequency : maxFrequency;\n\t\t\t\tminFrequency = minFrequency > frequency ? frequency : minFrequency;\n\t\t\t} );\n\n\t\t\t// Make the device language the most frequently used one so that\n\t\t\t// it appears at the top of the list when sorted by frequency.\n\t\t\tfrequentlyUsedLanguages[ deviceLanguage ] = maxFrequency + 1;\n\t\t}\n\n\t\t/**\n\t\t * @param {Object} language\n\t\t * @return {Object} which has 'dir' key.\n\t\t */\n\t\tfunction addLangDir( language ) {\n\t\t\tif ( language.dir ) {\n\t\t\t\treturn language;\n\t\t\t} else {\n\t\t\t\tmissingDir++;\n\t\t\t\treturn self.getDir( language );\n\t\t\t}\n\t\t}\n\n\t\t// Separate languages into suggested and all languages.\n\t\tlanguages.map( addLangDir ).forEach( function ( language ) {\n\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, language.lang ) ) {\n\t\t\t\tlanguage.frequency = frequentlyUsedLanguages[ language.lang ];\n\t\t\t\tsuggestedLanguages.push( language );\n\t\t\t} else {\n\t\t\t\tallLanguages.push( language );\n\t\t\t}\n\t\t} );\n\n\t\t// Add variants to the suggested languages list and assign the lowest\n\t\t// frequency because the variant hasn't been clicked on yet.\n\t\t// Note that the variants data doesn't contain the article title, thus\n\t\t// we cannot show it for the variants.\n\t\tif ( variants ) {\n\t\t\tvariants.map( addLangDir ).forEach( function ( variant ) {\n\t\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, variant.lang ) ) {\n\t\t\t\t\tvariant.frequency = frequentlyUsedLanguages[variant.lang];\n\t\t\t\t} else {\n\t\t\t\t\tvariant.frequency = minFrequency - 1;\n\t\t\t\t}\n\t\t\t\tsuggestedLanguages.push( variant );\n\t\t\t} );\n\t\t}\n\n\t\t// sort suggested languages in descending order by frequency\n\t\tsuggestedLanguages = suggestedLanguages.sort( function ( a, b ) {\n\t\t\treturn b.frequency - a.frequency;\n\t\t} );\n\n\t\t/**\n\t\t * Compare language names lexicographically\n\t\t *\n\t\t * @param {Object} a first language\n\t\t * @param {Object} b second language\n\t\t * @return {number} Comparison value, 1 or -1\n\t\t */\n\t\tfunction compareLanguagesByLanguageName( a, b ) {\n\t\t\treturn a.autonym.toLocaleLowerCase() < b.autonym.toLocaleLowerCase() ? -1 : 1;\n\t\t}\n\n\t\tallLanguages = allLanguages.sort( compareLanguagesByLanguageName );\n\n\t\t// This works around T74153\n\t\tlog.warn(\n\t\t\tmissingDir === 0 ? 'Direction is provided. Please remove handling in getStructuredLanguages' :\n\t\t\t\t'`dir` attribute was missing from languages. Is T74153 resolved?'\n\t\t);\n\n\t\treturn {\n\t\t\tsuggested: suggestedLanguages,\n\t\t\tall: allLanguages\n\t\t};\n\t},\n\n\t/**\n\t * Return a map of frequently used languages on the current device.\n\t * @memberof util\n\t * @instance\n\t * @return {Object}\n\t */\n\tgetFrequentlyUsedLanguages: function () {\n\t\tvar languageMap = mw.storage.get( 'langMap' );\n\n\t\treturn languageMap ? JSON.parse( languageMap ) : {};\n\t},\n\n\t/**\n\t * Save the frequently used languages to the user's device\n\t * @memberof util\n\t * @instance\n\t * @param {Object} languageMap\n\t */\n\tsaveFrequentlyUsedLanguages: function ( languageMap ) {\n\t\tmw.storage.set( 'langMap', JSON.stringify( languageMap ) );\n\t},\n\n\t/**\n\t * Increment the current language usage by one and save it to the device.\n\t * Cap the result at 100.\n\t * @memberof util\n\t * @instance\n\t * @param {string} languageCode\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t */\n\tsaveLanguageUsageCount: function ( languageCode, frequentlyUsedLanguages ) {\n\t\tvar count = frequentlyUsedLanguages[ languageCode ] || 0;\n\n\t\tcount += 1;\n\t\t// cap at 100 as this is enough data to work on\n\t\tfrequentlyUsedLanguages[ languageCode ] = count > 100 ? 100 : count;\n\t\tthis.saveFrequentlyUsedLanguages( frequentlyUsedLanguages );\n\t}\n};\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tlangUtil = require( './util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' );\n\n/**\n * Overlay displaying a structured list of languages for a page\n *\n * @class LanguageOverlay\n * @extends Overlay\n *\n * @param {Object} options Configuration options\n * @param {Object[]} options.languages list of language objects as returned by the API\n * @param {Array|boolean} options.variants language variant objects\n *  or false if no variants exist\n * @param {string} [options.deviceLanguage] the device's primary language\n */\nfunction LanguageOverlay( options ) {\n\tvar languages;\n\n\tlanguages = langUtil.getStructuredLanguages(\n\t\toptions.languages,\n\t\toptions.variants,\n\t\tlangUtil.getFrequentlyUsedLanguages(),\n\t\toptions.deviceLanguage\n\t);\n\toptions.allLanguages = languages.all;\n\toptions.allLanguagesCount = languages.all.length;\n\toptions.suggestedLanguages = languages.suggested;\n\toptions.suggestedLanguagesCount = languages.suggested.length;\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'overlay language-overlay'\n\t\t} )\n\t);\n}\n\nmfExtend( LanguageOverlay, Overlay, {\n\t/**\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object[]} defaults.languages each object has keys as\n\t *  returned by the langlink API https://www.mediawiki.org/wiki/API:Langlinks\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theading: mw.msg( 'mobile-frontend-language-heading' ),\n\t\tinputPlaceholder: mw.msg( 'mobile-frontend-languages-structured-overlay-search-input-placeholder' ),\n\t\t// we can't rely on CSS only to uppercase the headings. See https://stackoverflow.com/questions/3777443/css-text-transform-not-working-properly-for-turkish-characters\n\t\tallLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-all-languages-header' ).toLocaleUpperCase(),\n\t\tsuggestedLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-suggested-languages-header' ).toLocaleUpperCase()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: mw.template.get( 'mobile.languages.structured', 'LanguageOverlay.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\tevents: util.extend( {}, Overlay.prototype.events, {\n\t\t'click a': 'onLinkClick',\n\t\t'input .search': 'onSearchInput'\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\t// cache\n\t\tthis.$siteLinksList = this.$( '.site-link-list' );\n\t\tthis.$languageItems = this.$siteLinksList.find( 'a' );\n\t\tthis.$subheaders = this.$( 'h3' );\n\t},\n\t/**\n\t * Article link click event handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonLinkClick: function ( ev ) {\n\t\tvar $link = this.$( ev.currentTarget ),\n\t\t\tlang = $link.attr( 'lang' ),\n\t\t\tself = this,\n\t\t\t$visibleLanguageLinks = this.$languageItems.filter( ':visible' );\n\n\t\tlangUtil.saveLanguageUsageCount( lang, langUtil.getFrequentlyUsedLanguages() );\n\n\t\t// find the index of the clicked language in the list of visible results\n\t\t$visibleLanguageLinks.each( function ( i, link ) {\n\t\t\tif ( self.$( link ).hasClass( lang ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Search input handler\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev Event object.\n\t */\n\tonSearchInput: function ( ev ) {\n\t\tthis.filterLanguages( this.$( ev.target ).val().toLowerCase() );\n\t},\n\t/**\n\t * Filter the language list to only show languages that match the current search term.\n\t * @memberof LanguageOverlay\n\t * @instance\n\t * @param {string} val of search term (lowercase).\n\t */\n\tfilterLanguages: function ( val ) {\n\t\tvar filteredList = [];\n\n\t\tif ( val ) {\n\t\t\tthis.options.languages.forEach( function ( language ) {\n\t\t\t\tvar langname = language.langname;\n\t\t\t\t// search by language code or language name\n\t\t\t\tif ( language.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\t( langname && langname.toLowerCase().indexOf( val ) > -1 ) ||\n\t\t\t\t\t\tlanguage.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t) {\n\t\t\t\t\tfilteredList.push( language.lang );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( this.options.variants ) {\n\t\t\t\tthis.options.variants.forEach( function ( variant ) {\n\t\t\t\t\t// search by variant code or variant name\n\t\t\t\t\tif ( variant.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\tvariant.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tfilteredList.push( variant.lang );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$languageItems.addClass( 'hidden' );\n\t\t\tif ( filteredList.length ) {\n\t\t\t\tthis.$siteLinksList.find( '.' + filteredList.join( ',.' ) ).removeClass( 'hidden' );\n\t\t\t}\n\t\t\tthis.$siteLinksList.addClass( 'filtered' );\n\t\t\tthis.$subheaders.addClass( 'hidden' );\n\t\t} else {\n\t\t\tthis.$languageItems.removeClass( 'hidden' );\n\t\t\tthis.$siteLinksList.removeClass( 'filtered' );\n\t\t\tthis.$subheaders.removeClass( 'hidden' );\n\t\t}\n\t}\n} );\n\nmodule.exports = LanguageOverlay;\n","var LanguageOverlay = require( './LanguageOverlay' );\n\nmw.mobileFrontend.define( 'mobile.languages.structured/LanguageOverlay', LanguageOverlay );\n\nmodule.exports = LanguageOverlay;\n"],"sourceRoot":""}