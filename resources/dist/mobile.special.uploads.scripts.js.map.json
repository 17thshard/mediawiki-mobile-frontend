{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.special.uploads.scripts/PhotoItem.js","webpack://mfModules.[name]/./src/mobile.special.uploads.scripts/PhotoList.js","webpack://mfModules.[name]/./src/mobile.special.uploads.scripts/PhotoListGateway.js","webpack://mfModules.[name]/./src/mobile.special.uploads.scripts/mobile.special.uploads.scripts.js"],"names":["View","__webpack_require__","PhotoItem","apply","this","arguments","mfExtend","template","mw","get","tagName","module","exports","icons","PhotoListGateway","ScrollEndEventEmitter","PhotoList","options","gatewayOptions","url","api","username","category","gateway","scrollEndEventEmitter","eventBus","on","EVENT_SCROLL_END","_loadPhotos","bind","call","defaults","spinner","toHtmlString","preRender","setElement","$el","disable","postRender","$end","$","$list","isEmpty","find","length","showEmptyMessage","parseHTML","text","msg","insertBefore","hideEmptyMessage","hide","showSpinner","show","hideSpinner","updateEmptyUI","appendPhotos","photosData","self","forEach","photo","appendTo","enableScroll","enabled","enable","getPhotos","then","response","photos","canContinue","catch","util","limit","continueParams","continue","getDescription","title","replace","prototype","getWidth","config","small","_getImageDataFromPage","page","img","imageinfo","thumburl","timestamp","description","descriptionUrl","descriptionurl","getQuery","query","extend","action","prop","iiprop","iiurlwidth","generator","gaiuser","gaisort","gaidir","gailimit","gcmtitle","gcmtype","gcmdir","gcmlimit","origin","ajax","resp","pages","Object","keys","map","id","sort","a","b","undefined","test","user","pageParams","split","currentUserName","getName","corsUrl","userName","init","Api"],"mappings":"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","file":"mobile.special.uploads.scripts.js","sourcesContent":["var View = require( '../mobile.startup/View' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' );\n\n/**\n * Single photo item in gallery\n * @class PhotoItem\n * @extends View\n */\nfunction PhotoItem() {\n\tView.apply( this, arguments );\n}\n\nmfExtend( PhotoItem, View, {\n\t/**\n\t * @memberof PhotoItem\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.special.uploads.scripts', 'PhotoItem.hogan' ),\n\t/**\n\t * @memberof PhotoItem\n\t * @instance\n\t */\n\ttagName: 'li'\n} );\nmodule.exports = PhotoItem;\n","var icons = require( '../mobile.startup/icons' ),\n\tPhotoListGateway = require( './PhotoListGateway' ),\n\tPhotoItem = require( './PhotoItem' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tScrollEndEventEmitter = require( '../mobile.startup/ScrollEndEventEmitter' ),\n\tView = require( '../mobile.startup/View' );\n\n/**\n * Creates a list of photo items\n * @class PhotoList\n * @uses PhotoListApi\n * @uses PhotoItem\n * @uses ScrollEndEventEmitter\n * @extends View\n *\n * @param {Object} options Configuration options\n * @param {OO.EventEmitter} options.eventBus Object used to listen for scroll:throttled events\n * @param {string} options.url for overriding default URI for API queries\n */\nfunction PhotoList( options ) {\n\tvar gatewayOptions = {\n\t\turl: options.url,\n\t\tapi: options.api\n\t};\n\n\tif ( options.username ) {\n\t\tgatewayOptions.username = options.username;\n\t} else if ( options.category ) {\n\t\tgatewayOptions.category = options.category;\n\t}\n\tthis.gateway = new PhotoListGateway( gatewayOptions );\n\t// Set up infinite scroll\n\tthis.scrollEndEventEmitter = new ScrollEndEventEmitter( options.eventBus, 1000 );\n\tthis.scrollEndEventEmitter.on( ScrollEndEventEmitter.EVENT_SCROLL_END,\n\t\tthis._loadPhotos.bind( this ) );\n\tView.call( this, options );\n}\n\nmfExtend( PhotoList, View, {\n\t/**\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.special.uploads.scripts', 'PhotoList.hogan' ),\n\t/**\n\t * @memberof PhotoList\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.spinner HTML of the spinner icon.\n\t * @property {mw.Api} defaults.api instance of an api\n\t */\n\tdefaults: {\n\t\tspinner: icons.spinner().toHtmlString()\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\t// Disable until we've got the list rendered\n\t\tthis.scrollEndEventEmitter.setElement( this.$el );\n\t\tthis.scrollEndEventEmitter.disable();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$end = this.$( '.end' );\n\t\tthis.$list = this.$( 'ul' );\n\n\t\tthis._loadPhotos();\n\t},\n\t/**\n\t * Check to see if the current view is an empty list.\n\t * @memberof PhotoList\n\t * @instance\n\t * @return {boolean} whether no images have been rendered\n\t */\n\tisEmpty: function () {\n\t\treturn this.$list.find( 'li' ).length === 0;\n\t},\n\t/**\n\t * Renders an empty message prior to the list.\n\t * FIXME: Should be handled in template, not a method.\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tshowEmptyMessage: function () {\n\t\tthis.parseHTML( '<p class=\"content empty\">' ).text( mw.msg( 'mobile-frontend-donate-image-nouploads' ) )\n\t\t\t.insertBefore( this.$list );\n\t},\n\t/**\n\t * Hides the message saying the list is empty\n\t * FIXME: Should be handled in template, not a method.\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\thideEmptyMessage: function () {\n\t\tthis.$( '.empty' ).hide();\n\t},\n\t/**\n\t * Shows loading spinner\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tshowSpinner: function () {\n\t\tthis.$end.show();\n\t},\n\t/**\n\t * Hides loading spinner\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\thideSpinner: function () {\n\t\tthis.$end.hide();\n\t},\n\t/**\n\t * Shows/hides empty state if PhotoList is empty.\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tupdateEmptyUI: function () {\n\t\tif ( this.isEmpty() ) {\n\t\t\tthis.showEmptyMessage();\n\t\t} else {\n\t\t\tthis.hideEmptyMessage();\n\t\t}\n\t},\n\t/**\n\t * Append an array of photos to the view.\n\t * @memberof PhotoList\n\t * @instance\n\t * @param {Array} photosData Array of objects describing a new {PhotoItem}\n\t */\n\tappendPhotos: function ( photosData ) {\n\t\tvar self = this;\n\t\tphotosData.forEach( function ( photo ) {\n\t\t\tnew PhotoItem( photo ).appendTo( self.$list );\n\t\t} );\n\t},\n\t/**\n\t * Enables infinite scroll if it's disabled\n\t * @memberof PhotoList\n\t * @instance\n\t */\n\tenableScroll: function () {\n\t\tif ( this.scrollEndEventEmitter.enabled === false ) {\n\t\t\tthis.scrollEndEventEmitter.enable();\n\t\t}\n\t},\n\t/**\n\t * Load photos into the view using {{PhotoListApi}} when the end is near\n\t * and no current API requests are underway.\n\t * @memberof PhotoList\n\t * @instance\n\t * @private\n\t */\n\t_loadPhotos: function () {\n\t\tvar self = this;\n\n\t\tself.showSpinner();\n\n\t\tthis.gateway.getPhotos().then( function ( response ) {\n\t\t\tvar photos = response.photos || [],\n\t\t\t\tcanContinue = response.canContinue;\n\n\t\t\tself.appendPhotos( photos );\n\t\t\tself.updateEmptyUI();\n\t\t\tif ( canContinue ) {\n\t\t\t\tself.enableScroll();\n\t\t\t}\n\n\t\t\tself.hideSpinner();\n\t\t} ).catch( function () {\n\t\t\tself.updateEmptyUI();\n\t\t\tself.hideSpinner();\n\n\t\t\t// try loading again if request failed\n\t\t\tself.enableScroll();\n\t\t} );\n\t}\n} );\n\nmodule.exports = PhotoList;\n","var util = require( '../mobile.startup/util' );\n\n/**\n * API for retrieving gallery photos\n * @class PhotoListGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api\n * @param {string} options.url for overriding default URI for API queries\n */\nfunction PhotoListGateway( options ) {\n\tthis.api = options.api;\n\tthis.url = options.url;\n\tthis.username = options.username;\n\tthis.category = options.category;\n\tthis.limit = 10;\n\tthis.continueParams = {\n\t\tcontinue: ''\n\t};\n\tthis.canContinue = true;\n}\n\n/**\n * Returns a description based on the file name using\n * a regular expression that strips the file type suffix,\n * namespace prefix and any\n * date suffix in format YYYY-MM-DD HH-MM\n * @memberof PhotoListGateway\n * @instance\n * @private\n * @param {string} title Title of file\n * @return {string} Description for file\n */\nfunction getDescription( title ) {\n\ttitle = title.replace( /\\.[^. ]+$/, '' ); // replace filename suffix\n\t// strip namespace: prefix and date suffix from remainder\n\treturn title.replace( /^[^:]*:/, '' )\n\t\t.replace( / \\d{4}-\\d{1,2}-\\d{1,2} \\d{1,2}-\\d{1,2}$/, '' );\n}\n\nPhotoListGateway.prototype = {\n\t/**\n\t * Returns the value in pixels of a medium thumbnail\n\t * @memberof PhotoListGateway\n\t * @instance\n\t * @return {number}\n\t */\n\tgetWidth: function () {\n\t\treturn mw.config.get( 'wgMFThumbnailSizes' ).small;\n\t},\n\t/**\n\t * Extracts image data from api response\n\t * @memberof PhotoListGateway\n\t * @instance\n\t * @private\n\t * @param {Object} page as returned by api request\n\t * @return {Object} describing image.\n\t */\n\t_getImageDataFromPage: function ( page ) {\n\t\tvar img = page.imageinfo[0];\n\t\treturn {\n\t\t\turl: img.thumburl,\n\t\t\ttitle: page.title,\n\t\t\ttimestamp: img.timestamp,\n\t\t\tdescription: getDescription( page.title ),\n\t\t\tdescriptionUrl: img.descriptionurl\n\t\t};\n\t},\n\t/**\n\t * Get the associated query needed to retrieve images from API based\n\t * on currently configured options.\n\t * @memberof PhotoListGateway\n\t * @instance\n\t * @return {Object}\n\t */\n\tgetQuery: function () {\n\t\tvar query = util.extend( {\n\t\t\taction: 'query',\n\t\t\tprop: 'imageinfo',\n\t\t\t// FIXME: [API] have to request timestamp since api returns an object\n\t\t\t// rather than an array thus we need a way to sort\n\t\t\tiiprop: 'url|timestamp',\n\t\t\tiiurlwidth: this.getWidth()\n\t\t}, this.continueParams );\n\n\t\tif ( this.username ) {\n\t\t\tutil.extend( query, {\n\t\t\t\tgenerator: 'allimages',\n\t\t\t\tgaiuser: this.username,\n\t\t\t\tgaisort: 'timestamp',\n\t\t\t\tgaidir: 'descending',\n\t\t\t\tgailimit: this.limit\n\t\t\t} );\n\t\t} else if ( this.category ) {\n\t\t\tutil.extend( query, {\n\t\t\t\tgenerator: 'categorymembers',\n\t\t\t\tgcmtitle: 'Category:' + this.category,\n\t\t\t\tgcmtype: 'file',\n\t\t\t\t// FIXME [API] a lot of duplication follows due to the silly way generators work\n\t\t\t\tgcmdir: 'descending',\n\t\t\t\tgcmlimit: this.limit\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.url ) {\n\t\t\t// A foreign api is being accessed! Enable anonymous CORS queries!\n\t\t\tquery.origin = '*';\n\t\t}\n\t\treturn query;\n\t},\n\t/**\n\t * Request photos beginning with the current value of endTimestamp\n\t * @memberof PhotoListGateway\n\t * @instance\n\t * @return {jQuery.Deferred} where parameter is a list of JavaScript\n\t *  objects describing an image.\n\t */\n\tgetPhotos: function () {\n\t\tvar self = this;\n\n\t\treturn this.api.ajax( this.getQuery(), { url: this.url } ).then( function ( resp ) {\n\t\t\tvar photos = [];\n\t\t\tif ( resp.query && resp.query.pages ) {\n\t\t\t\t// FIXME: [API] in an ideal world imageData would be a sorted array\n\t\t\t\t// but it is a map of {[id]: page}\n\t\t\t\tphotos = Object.keys( resp.query.pages ).map( function ( id ) {\n\t\t\t\t\treturn self._getImageDataFromPage( resp.query.pages[id] );\n\t\t\t\t} ).sort( function ( a, b ) {\n\t\t\t\t\treturn a.timestamp < b.timestamp ? 1 : -1;\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tif ( resp.continue !== undefined ) {\n\t\t\t\tself.continueParams = resp.continue;\n\t\t\t} else {\n\t\t\t\tself.canContinue = false;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcanContinue: self.canContinue,\n\t\t\t\t// FIXME: Should reply with a list of PhotoItem or Photo classes.\n\t\t\t\tphotos: photos\n\t\t\t};\n\t\t} );\n\t}\n};\n\nPhotoListGateway.test = {\n\tgetDescription: getDescription\n};\n\nmodule.exports = PhotoListGateway;\n","/* global $ */\nvar\n\tuser = mw.user,\n\tPhotoList = require( './PhotoList' ),\n\teventBus = require( '../mobile.startup/eventBusSingleton' ),\n\tpageParams = mw.config.get( 'wgPageName' ).split( '/' ),\n\tcurrentUserName = user.getName(),\n\tcorsUrl = mw.config.get( 'wgMFPhotoUploadEndpoint' ) || undefined,\n\tuserName = pageParams[1] ? pageParams[1] : currentUserName;\n\n/**\n * Initialise a photo upload button at the top of the page.\n * @param {mw.Api} api\n */\nfunction init( api ) {\n\t// check there are no errors on the page before attempting\n\t// we might have an invalid username\n\tif ( $( '.errorbox' ).length === 0 ) {\n\t\tnew PhotoList( {\n\t\t\turl: corsUrl,\n\t\t\tapi: api,\n\t\t\tusername: userName,\n\t\t\teventBus: eventBus\n\t\t} ).appendTo( '#mw-content-text .content' );\n\t}\n}\n\n// Assume we are on the special page.\nif ( userName ) {\n\t$( function () {\n\t\tinit( new mw.Api() );\n\t} );\n}\n"],"sourceRoot":""}