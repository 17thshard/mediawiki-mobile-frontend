{"version":3,"sources":["webpack://mobileFrontend.[name]/./src/mobile.startup/mobile.startup.js","webpack://mobileFrontend.[name]/./src/mobile.startup/modules.js"],"names":["__webpack_require__","module","exports","mw","mobileFrontend","ModuleLoader","this","_register","OO","EventEmitter","call","prototype","require","id","args","registry","localRequire","hasOwnProperty","Error","split","loader","e","define","obj","self","deprecate","deprecatedId","replacement","msg","log","mixinClass","on"],"mappings":"2JAAAA,EAAA,GAKAC,EAAAC,QAAAC,GAAAC,+BCLA,WAUA,SAAAC,IAKAC,KAAAC,aACAC,GAAAC,aAAAC,KAAAJ,MAGAD,EAAAM,WAUAC,QAAA,SAAAC,GACA,IAAAZ,EAAAa,EACAC,EAAAT,KAAAC,UAKA,SAAAS,IACA,IAAAD,EAAAE,eAAAJ,GACA,UAAAK,MAAA,oCAAAL,GAEA,OAAAE,EAAAF,GAEAC,EAAAD,EAAAM,MAAA,KACA,IAEA,OADAlB,EAAAE,GAAAiB,OAAAR,QAAAE,EAAA,KACAA,EAAA,IACAb,EAAAa,EAAA,IAEAE,IAEI,MAAAK,GACJ,OAAAL,MAYAM,OAAA,SAAAT,EAAAU,GACA,IAAAC,EAAAlB,KAEA,GAAAA,KAAAC,UAAAU,eAAAJ,GACA,UAAAK,MAAA,0BAAAL,GAIA,OAFAP,KAAAC,UAAAM,GAAAU,GAQAE,UAAA,SAAAC,GACAF,EAAAC,UAAAC,EAAAH,EAAAV,MAcAY,UAAA,SAAAZ,EAAAU,EAAAI,GACA,IAAAC,EACAD,IAEAC,EAAA,OAAAD,EAAA,aAGAxB,GAAA0B,IAAAJ,UAAAnB,KAAAC,UAAAM,EAAAU,EAAAK,KAGApB,GAAAsB,WAAAzB,EAAAG,GAAAC,cASAN,GAAAC,eAAA,IAAAC,EACAF,GAAA0B,IAAAJ,UAAAtB,GAAAC,eAAA,KAAAD,GAAAC,eAAA2B,GACA,yDAGA5B,GAAAC,eAAAC,eApHA","file":"mobile.startup.js","sourcesContent":["require( './modules' );\n\n// Expose the entry chunk through libraryTarget and library. This allows public access via\n// ResourceLoader's module system e.g. `mw.mobileFrontend.require('mobile.startup/LoadingOverlay')`.\n// todo: don't set mw.mobileFrontend in modules.js. Make a new instance to export here instead.\nmodule.exports = mw.mobileFrontend;\n","( function () {\n\t/**\n\t * Class for managing modules\n\t *\n\t * A module in this context is essentially a Javascript class (not to be confused with\n\t * ResourceLoader modules).\n\t *\n\t * @class ModuleLoader\n\t * @extends OO.EventEmitter\n\t */\n\tfunction ModuleLoader() {\n\t\t/**\n\t\t * @property {Object} register of defined modules\n\t\t * @private\n\t\t */\n\t\tthis._register = {};\n\t\tOO.EventEmitter.call( this );\n\t}\n\n\tModuleLoader.prototype = {\n\t\t/**\n\t\t * Require (import) a module previously defined using define().\n\t\t * Searches core module registry using mw.loader.require before consulting\n\t\t * its own local registry. This method is deprecated, please do not use.\n\t\t * @memberof ModuleLoader\n\t\t * @instance\n\t\t * @param {string} id Required module id.\n\t\t * @return {Object} Required module, can be any JavaScript object.\n\t\t */\n\t\trequire: function ( id ) {\n\t\t\tvar module, args,\n\t\t\t\tregistry = this._register;\n\n\t\t\t/**\n\t\t\t * @return {Object} Module\n\t\t\t */\n\t\t\tfunction localRequire() {\n\t\t\t\tif ( !registry.hasOwnProperty( id ) ) {\n\t\t\t\t\tthrow new Error( 'MobileFrontend Module not found: ' + id );\n\t\t\t\t}\n\t\t\t\treturn registry[ id ];\n\t\t\t}\n\t\t\targs = id.split( '/' );\n\t\t\ttry {\n\t\t\t\tmodule = mw.loader.require( args[0] );\n\t\t\t\tif ( module[ args[1] ] ) {\n\t\t\t\t\treturn module[ args[1] ];\n\t\t\t\t} else {\n\t\t\t\t\treturn localRequire();\n\t\t\t\t}\n\t\t\t} catch ( e ) {\n\t\t\t\treturn localRequire();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Define a module which can be later required (imported) using require().\n\t\t * @memberof ModuleLoader\n\t\t * @instance\n\t\t * @param {string} id Defined module id.\n\t\t * @param {Object} obj Defined module body, can be any JavaScript object.\n\t\t * @return {Object}\n\t\t */\n\t\tdefine: function ( id, obj ) {\n\t\t\tvar self = this;\n\n\t\t\tif ( this._register.hasOwnProperty( id ) ) {\n\t\t\t\tthrow new Error( 'Module already exists: ' + id );\n\t\t\t}\n\t\t\tthis._register[ id ] = obj;\n\t\t\t// return an object of additionally functions to do with the registered module\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * @see ModuleLoader#deprecate\n\t\t\t\t * @param {string} deprecatedId Defined module id, which is deprecated.\n\t\t\t\t * @ignore\n\t\t\t\t */\n\t\t\t\tdeprecate: function ( deprecatedId ) {\n\t\t\t\t\tself.deprecate( deprecatedId, obj, id );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Deprecate a module and give an replacement (if there is any).\n\t\t * @memberof ModuleLoader\n\t\t * @instance\n\t\t * @param {string} id Defined module id, which is deprecated.\n\t\t * @param {Object} obj Defined module body, can be any JavaScript object.\n\t\t * @param {string} [replacement] Give an optional replacement for this module (which\n\t\t * needs to be already defined!)\n\t\t */\n\t\tdeprecate: function ( id, obj, replacement ) {\n\t\t\tvar msg;\n\t\t\tif ( replacement ) {\n\t\t\t\t// add an alternative for this module, if any given\n\t\t\t\tmsg = 'Use ' + replacement + ' instead.';\n\t\t\t}\n\t\t\t// register it as a deprecated one\n\t\t\tmw.log.deprecate( this._register, id, obj, msg );\n\t\t}\n\t};\n\tOO.mixinClass( ModuleLoader, OO.EventEmitter );\n\n\t/**\n\t *\n\t * FIXME: In a wonderful world all this could run in a file called init.js,\n\t * all the above code would be core and everyone would be happy.\n\t * @class mw.mobileFrontend\n\t * @singleton\n\t */\n\tmw.mobileFrontend = new ModuleLoader();\n\tmw.log.deprecate( mw.mobileFrontend, 'on', mw.mobileFrontend.on,\n\t\t'The global EventEmitter should not be used (T156186).' );\n\n\t// inception to support testing (!!)\n\tmw.mobileFrontend.ModuleLoader = ModuleLoader;\n\n}() );\n"],"sourceRoot":""}