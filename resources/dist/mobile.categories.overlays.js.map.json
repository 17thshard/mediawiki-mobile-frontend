{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryAddOverlay.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryGateway.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryLookupInputWidget.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryTabs.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/mobile.categories.overlays.js"],"names":["Overlay","require","mfExtend","headers","util","CategoryGateway","CategoryLookupInputWidget","toast","router","mw","loader","CategoryAddOverlay","options","call","this","extend","saveHeader","msg","title","savingHeader","className","events","template","postRender","input","prototype","apply","$suggestions","$el","find","$saveButton","wgCategories","categories","gateway","api","suggestions","saveButton","append","$element","onCategoryClick","ev","target","closest","detach","length","prop","onSaveClick","newCategories","self","showHidden","each","data","show","type","save","then","navigate","notify","$safeButton","module","exports","actionParams","SearchGateway","parent","arguments","continueParams","canContinue","searchNamespace","postWithToken","action","appendtext","summary","getCategories","params","titles","clprop","cllimit","get","undefined","continue","OO","inheritClass","placeholder","ui","TextInputWidget","mixin","LookupElement","mixinClass","onLookupMenuItemChoose","button","ButtonWidget","icon","label","classes","flags","attr","getLookupRequest","search","value","getLookupCacheDataFromResponse","response","Title","results","unshift","toString","displayTitle","getMainText","getLookupMenuOptionsFromData","result","forEach","indexOf","push","MenuOptionWidget","View","$spinner","spinner","ScrollEndEventEmitter","CategoryTabs","scrollEndEventEmitter","eventBus","on","EVENT_SCROLL_END","_loadCategories","bind","normalcatlink","hiddencatlink","subheading","isTemplateMode","templatePartials","item","hideSpinner","hide","showSpinner","apiResult","$normalCatlist","$hiddenCatlist","setElement","disable","query","pages","page","category","newFromText","ns","hidden","render","url","getUrl","text","_changeView","enable","onCatlinkClick","preventDefault","hasClass","toggleClass","m","define"],"mappings":"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","file":"mobile.categories.overlays.js","sourcesContent":["var\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tutil = require( '../mobile.startup/util' ),\n\tCategoryGateway = require( './CategoryGateway' ),\n\tCategoryLookupInputWidget = require( './CategoryLookupInputWidget' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\trouter = mw.loader.require( 'mediawiki.router' );\n\n/**\n * Displays the list of categories for a page\n * @class CategoryAddOverlay\n * @extends Overlay\n * @uses CategoryGateway\n * @param {Object} options Configuration options\n */\nfunction CategoryAddOverlay( options ) {\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\theaders: [\n\t\t\t\t\theaders.saveHeader(\n\t\t\t\t\t\tmw.msg( 'mobile-frontend-categories-add-heading', options.title ),\n\t\t\t\t\t\t'initial-header'\n\t\t\t\t\t),\n\t\t\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-categories-add-wait' ) )\n\t\t\t\t],\n\t\t\t\tclassName: 'category-overlay overlay',\n\t\t\t\tevents: {\n\t\t\t\t\t'click .save': 'onSaveClick',\n\t\t\t\t\t'click .suggestion': 'onCategoryClick'\n\t\t\t\t}\n\t\t\t},\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( CategoryAddOverlay, Overlay, {\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n<div class=\"overlay-content\">\n\t<!-- Should be broken out into separate component -->\n\t<div class=\"category-editor\">\n\t\t<div class=\"content-header panel add-panel\">\n\t\t\t<div class=\"category-add-input\"></div>\n\t\t</div>\n\t\t<p class=\"overlay-content category-suggestions panel\"></p>\n\t</div>\n</div>\n\t` ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar input;\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.$suggestions = this.$el.find( '.category-suggestions' );\n\t\tthis.$saveButton = this.$el.find( '.save' );\n\t\tthis.wgCategories = this.options.categories;\n\t\tthis.title = this.options.title;\n\n\t\tthis.gateway = new CategoryGateway( this.options.api );\n\t\tinput = new CategoryLookupInputWidget( {\n\t\t\tgateway: this.gateway,\n\t\t\tsuggestions: this.$suggestions,\n\t\t\tcategories: this.wgCategories,\n\t\t\tsaveButton: this.$saveButton\n\t\t} );\n\t\tthis.$el.find( '.category-add-input' ).append(\n\t\t\tinput.$element\n\t\t);\n\t},\n\n\t/**\n\t * Handle a click on an added category\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonCategoryClick: function ( ev ) {\n\t\tthis.$el.find( ev.target ).closest( '.suggestion' ).detach();\n\t\tif ( this.$el.find( '.suggestion' ).length > 0 ) {\n\t\t\tthis.$saveButton.prop( 'disabled', false );\n\t\t} else {\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t}\n\t},\n\n\t/**\n\t * Handle the click on the save button. Builds a string of new categories\n\t * and add it to the article.\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar newCategories = '',\n\t\t\tself = this;\n\n\t\t// show the loading spinner and disable the safe button\n\t\tthis.showHidden( '.saving-header' );\n\n\t\t// add wikitext to add to the page\n\t\tthis.$el.find( '.suggestion' ).each( function () {\n\t\t\tvar data = self.$el.find( this ).data( 'title' );\n\n\t\t\tif ( data ) {\n\t\t\t\t// add the new categories in wikitext markup\n\t\t\t\tnewCategories += '\\n[[' + data + ']] ';\n\t\t\t}\n\t\t} );\n\n\t\t// if there are no categories added, don't do anything (the user shouldn't see the save\n\t\t// button)\n\t\tif ( newCategories.length === 0 ) {\n\t\t\ttoast.show( mw.msg( 'mobile-frontend-categories-nodata' ), { type: 'error' } );\n\t\t} else {\n\t\t\t// save the new categories\n\t\t\tthis.gateway.save( this.title, newCategories ).then( function () {\n\t\t\t\t// we're closing the overlay to show the user\n\t\t\t\t// that the action was completed successful\n\t\t\t\trouter.navigate( '#' );\n\t\t\t\tmw.notify( mw.msg( 'mobile-frontend-categories-notification' ) );\n\t\t\t}, function () {\n\t\t\t\tself.showHidden( '.initial-header' );\n\t\t\t\tself.$safeButton.prop( 'disabled', false );\n\t\t\t\t// FIXME: Should be a better error message\n\t\t\t\ttoast.show( mw.msg( 'mobile-frontend-categories-nodata' ), { type: 'error' } );\n\t\t\t} );\n\t\t}\n\t}\n} );\n\nmodule.exports = CategoryAddOverlay;\n","var\n\tprototype,\n\tactionParams = require( '../mobile.startup/actionParams' ),\n\tutil = require( '../mobile.startup/util' ),\n\tSearchGateway = require( '../mobile.startup/search/SearchGateway' );\n\n/**\n * Api for CategoryOverlay\n * @class CategoryGateway\n * @extends SearchGateway\n */\nfunction CategoryGateway() {\n\tCategoryGateway.parent.apply( this, arguments );\n}\nprototype = {\n\t/**\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tcontinueParams: {},\n\t/**\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tcanContinue: true,\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tsearchNamespace: 14,\n\t/**\n\t * Saves the categories passed to this function to the page\n\t * @memberof CategoryGateway\n\t * @instance\n\t * @param {string} title Title of the current page (to add the categories to)\n\t * @param {string} categories List of Categories to add\n\t * @return {jQuery.Deferred}\n\t */\n\tsave: function ( title, categories ) {\n\t\treturn this.api.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\ttitle: title,\n\t\t\tappendtext: categories,\n\t\t\tsummary: mw.msg( 'mobile-frontend-categories-summary' )\n\t\t} );\n\t},\n\t/**\n\t * Returns the categories the title belongs to.\n\t * @memberof CategoryGateway\n\t * @instance\n\t * @param {string} title Title of the current page (to add the categories to)\n\t * @return {jQuery.Deferred|boolean} False, if no further continuation is possible,\n\t *                                   jQuery.Deferred otherwise.\n\t */\n\tgetCategories: function ( title ) {\n\t\tvar self = this, params;\n\n\t\tif ( this.canContinue === false ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tparams = util.extend( {}, {\n\t\t\tprop: 'categories',\n\t\t\ttitles: title,\n\t\t\tclprop: 'hidden',\n\t\t\tcllimit: 50\n\t\t}, this.continueParams );\n\t\treturn this.api.get( actionParams( params ) ).then( function ( data ) {\n\t\t\tif ( data.continue !== undefined ) {\n\t\t\t\tself.continueParams = data.continue;\n\t\t\t} else {\n\t\t\t\tself.canContinue = false;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t} );\n\t}\n};\n\nOO.inheritClass( CategoryGateway, SearchGateway );\nutil.extend( CategoryGateway.prototype, prototype );\n\nmodule.exports = CategoryGateway;\n","/**\n * @class CategoryLookupInputWidget\n * @extends OO.ui.mixin.LookupElement\n *\n * @param {Object} options Configuration options\n * @param {CategoryGateway} options.gateway to use to retrieve search results\n * @param {jQuery.Object} options.suggestions container element for search suggestions\n * @param {jQuery.Object} options.saveButton element. Will get disabled when suggested item\n *                                           clicked.\n */\nfunction CategoryLookupInputWidget( options ) {\n\t// Note: this.$element is set to $( '<div>' ) by OOUI.\n\tthis.gateway = options.gateway;\n\tthis.$suggestions = options.suggestions;\n\tthis.categories = options.categories || [];\n\tthis.$saveButton = options.saveButton;\n\toptions.placeholder = mw.msg( 'mobile-frontend-categories-search' );\n\tOO.ui.TextInputWidget.call( this, options );\n\tOO.ui.mixin.LookupElement.call( this, options );\n}\nOO.inheritClass( CategoryLookupInputWidget, OO.ui.TextInputWidget );\nOO.mixinClass( CategoryLookupInputWidget, OO.ui.mixin.LookupElement );\n\n/**\n * Handle a click on a suggested item. Add it to the list of added categories and show save\n * button.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Object} data Data of the clicked element\n */\nCategoryLookupInputWidget.prototype.onLookupMenuItemChoose = function ( data ) {\n\tvar button = new OO.ui.ButtonWidget( {\n\t\ticon: 'check',\n\t\tlabel: data.label,\n\t\tclasses: [ 'suggestion', 'suggested' ],\n\t\tflags: [ 'progressive', 'primary' ]\n\t} );\n\n\tbutton.$element.attr( 'data-title', data.data );\n\tthis.$suggestions.append( button.$element );\n\tthis.$saveButton.prop( 'disabled', false );\n};\n\n/**\n * Returns the result of the search request.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @return {jQuery.Deferred}\n */\nCategoryLookupInputWidget.prototype.getLookupRequest = function () {\n\treturn this.gateway.search( this.value );\n};\n\n/**\n * Get lookup cache item from server response data.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Mixed} response Response from server\n * @return {Mixed} Cached result response\n */\nCategoryLookupInputWidget.prototype.getLookupCacheDataFromResponse = function ( response ) {\n\tvar title = new mw.Title( this.value, 14 );\n\n\t// add user input as a possible (actually not existing) category\n\tresponse.results.unshift( {\n\t\ttitle: title.toString(),\n\t\tdisplayTitle: title.getMainText()\n\t} );\n\n\treturn response;\n};\n\n/**\n * Get a list of menu item widgets from the data stored by the lookup request's done handler.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Mixed} data Cached result data, usually an array\n * @return {Array} Array of OO.ui.MenuOptionWidget\n */\nCategoryLookupInputWidget.prototype.getLookupMenuOptionsFromData = function ( data ) {\n\tvar result = [],\n\t\t$el = this.$element,\n\t\tself = this;\n\n\tdata.results.forEach( function ( value ) {\n\t\tif (\n\t\t\t!$el.find( 'div[data-title=\"' + value.title + '\"]' ).length &&\n\t\t\tself.categories.indexOf( value.displayTitle ) === -1\n\t\t) {\n\t\t\tresult.push(\n\t\t\t\tnew OO.ui.MenuOptionWidget( {\n\t\t\t\t\tdata: value.title,\n\t\t\t\t\tlabel: value.displayTitle\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n\treturn result;\n};\n\nmodule.exports = CategoryLookupInputWidget;\n","var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tutil = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\ticons = require( '../mobile.startup/icons' ),\n\t$spinner = icons.spinner().$el,\n\tScrollEndEventEmitter = require( '../mobile.startup/ScrollEndEventEmitter' ),\n\tCategoryGateway = require( './CategoryGateway' );\n\n/**\n * Displays the list of categories for a page in two tabs\n * TODO: Break this into Tab and CategoryList components for better reuse.\n * @class CategoryTabs\n * @extends View\n * @uses CategoryGateway\n *\n * @param {Object} options Configuration options\n * @param {string} options.title of page to obtain categories for\n * @param {mw.Api} options.api for use with CategoryGateway\n * @param {OO.EventEmitter} options.eventBus Object used to listen for category-added\n * and scroll:throttled events\n */\nfunction CategoryTabs( options ) {\n\tthis.scrollEndEventEmitter = new ScrollEndEventEmitter( options.eventBus );\n\tthis.scrollEndEventEmitter.on( ScrollEndEventEmitter.EVENT_SCROLL_END,\n\t\tthis._loadCategories.bind( this ) );\n\tthis.gateway = new CategoryGateway( options.api );\n\tView.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tevents: { 'click .catlink': 'onCatlinkClick' },\n\t\t\t\tnormalcatlink: mw.msg( 'mobile-frontend-categories-normal' ),\n\t\t\t\thiddencatlink: mw.msg( 'mobile-frontend-categories-hidden' ),\n\t\t\t\tsubheading: mw.msg( 'mobile-frontend-categories-subheading' )\n\t\t\t},\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( CategoryTabs, View, {\n\tisTemplateMode: true,\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"category-list\">\n\t<p class=\"content-header\">\n\t\t{{subheading}}\n\t</p>\n\t<ul class=\"category-header\">\n\t\t<li class=\"selected\">\n\t\t\t<a href=\"#\" class=\"catlink\">{{normalcatlink}}</a>\n\t\t</li><li>\n\t\t\t<a href=\"#\" class=\"catlink\">{{hiddencatlink}}</a>\n\t\t</li>\n\t</ul>\n\t<ul class=\"topic-title-list normal-catlist\"></ul>\n\t<ul class=\"topic-title-list hidden hidden-catlist\"></ul>\n</div>\n\t` ),\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\ttemplatePartials: {\n\t\titem: util.template( `\n<li title=\"{{title}}\">\n    <a href=\"{{url}}\">{{title}}</a>\n</li>\n\t\t` )\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tView.prototype.postRender.apply( this );\n\t\tthis.$el.append( $spinner );\n\t\tthis._loadCategories();\n\t},\n\n\t/**\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @return {void}\n\t */\n\thideSpinner: function () {\n\t\tthis.$el.find( '.spinner' ).hide();\n\t},\n\t/**\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @return {void}\n\t */\n\tshowSpinner: function () {\n\t\tthis.$el.find( '.spinner' ).show();\n\t},\n\t/**\n\t * Get a list of categories the page belongs to and re-renders the overlay content\n\t * FIXME: CategoryTabs should be dumb and solely focus on rendering. This should\n\t * be refactored out at the earliest opportunity.\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\t_loadCategories: function () {\n\t\tvar self = this,\n\t\t\t$normalCatlist = this.$el.find( '.normal-catlist' ),\n\t\t\t$hiddenCatlist = this.$el.find( '.hidden-catlist' ),\n\t\t\tapiResult;\n\n\t\tthis.scrollEndEventEmitter.setElement( this.$el );\n\t\t// ScrollEndEventEmitter is enabled once it's created, but we want to wait, until at\n\t\t// least one element is in the list before we enable it. So disable it here and enable\n\t\t// once the elements are loaded.\n\t\tthis.scrollEndEventEmitter.disable();\n\t\tapiResult = this.gateway.getCategories( this.options.title );\n\t\tif ( apiResult === false ) {\n\t\t\tself.hideSpinner();\n\t\t\treturn;\n\t\t}\n\t\tapiResult.then( function ( data ) {\n\t\t\tif ( data.query && data.query.pages ) {\n\t\t\t\t// add categories to overlay\n\t\t\t\tdata.query.pages.forEach( function ( page ) {\n\t\t\t\t\tif ( page.categories ) {\n\t\t\t\t\t\tpage.categories.forEach( function ( category ) {\n\t\t\t\t\t\t\tvar title = mw.Title.newFromText( category.title, category.ns );\n\n\t\t\t\t\t\t\tif ( category.hidden ) {\n\t\t\t\t\t\t\t\t$hiddenCatlist.append( self.templatePartials.item.render( {\n\t\t\t\t\t\t\t\t\turl: title.getUrl(),\n\t\t\t\t\t\t\t\t\ttitle: title.getMainText()\n\t\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$normalCatlist.append( self.templatePartials.item.render( {\n\t\t\t\t\t\t\t\t\turl: title.getUrl(),\n\t\t\t\t\t\t\t\t\ttitle: title.getMainText()\n\t\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( $normalCatlist.length === 0 && $normalCatlist.length === 0 ) {\n\t\t\t\t\tself.$el.find( '.content-header' ).text( mw.msg( 'mobile-frontend-categories-nocat' ) );\n\t\t\t\t} else if ( $normalCatlist.length === 0 && $normalCatlist.length > 0 ) {\n\t\t\t\t\tthis._changeView();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself.$el.find( '.content-header' ).text( mw.msg( 'mobile-frontend-categories-nocat' ) );\n\t\t\t}\n\t\t\tself.hideSpinner();\n\t\t\tself.scrollEndEventEmitter.enable();\n\t\t} );\n\t},\n\n\t/**\n\t * Handles a click on one of the tabs to change the viewable categories\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @param {jQuery.Event} ev The Event object triggered this handler\n\t */\n\tonCatlinkClick: function ( ev ) {\n\t\tev.preventDefault();\n\t\t// change view only, if the user clicked another view\n\t\tif ( !this.$el.find( ev.target ).parent().hasClass( 'selected' ) ) {\n\t\t\tthis._changeView();\n\t\t}\n\t},\n\n\t/**\n\t * Changes the view from hidden categories to content-based categories and vice-versa\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\t_changeView: function () {\n\t\tthis.$el.find( '.category-header li' ).toggleClass( 'selected' );\n\t\tthis.$el.find( '.topic-title-list' ).toggleClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = CategoryTabs;\n","var m = require( '../mobile.startup/moduleLoaderSingleton' ),\n\tCategoryAddOverlay = require( './CategoryAddOverlay' ),\n\tCategoryTabs = require( './CategoryTabs' );\n\nm.define( 'mobile.categories.overlays', {\n\tCategoryTabs,\n\tCategoryAddOverlay\n} );\n"],"sourceRoot":""}