{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryAddOverlay.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryGateway.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryLookupInputWidget.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/CategoryTabs.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/categoryOverlay.js","webpack://mfModules.[name]/./src/mobile.categories.overlays/mobile.categories.overlays.js"],"names":["Overlay","__webpack_require__","mfExtend","util","CategoryGateway","CategoryLookupInputWidget","icons","toast","router","mw","loader","require","CategoryAddOverlay","options","heading","msg","title","this","eventBus","call","extend","className","events","click .save","click .suggestion","defaults","prototype","headerButtonsListClassName","waitMsg","waitIcon","spinner","toHtmlString","template","get","templatePartials","header","saveHeader","postRender","input","apply","$suggestions","$","$saveButton","wgCategories","categories","gateway","api","suggestions","saveButton","append","$element","onCategoryClick","ev","target","closest","detach","length","prop","onSaveClick","newCategories","self","showHidden","each","data","show","save","then","navigate","notify","$safeButton","module","exports","actionParams","SearchGateway","parent","arguments","continueParams","canContinue","searchNamespace","postWithToken","action","appendtext","summary","getCategories","params","titles","clprop","cllimit","undefined","continue","OO","inheritClass","placeholder","ui","TextInputWidget","mixin","LookupElement","mixinClass","onLookupMenuItemChoose","button","ButtonWidget","icon","label","classes","flags","attr","getLookupRequest","search","value","getLookupCacheDataFromResponse","response","Title","results","unshift","toString","displayTitle","getNameText","getLookupMenuOptionsFromData","result","$el","forEach","find","indexOf","push","MenuOptionWidget","View","ScrollEndEventEmitter","CategoryTabs","scrollEndEventEmitter","on","EVENT_SCROLL_END","_loadCategories","bind","click .catlink","isTemplateMode","normalcatlink","hiddencatlink","item","hideSpinner","hide","showSpinner","apiResult","$normalCatlist","$hiddenCatlist","setElement","disable","query","pages","page","category","newFromText","ns","hidden","render","url","getUrl","text","_changeView","enable","onCatlinkClick","preventDefault","hasClass","toggleClass","overlay","widget","headerButtons","isAnon","href","subheading","m","categoryOverlay","define","deprecate"],"mappings":"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","file":"mobile.categories.overlays.js","sourcesContent":["var\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tutil = require( '../mobile.startup/util' ),\n\tCategoryGateway = require( './CategoryGateway' ),\n\tCategoryLookupInputWidget = require( './CategoryLookupInputWidget' ),\n\ticons = require( '../mobile.startup/icons' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\trouter = mw.loader.require( 'mediawiki.router' );\n\n/**\n * Displays the list of categories for a page\n * @class CategoryAddOverlay\n * @extends Overlay\n * @uses CategoryGateway\n * @param {Object} options Configuration options\n * @param {OO.EventEmitter} options.eventBus Object used to emit category-added events\n */\nfunction CategoryAddOverlay( options ) {\n\toptions.heading = mw.msg( 'mobile-frontend-categories-add-heading', options.title );\n\tthis.eventBus = options.eventBus;\n\tOverlay.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{\n\t\t\t\tclassName: 'category-overlay overlay',\n\t\t\t\tevents: {\n\t\t\t\t\t'click .save': 'onSaveClick',\n\t\t\t\t\t'click .suggestion': 'onCategoryClick'\n\t\t\t\t}\n\t\t\t},\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( CategoryAddOverlay, Overlay, {\n\t/**\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {mw.Api} defaults.api to use to construct gateway\n\t * @property {string} defaults.waitMsg Text that displays while a page edit is being saved.\n\t * @property {string} defaults.waitIcon HTML of the icon that displays while a page edit\n\t * is being saved.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\theaderButtonsListClassName: 'header-action',\n\t\twaitMsg: mw.msg( 'mobile-frontend-categories-add-wait' ),\n\t\twaitIcon: icons.spinner().toHtmlString()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.categories.overlays', 'CategoryAddOverlay.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\theader: mw.template.get( 'mobile.categories.overlays', 'CategoryAddOverlayHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar input;\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.$suggestions = this.$( '.category-suggestions' );\n\t\tthis.$saveButton = this.$( '.save' );\n\t\tthis.wgCategories = this.options.categories;\n\t\tthis.title = this.options.title;\n\n\t\tthis.gateway = new CategoryGateway( this.options.api );\n\t\tinput = new CategoryLookupInputWidget( {\n\t\t\tgateway: this.gateway,\n\t\t\tsuggestions: this.$suggestions,\n\t\t\tcategories: this.wgCategories,\n\t\t\tsaveButton: this.$saveButton\n\t\t} );\n\t\tthis.$( '.category-add-input' ).append(\n\t\t\tinput.$element\n\t\t);\n\t},\n\n\t/**\n\t * Handle a click on an added category\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonCategoryClick: function ( ev ) {\n\t\tthis.$( ev.target ).closest( '.suggestion' ).detach();\n\t\tif ( this.$( '.suggestion' ).length > 0 ) {\n\t\t\tthis.$saveButton.prop( 'disabled', false );\n\t\t} else {\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t}\n\t},\n\n\t/**\n\t * Handle the click on the save button. Builds a string of new categories\n\t * and add it to the article.\n\t * @memberof CategoryAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar newCategories = '',\n\t\t\tself = this;\n\n\t\t// show the loading spinner and disable the safe button\n\t\tthis.showHidden( '.saving-header' );\n\n\t\t// add wikitext to add to the page\n\t\tthis.$( '.suggestion' ).each( function () {\n\t\t\tvar data = self.$( this ).data( 'title' );\n\n\t\t\tif ( data ) {\n\t\t\t\t// add the new categories in wikitext markup\n\t\t\t\tnewCategories += '\\n[[' + data + ']] ';\n\t\t\t}\n\t\t} );\n\n\t\t// if there are no categories added, don't do anything (the user shouldn't see the save\n\t\t// button)\n\t\tif ( newCategories.length === 0 ) {\n\t\t\ttoast.show( mw.msg( 'mobile-frontend-categories-nodata' ), 'error' );\n\t\t} else {\n\t\t\t// save the new categories\n\t\t\tthis.gateway.save( this.title, newCategories ).then( function () {\n\t\t\t\t// we're closing the overlay to show the user\n\t\t\t\t// that the action was completed successful\n\t\t\t\trouter.navigate( '#' );\n\t\t\t\tmw.notify( mw.msg( 'mobile-frontend-categories-notification' ) );\n\t\t\t}, function () {\n\t\t\t\tself.showHidden( '.initial-header' );\n\t\t\t\tself.$safeButton.prop( 'disabled', false );\n\t\t\t\t// FIXME: Should be a better error message\n\t\t\t\ttoast.show( mw.msg( 'mobile-frontend-categories-nodata' ), 'toast error' );\n\t\t\t} );\n\t\t}\n\t}\n} );\n\nmodule.exports = CategoryAddOverlay;\n","var\n\tprototype,\n\tactionParams = require( '../mobile.startup/actionParams' ),\n\tutil = require( '../mobile.startup/util' ),\n\tSearchGateway = require( '../mobile.startup/search/SearchGateway' );\n\n/**\n * Api for CategoryOverlay\n * @class CategoryGateway\n * @extends SearchGateway\n */\nfunction CategoryGateway() {\n\tCategoryGateway.parent.apply( this, arguments );\n}\nprototype = {\n\t/**\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tcontinueParams: {},\n\t/**\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tcanContinue: true,\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryGateway\n\t * @instance\n\t */\n\tsearchNamespace: 14,\n\t/**\n\t * Saves the categories passed to this function to the page\n\t * @memberof CategoryGateway\n\t * @instance\n\t * @param {string} title Title of the current page (to add the categories to)\n\t * @param {string} categories List of Categories to add\n\t * @return {jQuery.Deferred}\n\t */\n\tsave: function ( title, categories ) {\n\t\treturn this.api.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\ttitle: title,\n\t\t\tappendtext: categories,\n\t\t\tsummary: mw.msg( 'mobile-frontend-categories-summary' )\n\t\t} );\n\t},\n\t/**\n\t * Returns the categories the title belongs to.\n\t * @memberof CategoryGateway\n\t * @instance\n\t * @param {string} title Title of the current page (to add the categories to)\n\t * @return {jQuery.Deferred|boolean} False, if no further continuation is possible,\n\t *                                   jQuery.Deferred otherwise.\n\t */\n\tgetCategories: function ( title ) {\n\t\tvar self = this, params;\n\n\t\tif ( this.canContinue === false ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tparams = util.extend( {}, {\n\t\t\tprop: 'categories',\n\t\t\ttitles: title,\n\t\t\tclprop: 'hidden',\n\t\t\tcllimit: 50\n\t\t}, this.continueParams );\n\t\treturn this.api.get( actionParams( params ) ).then( function ( data ) {\n\t\t\tif ( data.continue !== undefined ) {\n\t\t\t\tself.continueParams = data.continue;\n\t\t\t} else {\n\t\t\t\tself.canContinue = false;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t} );\n\t}\n};\n\nOO.inheritClass( CategoryGateway, SearchGateway );\nutil.extend( CategoryGateway.prototype, prototype );\n\nmodule.exports = CategoryGateway;\n","/**\n * @class CategoryLookupInputWidget\n * @extends OO.ui.mixin.LookupElement\n *\n * @param {Object} options Configuration options\n * @param {CategoryGateway} options.gateway to use to retrieve search results\n * @param {jQuery.Object} options.suggestions container element for search suggestions\n * @param {jQuery.Object} options.saveButton element. Will get disabled when suggested item\n *                                           clicked.\n */\nfunction CategoryLookupInputWidget( options ) {\n\t// Note: this.$element is set to $( '<div>' ) by OOUI.\n\tthis.gateway = options.gateway;\n\tthis.$suggestions = options.suggestions;\n\tthis.categories = options.categories || [];\n\tthis.$saveButton = options.saveButton;\n\toptions.placeholder = mw.msg( 'mobile-frontend-categories-search' );\n\tOO.ui.TextInputWidget.call( this, options );\n\tOO.ui.mixin.LookupElement.call( this, options );\n}\nOO.inheritClass( CategoryLookupInputWidget, OO.ui.TextInputWidget );\nOO.mixinClass( CategoryLookupInputWidget, OO.ui.mixin.LookupElement );\n\n/**\n * Handle a click on a suggested item. Add it to the list of added categories and show save\n * button.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Object} data Data of the clicked element\n */\nCategoryLookupInputWidget.prototype.onLookupMenuItemChoose = function ( data ) {\n\tvar button = new OO.ui.ButtonWidget( {\n\t\ticon: 'check',\n\t\tlabel: data.label,\n\t\tclasses: [ 'suggestion', 'suggested' ],\n\t\tflags: [ 'progressive', 'primary' ]\n\t} );\n\n\tbutton.$element.attr( 'data-title', data.data );\n\tthis.$suggestions.append( button.$element );\n\tthis.$saveButton.prop( 'disabled', false );\n};\n\n/**\n * Returns the result of the search request.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @return {jQuery.Deferred}\n */\nCategoryLookupInputWidget.prototype.getLookupRequest = function () {\n\treturn this.gateway.search( this.value );\n};\n\n/**\n * Get lookup cache item from server response data.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Mixed} response Response from server\n * @return {Mixed} Cached result response\n */\nCategoryLookupInputWidget.prototype.getLookupCacheDataFromResponse = function ( response ) {\n\tvar title = new mw.Title( this.value, 14 );\n\n\t// add user input as a possible (actually not existing) category\n\tresponse.results.unshift( {\n\t\ttitle: title.toString(),\n\t\tdisplayTitle: title.getNameText()\n\t} );\n\n\treturn response;\n};\n\n/**\n * Get a list of menu item widgets from the data stored by the lookup request's done handler.\n * @memberof CategoryLookupInputWidget\n * @instance\n * @param {Mixed} data Cached result data, usually an array\n * @return {Array} Array of OO.ui.MenuOptionWidget\n */\nCategoryLookupInputWidget.prototype.getLookupMenuOptionsFromData = function ( data ) {\n\tvar result = [],\n\t\t$el = this.$element,\n\t\tself = this;\n\n\tdata.results.forEach( function ( value ) {\n\t\tif (\n\t\t\t!$el.find( 'div[data-title=\"' + value.title + '\"]' ).length &&\n\t\t\tself.categories.indexOf( value.displayTitle ) === -1\n\t\t) {\n\t\t\tresult.push(\n\t\t\t\tnew OO.ui.MenuOptionWidget( {\n\t\t\t\t\tdata: value.title,\n\t\t\t\t\tlabel: value.displayTitle\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n\treturn result;\n};\n\nmodule.exports = CategoryLookupInputWidget;\n","var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tutil = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tScrollEndEventEmitter = require( '../mobile.startup/ScrollEndEventEmitter' ),\n\tCategoryGateway = require( './CategoryGateway' );\n\n/**\n * Displays the list of categories for a page in two tabs\n * TODO: Break this into Tab and CategoryList components for better reuse.\n * @class CategoryTabs\n * @extends View\n * @uses CategoryGateway\n *\n * @param {Object} options Configuration options\n * @param {string} options.title of page to obtain categories for\n * @param {string} options.subheading for explaining the list of categories.\n * @param {mw.Api} options.api for use with CategoryGateway\n * @param {OO.EventEmitter} options.eventBus Object used to listen for category-added\n * and scroll:throttled events\n */\nfunction CategoryTabs( options ) {\n\tthis.scrollEndEventEmitter = new ScrollEndEventEmitter( options.eventBus );\n\tthis.scrollEndEventEmitter.on( ScrollEndEventEmitter.EVENT_SCROLL_END,\n\t\tthis._loadCategories.bind( this ) );\n\tthis.gateway = new CategoryGateway( options.api );\n\tView.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{ events: { 'click .catlink': 'onCatlinkClick' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( CategoryTabs, View, {\n\tisTemplateMode: true,\n\t/**\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t */\n\tdefaults: {\n\t\tnormalcatlink: mw.msg( 'mobile-frontend-categories-normal' ),\n\t\thiddencatlink: mw.msg( 'mobile-frontend-categories-hidden' )\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.categories.overlays', 'CategoryTabs.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\ttemplatePartials: {\n\t\titem: mw.template.get( 'mobile.categories.overlays', 'CategoryTab.hogan' )\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tView.prototype.postRender.apply( this );\n\t\tthis._loadCategories();\n\t},\n\n\t/**\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @return {void}\n\t */\n\thideSpinner: function () {\n\t\tthis.$( '.spinner' ).hide();\n\t},\n\t/**\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @return {void}\n\t */\n\tshowSpinner: function () {\n\t\tthis.$( '.spinner' ).show();\n\t},\n\t/**\n\t * Get a list of categories the page belongs to and re-renders the overlay content\n\t * FIXME: CategoryTabs should be dumb and solely focus on rendering. This should\n\t * be refactored out at the earliest opportunity.\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\t_loadCategories: function () {\n\t\tvar self = this,\n\t\t\t$normalCatlist = this.$( '.normal-catlist' ),\n\t\t\t$hiddenCatlist = this.$( '.hidden-catlist' ),\n\t\t\tapiResult;\n\n\t\tthis.scrollEndEventEmitter.setElement( this.$el );\n\t\t// ScrollEndEventEmitter is enabled once it's created, but we want to wait, until at\n\t\t// least one element is in the list before we enable it. So disable it here and enable\n\t\t// once the elements are loaded.\n\t\tthis.scrollEndEventEmitter.disable();\n\t\tapiResult = this.gateway.getCategories( this.options.title );\n\t\tif ( apiResult === false ) {\n\t\t\tself.hideSpinner();\n\t\t\treturn;\n\t\t}\n\t\tapiResult.then( function ( data ) {\n\t\t\tif ( data.query && data.query.pages ) {\n\t\t\t\t// add categories to overlay\n\t\t\t\tdata.query.pages.forEach( function ( page ) {\n\t\t\t\t\tif ( page.categories ) {\n\t\t\t\t\t\tpage.categories.forEach( function ( category ) {\n\t\t\t\t\t\t\tvar title = mw.Title.newFromText( category.title, category.ns );\n\n\t\t\t\t\t\t\tif ( category.hidden ) {\n\t\t\t\t\t\t\t\t$hiddenCatlist.append( self.templatePartials.item.render( {\n\t\t\t\t\t\t\t\t\turl: title.getUrl(),\n\t\t\t\t\t\t\t\t\ttitle: title.getNameText()\n\t\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$normalCatlist.append( self.templatePartials.item.render( {\n\t\t\t\t\t\t\t\t\turl: title.getUrl(),\n\t\t\t\t\t\t\t\t\ttitle: title.getNameText()\n\t\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( $normalCatlist.length === 0 && $normalCatlist.length === 0 ) {\n\t\t\t\t\tself.$( '.content-header' ).text( mw.msg( 'mobile-frontend-categories-nocat' ) );\n\t\t\t\t} else if ( $normalCatlist.length === 0 && $normalCatlist.length > 0 ) {\n\t\t\t\t\tthis._changeView();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself.$( '.content-header' ).text( mw.msg( 'mobile-frontend-categories-nocat' ) );\n\t\t\t}\n\t\t\tself.hideSpinner();\n\t\t\tself.scrollEndEventEmitter.enable();\n\t\t} );\n\t},\n\n\t/**\n\t * Handles a click on one of the tabs to change the viewable categories\n\t * @memberof CategoryTabs\n\t * @instance\n\t * @param {jQuery.Event} ev The Event object triggered this handler\n\t */\n\tonCatlinkClick: function ( ev ) {\n\t\tev.preventDefault();\n\t\t// change view only, if the user clicked another view\n\t\tif ( !this.$( ev.target ).parent().hasClass( 'selected' ) ) {\n\t\t\tthis._changeView();\n\t\t}\n\t},\n\n\t/**\n\t * Changes the view from hidden categories to content-based categories and vice-versa\n\t * @memberof CategoryTabs\n\t * @instance\n\t */\n\t_changeView: function () {\n\t\tthis.$( '.category-header li' ).toggleClass( 'selected' );\n\t\tthis.$( '.topic-title-list' ).toggleClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = CategoryTabs;\n","var\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tCategoryTabs = require( './CategoryTabs' );\n\n/**\n * Gets an overlay for displaying categories\n *\n * @param {Object} options Configuration options\n * @param {string} options.title of page to obtain categories for\n * @param {mw.Api} options.api for usage in CategoryTabs\n * @param {string} options.subheading for usage in CategoryTabs\n * @param {OO.EventEmitter} options.eventBus Object used to listen for category-added\n * and scroll:throttled events\n * @return {Overlay}\n */\nfunction categoryOverlay( options ) {\n\tvar overlay, widget,\n\t\theaderButtons = options.isAnon ? [] :\n\t\t\t[ {\n\t\t\t\thref: '#/categories/add',\n\t\t\t\tclassName: 'add continue',\n\t\t\t\tmsg: mw.msg( 'mobile-frontend-categories-add' )\n\t\t\t} ];\n\toverlay = new Overlay( {\n\t\tclassName: 'category-overlay overlay',\n\t\theading: mw.msg( 'mobile-frontend-categories-heading' ),\n\t\theaderButtonsListClassName: 'header-action',\n\t\theaderButtons: headerButtons\n\t} );\n\twidget = new CategoryTabs(\n\t\t{\n\t\t\teventBus: options.eventBus,\n\t\t\tapi: options.api,\n\t\t\ttitle: options.title,\n\t\t\tsubheading: mw.msg( 'mobile-frontend-categories-subheading' )\n\t\t}\n\t);\n\toverlay.$( '.overlay-content' ).append( widget.$el );\n\treturn overlay;\n}\n\nmodule.exports = categoryOverlay;\n","var m = require( '../mobile.startup/moduleLoaderSingleton' ),\n\tCategoryAddOverlay = require( './CategoryAddOverlay' ),\n\tcategoryOverlay = require( './categoryOverlay' );\n\n// needed for minerva usages\nm.define( 'mobile.categories.overlays/CategoryAddOverlay', CategoryAddOverlay );\nm.define( 'mobile.categories.overlays/categoryOverlay', categoryOverlay );\nm.deprecate( 'mobile.categories.overlays/CategoryOverlay', categoryOverlay,\n\t'mobile.categories.overlays/categoryOverlay' );\n"],"sourceRoot":""}