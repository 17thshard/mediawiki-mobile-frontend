{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterPanel.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessageDetails.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/blockMessageDrawer.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/identifyLeadParagraph.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/parseBlockInfo.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/schemaEditAttemptStep.js"],"names":["Button","require","util","mfExtend","Overlay","AbuseFilterOverlay","props","call","this","extend","className","defaults","prototype","confirmButton","additionalClassNames","progressive","templatePartials","content","template","postRender","apply","$el","find","attr","append","options","module","exports","View","AbuseFilterPanel","isDisallowed","overlayManager","readMoreMsg","mw","msg","show","type","message","add","text","removeClass","hide","addClass","Icon","okButton","label","tagName","BlockMessageDetails","userIcon","name","hasText","creator","prepend","createDetailsAnchorHref","getUrl","wpTarget","blockId","createDetailsAnchorLabel","createTitle","partial","reasonHeader","creatorHeader","user","get","expiryHeader","parseSaveError","actionParams","EditorGateway","api","title","sectionId","oldId","isNewPage","undefined","fromModified","hasChanged","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","getContent","self","resolve","Deferred","prop","rvprop","titles","intestactions","intestactionsdetail","rvstartid","isNumeric","rvsection","then","resp","revision","reject","query","pages","missing","revisions","timestamp","originalContent","setContent","setPrependText","prependtext","save","result","apiOptions","action","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","saveContent","abortPreview","_pending","abort","getPreview","sectionLine","sectionpreview","disableeditsection","pst","mobileformat","post","parse","sections","anchor","line","id","promise","parseBlockInfo","headers","PageGateway","icons","toast","saveFailureMessage","blockMessageDrawer","MessageBox","mwUser","EditVeTool","toolGroup","config","classes","super","EditorOverlayBase","params","onBeforeExit","bind","isBorderBox","events","click .back","click .continue","click .submit","click .anonymous","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","editorOptions","sessionId","OO","inheritClass","ui","Tool","static","icon","group","onSelect","onUpdateState","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","track","editor_interface","editor","editing_session_id","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","$window","getWindow","saved","invalidatePage","showOnPageReload","revision_id","location","hash","off","reload","onSaveFailure","key","details","editconflict","wasdeleted","abusefilter-disallowed","captcha","spamprotectiontext","titleblacklist-forbidden-edit","reportError","heading","errorNotice","$errorNoticeContainer","html","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","render","editSwitcher","editingMsg","readOnly","disabled","skipPreview","saveButtonMessage","cancel","saveHeader","previewingMsg","savingHeader","nextStep","allowCloseWindow","confirmCloseWindow","test","namespace","hook","fire","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","windowManager","switching","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","release","target","edited","createAnonWarning","$actions","$","$anonWarning","returnto","returnTo","returntoquery","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","href","map","getOptionsForSwitch","switched","currentPageHTMLParser","fakeScroll","titleObj","isAnon","contentLang","contentDir","getLoadingPromise","dataPromise","loader","using","handleCaptcha","$input","captchaShown","val","setTimeout","mime","detach","url","question","Section","fakeToolbar","VisualEditorOverlay","SourceEditorOverlay","isFirefox","navigator","userAgent","visualEditorConfig","gateway","isVisualEditorEnabled","input .wikitext-editor","arguments","_resizeEditor","ns","namespaces","onInputWikitextEditor","_hidePreview","showAnonWarning","switchToolbar","switchWindow","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","canSwitch","fullRestbaseUrl","allowLossySwitching","_switchToVisualEditor","WindowManager","SwitchConfirmDialog","$element","appendTo","document","body","destroy","setup","include","emit","spinner","hideSpinner","$preview","$content","$anonHiddenButtons","abuseFilterPanel","one","_loadContent","hideSpinnerAndShowPreview","scrollTop","getDocument","showSpinner","mainpage","parsedText","parsedSectionLine","parseHTML","el","container","$scrollContainer","Element","getClosestScrollableContainer","length","css","height","wikitext","feature","storage","set","targetLoader","addPlugin","loadModules","newOverlay","requestPageData","targetName","modified","replaceCurrent","remove","_showAbuseFilter","router","identifyLeadParagraph","surfaceReady","origDataPromise","getPrefixedDb","sessionStore","init","MobileArticleTarget","trackingName","targetFactory","create","once","getSurface","getModel","load","visualeditor","editHeader","destroyTarget","redoTargetInit","adjustContentPadding","restoreEditSection","scrollToLeadParagraph","editLead","editLeadView","readLead","offset","surface","getMode","getView","$attachedRootNode","getLeadSectionElement","top","setLinearSelection","Range","getRange","start","overlay","switchToEditor","switchToSourceEditor","setReadOnly","navigateTo","path","useReplaceState","hasBeenModified","Drawer","children","$body","$paragraphs","i","node","isNonLeadParagraph","$coords","textContent","isNotEmptyNode","m","schemaEditAttemptStep","define","blockInfo","expiry","reason","moment","blockpartial","blockedby","Title","makeTitle","duration","blockid","blockexpiry","format","to","blockreason","parser","ast","jqueryMsg","wikiTextToAst","emitter","e","jqueryMsgParse","escape","escaped","readonlyreason","info","trackdebug","getParamValue","exists","Schema","eventLog","sampleRate","actionPrefixMap","firstChange","saveIntent","saveAttempt","saveSuccess","saveFailure","timing","page_id","page_title","page_ns","user_id","getId","user_class","user_editcount","mw_version","platform","integration","page_token","getPageviewToken","session_token","version","anonymous_user_token","bucket","trackSubscribe","topic","timeStamp","actionPrefix","Math","round","event","ready","warn","abort_type","computeDuration","is_oversample","inSample","console"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["var Button = require( '../mobile.startup/Button' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Overlay that shows a message about abuse.\n * This overlay is rendered when the error code from the API\n * is related to the abusefilter extension.\n * @class AbuseFilterOverlay\n * @extends Overlay\n * @param {Object} props\n */\nfunction AbuseFilterOverlay( props ) {\n\tOverlay.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'overlay abusefilter-overlay'\n\t\t}, props )\n\t);\n}\n\nmfExtend( AbuseFilterOverlay, Overlay, {\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.confirmButton options for a confirm Button\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tconfirmButton: new Button( {\n\t\t\tadditionalClassNames: 'cancel',\n\t\t\tprogressive: true\n\t\t} )\n\t} ),\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div class=\"content\">\n\t{{{message}}}\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\t// make links open in separate tabs\n\t\tthis.$el.find( 'a' ).attr( 'target', '_blank' );\n\t\tthis.$el.find( '.content' ).append( this.options.confirmButton.$el );\n\t}\n} );\n\nmodule.exports = AbuseFilterOverlay;\n","var util = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAbuseFilterOverlay = require( './AbuseFilterOverlay' );\n\n/**\n * Panel that shows an error message related to the abusefilter extension.\n * @class AbuseFilterPanel\n * @extends View\n * @uses AbuseFilterOverlay\n *\n * @param {Object} options Configuration options\n * FIXME: should extend Panel not View. Or the name should be changed to something meaningful.\n */\nfunction AbuseFilterPanel( options ) {\n\tthis.isDisallowed = false;\n\tthis.overlayManager = options.overlayManager;\n\tView.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'panel hidden'\n\t\t}, options )\n\t);\n}\n\nmfExtend( AbuseFilterPanel, View, {\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.readMoreMsg A caption for the button\n\t * allowing the user to read more about the problems with their edit.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t */\n\tdefaults: {\n\t\treadMoreMsg: mw.msg( 'mobile-frontend-editor-abusefilter-read-more' )\n\t},\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"message\">\n\t<p></p><a href=\"#/abusefilter\" class=\"readmore\">{{readMoreMsg}}</a>\n</div>\n\t` ),\n\t/**\n\t * Show the panel. Create a route to show AbuseFilterOverlay with message.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\tshow: function ( type, message ) {\n\t\tvar msg;\n\n\t\t// OverlayManager will replace previous instance of the route if present\n\t\tthis.overlayManager.add( /^\\/abusefilter$/, function () {\n\t\t\treturn new AbuseFilterOverlay( {\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t} );\n\n\t\tif ( type === 'warning' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-warning' );\n\t\t} else if ( type === 'disallow' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-disallow' );\n\t\t\tthis.isDisallowed = true;\n\t\t}\n\n\t\tthis.$el.find( '.message p' ).text( msg );\n\t\tthis.$el.removeClass( 'hidden' );\n\t},\n\n\t/**\n\t * Hide the panel.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\thide: function () {\n\t\tthis.$el.addClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = AbuseFilterPanel;\n","'use strict';\nvar Button = require( '../mobile.startup/Button' ),\n\tView = require( '../mobile.startup/View' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tokButton = new Button( {\n\t\tlabel: mw.msg( 'ok' ),\n\t\ttagName: 'button',\n\t\tprogressive: true,\n\t\tadditionalClassNames: 'cancel'\n\t} ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * @extends View\n */\nclass BlockMessageDetails extends View {\n\t/** @inheritdoc */\n\tget isTemplateMode() {\n\t\treturn true;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget defaults() {\n\t\treturn {\n\t\t\tcreateDetailsAnchorHref: function () {\n\t\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + this.blockId } );\n\t\t\t},\n\t\t\tcreateDetailsAnchorLabel: function () {\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t\t},\n\t\t\tcreateTitle: function () {\n\t\t\t\treturn this.partial ? mw.msg( 'mobile-frontend-editor-blocked-drawer-title-partial' ) : mw.msg( 'mobile-frontend-editor-blocked-drawer-title' );\n\t\t\t},\n\t\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\t\tcreatorHeader: function () {\n\t\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t\t},\n\t\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t\t};\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender() {\n\t\tconst userIcon = new Icon( {\n\t\t\ttagName: 'span',\n\t\t\tname: 'profile',\n\t\t\thasText: true,\n\t\t\tlabel: this.options.creator.name\n\t\t} );\n\n\t\tthis.$el.find( '.block-message-creator a' ).prepend(\n\t\t\tuserIcon.$el\n\t\t);\n\t\tthis.$el.find( '.block-message-buttons' ).prepend(\n\t\t\tokButton.$el\n\t\t);\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget template() {\n\t\treturn util.template( `\n<div class=\"block-message\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      {{#reason}}\n        <div class=\"block-message-item\">\n          <h6>{{ reasonHeader }}</h6>\n          <div><strong>{{{ reason }}}</strong></div>\n        </div>\n      {{/reason}}\n      <div class=\"block-message-item block-message-creator\">\n        <h6>{{ creatorHeader }}</h6>\n        <div><strong><a href=\"{{ creator.url }}\"></a></strong></div>\n      </div>\n      {{#expiry}}\n        <div class=\"block-message-item\">\n          <h6>{{ expiryHeader }}</h6>\n          <div><strong>{{#duration}}{{ duration }} / {{/duration}}{{ expiry }}</strong></div>\n        </div>\n      {{/expiry}}\n    </div>\n    <div class=\"block-message-item block-message-buttons\">\n      <a href=\"{{ createDetailsAnchorHref }}\">{{ createDetailsAnchorLabel }}</a>\n    </div>\n  </div>` );\n\t}\n}\n\nmodule.exports = BlockMessageDetails;\n","var util = require( '../mobile.startup/util' ),\n\tparseSaveError = require( './parseSaveError' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {number} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\t// return an empty section for new pages\n\tthis.content = options.isNewPage ? '' : undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See Bug 50136 - passing rvsection will fail with non wikitext\n\t\t\tif ( util.isNumeric( this.sectionId ) ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tself.content = '';\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Mark content as modified and set text that should be prepended to given\n\t * section when #save is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} text Text to be prepended.\n\t */\n\tsetPrependText: function ( text ) {\n\t\tthis.prependtext = text;\n\t\tthis.hasChanged = true;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t} else if ( self.prependtext ) {\n\t\t\t\tapiOptions.prependtext = self.prependtext;\n\t\t\t}\n\n\t\t\tif ( util.isNumeric( self.sectionId ) ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( parseSaveError( data ) );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( parseSaveError( data, code || 'unknown' ) );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (bug 49218)\n\t\t\tsectionpreview: true,\n\t\t\t// Hide section edit links\n\t\t\tdisableeditsection: true,\n\t\t\t// needed for pre-save transform to work (bug 53692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (bug 54243)\n\t\t\tmobileformat: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\t\tthis._pending = this.api.post( options );\n\n\t\treturn this._pending.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// section 0 haven't a section name so skip\n\t\t\t\tif ( self.sectionId !== 0 &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn util.Deferred().reject();\n\t\t\t}\n\t\t} ).promise( {\n\t\t\tabort: function () { self._pending.abort(); }\n\t\t} );\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tparseBlockInfo = require( './parseBlockInfo' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tblockMessageDrawer = require( './blockMessageDrawer' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @params {Object} [params.editorOptions] falls back to wgMFEditorOptions if undefined\n * @param {number|null} params.editCount of user\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\t// FIXME: Pass this in via options rather than accessing mw.config\n\tthis.config = params.editorOptions || mw.config.get( 'wgMFEditorOptions' );\n\tthis.sessionId = options.sessionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<h2 class=\"summary-request\">{{{summaryRequestMsg}}}</h2>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<div class=\"license\">{{{licenseMsg}}}</div>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'mf.schemaEditAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'mf.schemaVisualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Handles reloading the page, showing toast\n\t * messages.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number} newRevId ID of the newly created revision\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tvar msg,\n\t\t\t$window = util.getWindow(),\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\t\ttoast.showOnPageReload( msg, { type: 'success' } );\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tif ( self.sectionId ) {\n\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t} else {\n\t\t\t// Cancel the hash fragment\n\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t// and may conflict with the window.reload call below.\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#';\n\t\t}\n\n\t\t$window.off( 'beforeunload.mfeditorwarning' );\n\n\t\t// Note the \"#\" may be in the URL.\n\t\t// If so, using window.location alone will not reload the page\n\t\t// we need to forcefully refresh\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.location.reload();\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar key = data && data.details && data.details.code,\n\t\t\ttypeMap = {\n\t\t\t\teditconflict: 'editConflict',\n\t\t\t\twasdeleted: 'editPageDeleted',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\tspamprotectiontext: 'extensionSpamBlacklist',\n\t\t\t\t'titleblacklist-forbidden-edit': 'extensionTitleBlacklist'\n\t\t\t};\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tkey = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: saveFailureMessage( data ),\n\t\t\ttype: typeMap[key] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text of message to display to user\n\t * @param {string} heading heading text to display to user\n\t */\n\treportError: function ( text, heading ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'errorbox',\n\t\t\tmsg: text,\n\t\t\theading: heading\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew Button( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\tlabel: this.config.skipPreview ?\n\t\t\t\t\t\t\tutil.saveButtonMessage() :\n\t\t\t\t\t\t\toptions.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\t// decide what happens, when the user clicks the continue button\n\t\tif ( this.config.skipPreview ) {\n\t\t\t// skip the preview and save the changes\n\t\t\tthis.nextStep = 'onSaveBegin';\n\t\t} else {\n\t\t\t// default: show the preview step\n\t\t\tthis.nextStep = 'onStageChanges';\n\t\t}\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis[this.nextStep]();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar windowManager,\n\t\t\tself = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\twindowManager = OO.ui.getWindowManager();\n\t\t\twindowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\twindowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.allowCloseWindow.release();\n\t\t\t\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.allowCloseWindow.release();\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\texit();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'warningbox anon-msg',\n\t\t\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\treturnto: options.returnTo || mw.config.get( 'wgPageName' ),\n\t\t\t\treturntoquery: 'action=edit&section=' + options.sectionId,\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tcurrentPageHTMLParser: this.options.currentPageHTMLParser,\n\t\t\tfakeScroll: this.options.fakeScroll,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\teditCount: this.options.editCount,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsessionId: this.options.sessionId,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Get a promise that is resolved when the editor data has loaded,\n\t * or rejected when we're refusing to load the editor because the user is blocked.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetLoadingPromise: function () {\n\t\treturn this.dataPromise.then( function ( result ) {\n\t\t\t// check if user is blocked\n\t\t\tif ( result && result.blockinfo ) {\n\t\t\t\t// Lazy-load moment only if it's needed, it's somewhat large (it is already used on\n\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\treturn mw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\tvar block = parseBlockInfo( result.blockinfo ),\n\t\t\t\t\t\tmessage = blockMessageDrawer( block );\n\t\t\t\t\treturn util.Deferred().reject( message );\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn result;\n\t\t} );\n\t},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tAbuseFilterPanel = require( './AbuseFilterPanel' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n/**\n * Overlay that shows an editor\n * @class SourceEditorOverlay\n * @uses Section\n * @uses AbuseFilterPanel\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {Object} [options.visualEditorConfig] falls back to wgVisualEditorConfig if not defined\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.visualEditorConfig = options.visualEditorConfig ||\n\t\tmw.config.get( 'wgVisualEditorConfig' ) || {};\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage,\n\t\tfromModified: !!dataPromise\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise || this.gateway.getContent();\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container content\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\t\t// Ensure we do this after showing the overlay, otherwise it doesn't work.\n\t\tthis._resizeEditor();\n\t},\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar config = this.visualEditorConfig,\n\t\t\tns = config.namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this,\n\t\t\tconfig = this.visualEditorConfig,\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar, windowManager, switchWindow,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tcanSwitch = config.fullRestbaseUrl || config.allowLossySwitching;\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else if ( canSwitch ) {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindowManager = new OO.ui.WindowManager();\n\t\t\t\t\t\t\tswitchWindow = new mw.libs.ve.SwitchConfirmDialog();\n\t\t\t\t\t\t\twindowManager.$element.appendTo( document.body );\n\t\t\t\t\t\t\twindowManager.addWindows( [ switchWindow ] );\n\t\t\t\t\t\t\twindowManager.openWindow( switchWindow, { mode: 'simple' } )\n\t\t\t\t\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twindowManager.destroy();\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\t// This spinner is still used when displaying save/preview panel\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner().$el );\n\t\tthis.hideSpinner();\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( showAnonWarning ) {\n\t\t\tthis.$anonWarning = this.createAnonWarning( options );\n\t\t\tthis.$el.find( '.editor-container' ).append( this.$anonWarning );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$el.find( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\tthis.abuseFilterPanel = new AbuseFilterPanel( {\n\t\t\toverlayManager: this.overlayManager\n\t\t} ).appendTo( this.$el.find( '.panels' ) );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content\n\t\t\t.on( 'input', this._resizeEditor.bind( this ) )\n\t\t\t.one( 'input', function () {\n\t\t\t\tself.log( { action: 'firstChange' } );\n\t\t\t} );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.$anonWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass( 'errorbox' ).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass( 'errorbox' ).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.abuseFilterPanel.hide();\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\t// exiting early for firefox due to a bug that causes the page to scroll to top\n\t\t// whenever a caret is inserted T214880\n\t\tif ( this.isFirefox ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this;\n\n\t\tthis.$content.hide();\n\n\t\tthis.getLoadingPromise()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar content = result.text;\n\n\t\t\t\tself.setContent( content );\n\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tmw.storage.set( 'preferredEditor', 'VisualEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.$content.prop( 'readonly', true );\n\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar newOverlay, options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tnewOverlay = new VisualEditorOverlay( options );\n\t\t\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\t\t\tself.switching = true;\n\t\t\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\t\t\tself.switching = false;\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.$el.removeClass( 'switching' );\n\t\t\t\tself.$el.find( '.overlay-header-container' ).show();\n\t\t\t\tself.$el.find( '.ve-mobile-fakeToolbar-container' ).remove();\n\t\t\t\tself.$content.prop( 'readonly', false );\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Reveals an abuse filter panel inside the view.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\t_showAbuseFilter: function ( type, message ) {\n\t\tthis.abuseFilterPanel.show( type, message );\n\t\tthis.showHidden( '.save-header' );\n\t\t// disable continue and save buttons, reenabled when user changes content\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', this.abuseFilterPanel.isDisallowed );\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar heading, msg;\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tthis.captchaId = data.details.id;\n\t\t\tthis.handleCaptcha( data.details );\n\t\t} else if ( data.type === 'abusefilter' ) {\n\t\t\tthis._showAbuseFilter( data.details.type, data.details.message );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tif ( data.type === 'readonly' ) {\n\t\t\t\theading = mw.msg( 'apierror-readonly' );\n\t\t\t}\n\n\t\t\tif ( msg || heading ) {\n\t\t\t\tthis.reportError( msg, heading );\n\t\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve, $ */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tidentifyLeadParagraph = require( './identifyLeadParagraph' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Overlay for VisualEditor view\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tvar surfaceReady = util.Deferred();\n\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n\n\tthis.origDataPromise = this.options.dataPromise || mw.libs.ve.targetLoader.requestPageData(\n\t\t'visual',\n\t\toptions.titleObj.getPrefixedDb(),\n\t\t{\n\t\t\tsessionStore: true,\n\t\t\tsection: options.sectionId || null,\n\t\t\toldId: options.oldId || undefined,\n\t\t\ttargetName: ve.init.mw.MobileArticleTarget.static.trackingName\n\t\t}\n\t);\n\n\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t$element: this.$el,\n\t\tsection: this.options.sectionId\n\t} );\n\tthis.target.once( 'surfaceReady', function () {\n\t\tsurfaceReady.resolve();\n\n\t\tthis.target.getSurface().getModel().getDocument().once( 'transact', function () {\n\t\t\tthis.log( { action: 'firstChange' } );\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n\n\tthis.target.load( this.origDataPromise );\n\n\t// Overlay is only shown after this is resolved. It must be resolved\n\t// with the API response regardless of what we are waiting for.\n\tthis.dataPromise = this.origDataPromise.then( function ( data ) {\n\t\treturn surfaceReady.then( function () {\n\t\t\treturn data && data.visualeditor;\n\t\t} );\n\t} );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\tthis.emit( 'editor-loaded' );\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis.redoTargetInit();\n\t\t} else {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$el.append( this.$anonWarning );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t}\n\t},\n\t/**\n\t * Re-do some initialization steps that might have happened while the overlay\n\t * was hidden, but only work correctly after it is shown.\n\t */\n\tredoTargetInit: function () {\n\t\tthis.target.adjustContentPadding();\n\t\tthis.target.restoreEditSection();\n\t\tthis.scrollToLeadParagraph();\n\t},\n\t/**\n\t * Scroll so that the lead paragraph in edit mode shows at the same place on the screen\n\t * as the lead paragraph in read mode.\n\t *\n\t * Their normal position is different because of (most importantly) the lead paragraph\n\t * transformation to move it before the infobox, and also invisible templates and slugs\n\t * caused by the presence of hatnote templates (both only shown in edit mode).\n\t */\n\tscrollToLeadParagraph: function () {\n\t\tvar editLead, editLeadView, readLead, offset,\n\t\t\tcurrentPageHTMLParser = this.options.currentPageHTMLParser,\n\t\t\tfakeScroll = this.options.fakeScroll,\n\t\t\t$window = $( window ),\n\t\t\tsection = this.target.section,\n\t\t\tsurface = this.target.getSurface(),\n\t\t\tmode = surface.getMode();\n\n\t\tif ( ( section === null || section === 0 ) && mode === 'visual' ) {\n\t\t\teditLead = identifyLeadParagraph( surface.getView().$attachedRootNode );\n\t\t\tif ( currentPageHTMLParser.getLeadSectionElement() ) {\n\t\t\t\treadLead = identifyLeadParagraph( currentPageHTMLParser.getLeadSectionElement() );\n\t\t\t}\n\n\t\t\tif ( editLead && readLead ) {\n\t\t\t\toffset = $( editLead ).offset().top - ( $( readLead ).offset().top - fakeScroll );\n\t\t\t\t$window.scrollTop( $window.scrollTop() + offset );\n\t\t\t\t// Set a model range to match\n\t\t\t\teditLeadView = $( editLead ).data( 'view' );\n\t\t\t\tif ( editLeadView ) {\n\t\t\t\t\tsurface.getModel().setLinearSelection(\n\t\t\t\t\t\tnew ve.Range( editLeadView.getModel().getRange().start )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tself.$el.find( '.overlay-content' ).show();\n\t\tthis.redoTargetInit();\n\t},\n\t/**\n\t * Reveal the editing interface.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\tnewOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tmw.storage.set( 'preferredEditor', 'SourceEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.target.getSurface().setReadOnly( true );\n\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tnewOverlay = new SourceEditorOverlay( options, dataPromise );\n\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\tself.switching = true;\n\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\tself.switching = false;\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\t\tthis.destroyTarget();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","var Drawer = require( '../mobile.startup/Drawer' ),\n\tBlockMessageDetails = require( './BlockMessageDetails' ),\n\tIcon = require( '../mobile.startup/Icon' );\n/**\n * @typedef {Object} BlockMessageOptions\n * @property {number} blockId representing the block\n * @property {boolean} partial is this a partial block?\n * @property {Object} creator\n * @property {string} creator.name of the blocker\n * @property {string} creator.url associated with the block\n * @property {string} reason for block\n * @property {string} [duration] of block\n * @property {string} [expiry] of block\n */\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n * @param {BlockMessageOptions} props\n * @return {Drawer}\n */\nmodule.exports = function blockMessageDrawer( props ) {\n\treturn new Drawer( {\n\t\tclassName: 'drawer block-message',\n\t\tchildren: [\n\t\t\t( new Icon( {\n\t\t\t\tname: 'stop-hand',\n\t\t\t\tadditionalClassNames: 'block-message-icon'\n\t\t\t} ) ).$el,\n\t\t\t( new BlockMessageDetails( props ) ).$el\n\t\t]\n\t} );\n};\n","/* global $ */\n/**\n * Find first paragraph that has text content, i.e. paragraphs that are not empty.\n * Keep in sync with MoveLeadParagraphTransform::identifyLeadParagraph().\n *\n * @param {jQuery} $body Where to search for paragraphs\n * @return {Node|null} The lead paragraph\n */\nmodule.exports = function identifyLeadParagraph( $body ) {\n\tvar $paragraphs, i, node;\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNotEmptyNode()\n\tfunction isNotEmptyNode( node ) {\n\t\treturn /\\S/.test( node.textContent );\n\t}\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNonLeadParagraph()\n\tfunction isNonLeadParagraph( node ) {\n\t\tvar $coords;\n\t\tif ( isNotEmptyNode( node ) ) {\n\t\t\t$coords = $( node ).find( 'span#coordinates' );\n\t\t\tif ( !$coords.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ( node.textContent ) {\n\t\t\t\treturn node.textContent === $coords[ 0 ].textContent;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t$paragraphs = $body.children( 'p' );\n\tfor ( i = 0; i < $paragraphs.length; i++ ) {\n\t\tnode = $paragraphs[ i ];\n\t\tif ( !isNonLeadParagraph( node ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\treturn null;\n};\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tschemaEditAttemptStep = require( './schemaEditAttemptStep' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n// setup schema:edit logging\nschemaEditAttemptStep();\n","/**\n * @param {string} blockinfo\n * @return {Object}\n */\nmodule.exports = function parseBlockInfo( blockinfo ) {\n\tvar blockInfo, expiry, reason,\n\t\tmoment = window.moment;\n\n\t// Workaround to parse a message parameter for mw.message, see T96885\n\tfunction jqueryMsgParse( wikitext ) {\n\t\tvar parser, ast;\n\t\t// eslint-disable-next-line new-cap\n\t\tparser = new mw.jqueryMsg.parser();\n\t\ttry {\n\t\t\tast = parser.wikiTextToAst( wikitext );\n\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t} catch ( e ) {\n\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t// can't parse templates.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tblockInfo = {\n\t\tpartial: blockinfo.blockpartial || false,\n\t\tcreator: {\n\t\t\tname: blockinfo.blockedby,\n\t\t\turl: mw.Title.makeTitle(\n\t\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\t\tblockinfo.blockedby\n\t\t\t).getUrl()\n\t\t},\n\t\texpiry: null,\n\t\tduration: null,\n\t\treason: '',\n\t\tblockId: blockinfo.blockid\n\t};\n\n\texpiry = blockinfo.blockexpiry;\n\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( expiry ) === -1 ) {\n\t\tblockInfo.expiry = moment( expiry ).format( 'LLL' );\n\t\tblockInfo.duration = moment().to( expiry, true );\n\t}\n\n\treason = blockinfo.blockreason;\n\tif ( reason ) {\n\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t} else {\n\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t}\n\n\treturn blockInfo;\n};\n","/**\n * Build a save failure message from the API response\n * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n * @return {string} message describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\tvar key = data && data.details && data.details.code,\n\t\t// When save failed with one of these error codes, the returned\n\t\t// message in response.error.info will be forwarded to the user.\n\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\twhitelistedErrorInfo = [\n\t\t\t'blocked',\n\t\t\t'autoblocked'\n\t\t];\n\tif ( data.type === 'readonly' ) {\n\t\treturn data.details.readonlyreason;\n\t}\n\tif ( key === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t} else if ( whitelistedErrorInfo.indexOf( key ) > -1 ) {\n\t\treturn data.error.info;\n\t}\n\treturn mw.msg( 'mobile-frontend-editor-error' );\n};\n","module.exports = function () {\n\tvar trackdebug = !!mw.util.getParamValue( 'trackdebug' );\n\n\tif ( !mw.config.exists( 'wgWMESchemaEditAttemptStepSamplingRate' ) ) {\n\t\treturn;\n\t}\n\n\tmw.loader.using( [ 'ext.eventLogging' ] ).then( function () {\n\t\tvar // Schema class is provided by ext.eventLogging\n\t\t\tSchema = mw.eventLog.Schema,\n\t\t\tuser = mw.user,\n\t\t\tsampleRate = mw.config.get( 'wgWMESchemaEditAttemptStepSamplingRate' ),\n\t\t\tactionPrefixMap = {\n\t\t\t\tfirstChange: 'first_change',\n\t\t\t\tsaveIntent: 'save_intent',\n\t\t\t\tsaveAttempt: 'save_attempt',\n\t\t\t\tsaveSuccess: 'save_success',\n\t\t\t\tsaveFailure: 'save_failure'\n\t\t\t},\n\t\t\ttiming = {},\n\t\t\t/**\n\t\t\t * Edit schema\n\t\t\t * https://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t\t\t */\n\t\t\t/* eslint-disable camelcase */\n\t\t\tschemaEditAttemptStep = new Schema(\n\t\t\t\t'EditAttemptStep',\n\t\t\t\tsampleRate,\n\t\t\t\t{\n\t\t\t\t\tpage_id: mw.config.get( 'wgArticleId' ),\n\t\t\t\t\trevision_id: mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\tpage_title: mw.config.get( 'wgPageName' ),\n\t\t\t\t\tpage_ns: mw.config.get( 'wgNamespaceNumber' ),\n\t\t\t\t\tuser_id: user.getId(),\n\t\t\t\t\tuser_class: user.isAnon() ? 'IP' : undefined,\n\t\t\t\t\tuser_editcount: mw.config.get( 'wgUserEditCount', 0 ),\n\t\t\t\t\tmw_version: mw.config.get( 'wgVersion' ),\n\t\t\t\t\tplatform: 'phone',\n\t\t\t\t\tintegration: 'page',\n\t\t\t\t\tpage_token: user.getPageviewToken(),\n\t\t\t\t\tsession_token: user.sessionId(),\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t);\n\t\t\t/* eslint-enable camelcase */\n\n\t\tif ( mw.config.get( 'wgMFSchemaEditAttemptStepAnonymousUserId' ) ) {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tschemaEditAttemptStep.defaults.anonymous_user_token = mw.config.get( 'wgMFSchemaEditAttemptStepAnonymousUserId' );\n\t\t}\n\t\tif ( mw.config.get( 'wgMFSchemaEditAttemptStepBucket' ) ) {\n\t\t\tschemaEditAttemptStep.defaults.bucket = mw.config.get( 'wgMFSchemaEditAttemptStepBucket' );\n\t\t}\n\n\t\tfunction log() {\n\t\t\t// mw.log is a no-op unless resource loader is in debug mode, so\n\t\t\t// this allows trackdebug to work independently (T211698)\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply( console, arguments );\n\t\t}\n\n\t\tfunction computeDuration( action, event, timeStamp ) {\n\t\t\t// This is duplicated from the VisualEditor extension\n\t\t\t// (ve.init.mw.trackSubscriber.js). Changes to this should be kept in\n\t\t\t// sync with that file, so the data remains consistent.\n\t\t\tif ( event.timing !== undefined ) {\n\t\t\t\treturn event.timing;\n\t\t\t}\n\n\t\t\tswitch ( action ) {\n\t\t\t\tcase 'ready':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'loaded':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'firstChange':\n\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\tcase 'saveIntent':\n\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\tcase 'saveAttempt':\n\t\t\t\t\treturn timeStamp - timing.saveIntent;\n\t\t\t\tcase 'saveSuccess':\n\t\t\t\tcase 'saveFailure':\n\t\t\t\t\t// HERE BE DRAGONS: the caller must compute these themselves\n\t\t\t\t\t// for sensible results. Deliberately sabotage any attempts to\n\t\t\t\t\t// use the default by returning -1\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Do not rely on default timing value for saveSuccess/saveFailure' );\n\t\t\t\t\treturn -1;\n\t\t\t\tcase 'abort':\n\t\t\t\t\tswitch ( event.abort_type ) {\n\t\t\t\t\t\tcase 'preinit':\n\t\t\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\t\t\tcase 'nochange':\n\t\t\t\t\t\tcase 'switchwith':\n\t\t\t\t\t\tcase 'switchwithout':\n\t\t\t\t\t\tcase 'switchnochange':\n\t\t\t\t\t\tcase 'abandon':\n\t\t\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\t\t\tcase 'abandonMidsave':\n\t\t\t\t\t\t\treturn timeStamp - timing.saveAttempt;\n\t\t\t\t\t}\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized abort type', event.type );\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized action', action );\n\t\t\treturn -1;\n\t\t}\n\n\t\tmw.trackSubscribe( 'mf.schemaEditAttemptStep', function ( topic, data, timeStamp ) {\n\t\t\tvar actionPrefix = actionPrefixMap[ data.action ] || data.action,\n\t\t\t\tduration = 0;\n\n\t\t\ttimeStamp = timeStamp || this.timeStamp; // I8e82acc12 back-compat\n\n\t\t\t// Schema's kind of a mess of special properties\n\t\t\tif ( data.action === 'init' || data.action === 'abort' || data.action === 'saveFailure' ) {\n\t\t\t\tdata[ actionPrefix + '_type' ] = data.type;\n\t\t\t}\n\t\t\tif ( data.action === 'init' || data.action === 'abort' ) {\n\t\t\t\tdata[ actionPrefix + '_mechanism' ] = data.mechanism;\n\t\t\t}\n\t\t\tif ( data.action !== 'init' ) {\n\t\t\t\t// Schema actually does have an init_timing field, but we don't want to\n\t\t\t\t// store it because it's not meaningful.\n\t\t\t\tduration = Math.round( computeDuration( data.action, data, timeStamp ) );\n\t\t\t\tdata[ actionPrefix + '_timing' ] = duration;\n\t\t\t}\n\t\t\tif ( data.action === 'saveFailure' ) {\n\t\t\t\tdata[ actionPrefix + '_message' ] = data.message;\n\t\t\t}\n\n\t\t\t// Remove renamed properties\n\t\t\tdelete data.type;\n\t\t\tdelete data.mechanism;\n\t\t\tdelete data.timing;\n\t\t\tdelete data.message;\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tdata.is_oversample =\n\t\t\t\t!mw.eventLog.inSample( 1 / sampleRate );\n\n\t\t\tif ( data.action === 'abort' && data.abort_type !== 'switchnochange' ) {\n\t\t\t\ttiming = {};\n\t\t\t} else {\n\t\t\t\ttiming[ data.action ] = timeStamp;\n\t\t\t}\n\n\t\t\t// Switching between visual and source produces a chain of\n\t\t\t// abort/ready/loaded events and no init event, so suppress them for\n\t\t\t// consistency with desktop VE's logging.\n\t\t\tif ( data.abort_type === 'switchnochange' ) {\n\t\t\t\t// The initial abort, flagged as a switch\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( timing.abort ) {\n\t\t\t\t// An abort was previously logged\n\t\t\t\tif ( data.action === 'ready' ) {\n\t\t\t\t\t// Just discard the ready\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( data.action === 'loaded' ) {\n\t\t\t\t\t// Switch has finished; remove the abort timing so we stop discarding events.\n\t\t\t\t\tdelete timing.abort;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( trackdebug ) {\n\t\t\t\tlog( topic + '.' + data.action, duration + 'ms', data, schemaEditAttemptStep.defaults );\n\t\t\t} else {\n\t\t\t\tschemaEditAttemptStep.log( data, (\n\t\t\t\t\tmw.config.get( 'wgWMESchemaEditAttemptStepOversample' ) ||\n\t\t\t\t\tmw.config.get( 'wgMFSchemaEditAttemptStepOversample' ) === 'all' ||\n\t\t\t\t\t// wikitext / visualeditor\n\t\t\t\t\tdata.editor_interface === mw.config.get( 'wgMFSchemaEditAttemptStepOversample' )\n\t\t\t\t) ? 1 : sampleRate );\n\t\t\t}\n\t\t} );\n\n\t} );\n};\n"],"sourceRoot":""}