{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessageDetails.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/blockMessageDrawer.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/identifyLeadParagraph.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/parseBlockInfo.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js"],"names":["Button","require","View","Icon","util","BlockMessageDetails","config","progressive","mw","user","isAnon","this","options","anonOnly","label","msg","href","Title","getUrl","partial","quiet","tagName","additionalClassNames","$el","find","prepend","getButtonConfig","name","createDetailsAnchorHref","blockId","render","wpTarget","createDetailsAnchorLabel","createTitle","msgKey","createBody","noCreateAccount","seeMoreLink","reasonHeader","creatorHeader","get","expiryHeader","template","module","exports","actionParams","EditorGateway","api","title","sectionId","oldId","content","isNewPage","undefined","fromModified","hasChanged","prototype","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","getContent","self","resolve","Deferred","text","prop","rvprop","titles","intestactions","intestactionsdetail","rvstartid","rvsection","then","resp","revision","reject","query","pages","missing","revisions","timestamp","originalContent","setContent","setPrependText","prependtext","save","apiOptions","result","action","errorformat","errorlang","errorsuselocal","formatversion","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","abortPreview","_pending","abort","getPreview","sectionLine","extend","sectionpreview","disableeditsection","pst","mobileformat","post","parse","sections","anchor","line","id","promise","Overlay","parseBlockInfo","headers","PageGateway","icons","toast","saveFailureMessage","mfExtend","blockMessageDrawer","MessageBox","mwUser","EditVeTool","toolGroup","classes","super","call","EditorOverlayBase","params","onBeforeExit","bind","className","isBorderBox","events","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","sessionId","overlayManager","OO","inheritClass","ui","Tool","static","icon","group","onSelect","onUpdateState","defaults","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","track","editor_interface","editor","editing_session_id","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","$window","getWindow","saved","invalidatePage","hook","fire","showOnPageReload","type","revision_id","location","hash","off","reload","onSaveFailure","key","errors","captcha","message","editconflict","wasdeleted","spamprotectiontext","reportError","errorNotice","heading","$errorNoticeContainer","html","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","editSwitcher","editingMsg","readOnly","disabled","cancel","saveHeader","previewingMsg","savingHeader","postRender","apply","show","allowCloseWindow","confirmCloseWindow","test","namespace","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","windowManager","switching","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","release","target","edited","createAnonWarning","$actions","$","addClass","$anonWarning","append","returnto","returnTo","returntoquery","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","map","getOptionsForSwitch","switched","currentPageHTMLParser","fakeScroll","titleObj","contentLang","contentDir","getLoadingPromise","dataPromise","loader","using","handleCaptcha","details","$input","captchaShown","val","attr","setTimeout","mime","detach","url","question","Section","fakeToolbar","VisualEditorOverlay","SourceEditorOverlay","isFirefox","navigator","userAgent","visualEditorConfig","gateway","isVisualEditorEnabled","templatePartials","arguments","_resizeEditor","ns","namespaces","onInputWikitextEditor","_hidePreview","showAnonWarning","switchToolbar","switchWindow","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","canSwitch","fullRestbaseUrl","allowLossySwitching","_switchToVisualEditor","WindowManager","SwitchConfirmDialog","$element","appendTo","document","body","destroy","setup","include","emit","spinner","hideSpinner","$preview","$content","hide","$anonHiddenButtons","one","docEl","documentElement","scrollTop","blockScroll","addEventListener","removeEventListener","_loadContent","hideSpinnerAndShowPreview","getDocument","showSpinner","mainpage","parsedText","parsedSectionLine","parseHTML","el","removeClass","container","$scrollContainer","Element","getClosestScrollableContainer","length","css","height","wikitext","feature","storage","set","targetLoader","addPlugin","loadModules","newOverlay","requestPageData","targetName","modified","replaceCurrent","remove","router","identifyLeadParagraph","surfaceReady","origDataPromise","getPrefixedDb","sessionStore","init","MobileArticleTarget","trackingName","targetFactory","create","once","getSurface","getModel","load","visualeditor","editHeader","destroyTarget","redoTargetInit","adjustContentPadding","restoreEditSection","scrollToLeadParagraph","editLead","editLeadView","readLead","offset","initialCursorOffset","surface","getMode","getView","$attachedRootNode","getLeadSectionElement","top","setLinearSelection","Range","getRange","start","getSelection","getSelectionBoundingRect","padding","overlay","switchToEditor","switchToSourceEditor","setReadOnly","navigateTo","path","useReplaceState","hasBeenModified","Drawer","props","blockDrawer","onBeforeHide","drawer","onShow","$drawer","drawerTop","creatorTop","buttonsTop","$seeMore","$container","children","$body","$paragraphs","i","node","isNonLeadParagraph","$coords","cloneNode","textContent","isNotEmptyNode","m","define","blockInfo","expiry","reason","expiryInSeconds","moment","blockpartial","blocknocreate","blockanononly","creator","blockedby","duration","blockid","blockedbyid","makeTitle","blockexpiry","diff","format","escaped","to","blockreason","parser","ast","jqueryMsg","wikiTextToAst","emitter","e","jqueryMsgParse","escape","readonlyreason"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["'use strict';\nvar Button = require( '../mobile.startup/Button' ),\n\tView = require( '../mobile.startup/View' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * @extends View\n */\nclass BlockMessageDetails extends View {\n\t/** @inheritdoc */\n\tget isTemplateMode() {\n\t\treturn true;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget defaults() {\n\t\treturn {\n\t\t\tcreateDetailsAnchorHref: function () {\n\t\t\t\treturn function ( blockId, render ) {\n\t\t\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + render( blockId ) } );\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateDetailsAnchorLabel: function () {\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t\t},\n\t\t\tcreateTitle: function () {\n\t\t\t\tvar msgKey = 'mobile-frontend-editor-blocked-drawer-title';\n\t\t\t\tif ( mw.user.isAnon() ) {\n\t\t\t\t\tmsgKey += '-ip';\n\t\t\t\t}\n\t\t\t\tif ( this.partial ) {\n\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip-partial\n\t\t\t\treturn mw.msg( msgKey );\n\t\t\t},\n\t\t\tcreateBody: function () {\n\t\t\t\tvar msgKey = '';\n\t\t\t\tif ( mw.user.isAnon() && this.anonOnly ) {\n\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body';\n\t\t\t\t\tif ( this.noCreateAccount ) {\n\t\t\t\t\t\tmsgKey += '-login';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgKey += '-login-createaccount';\n\t\t\t\t\t}\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body-partial';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount-partial\n\t\t\t\treturn msgKey ? mw.msg( msgKey ) : msgKey;\n\t\t\t},\n\t\t\tseeMoreLink: mw.msg( 'mobile-frontend-editor-blocked-drawer-body-link' ),\n\t\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\t\tcreatorHeader: function () {\n\t\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t\t},\n\t\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t\t};\n\t}\n\t/**\n\t * Configure the call to action depending on the type of block.\n\t *\n\t * @return {Object} Configuration options\n\t */\n\tgetButtonConfig() {\n\t\tconst config = {\n\t\t\tprogressive: true\n\t\t};\n\t\tif ( mw.user.isAnon() && this.options.anonOnly ) {\n\t\t\t// The user can avoid the block by logging in\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-login' );\n\t\t\tconfig.href = new mw.Title( 'Special:UserLogin' ).getUrl();\n\t\t} else if ( this.options.partial ) {\n\t\t\t// The user can avoid the block by editing a different page\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-randompage' );\n\t\t\tconfig.href = new mw.Title( 'Special:Random' ).getUrl();\n\t\t\tconfig.quiet = true;\n\t\t} else {\n\t\t\t// The user cannot avoid the block\n\t\t\tconfig.tagName = 'button';\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-ok' );\n\t\t\tconfig.additionalClassNames = 'cancel';\n\t\t}\n\t\treturn config;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender() {\n\t\tthis.$el.find( '.block-message-buttons' ).prepend(\n\t\t\tnew Button( this.getButtonConfig() ).$el\n\t\t);\n\t\tthis.$el.find( '.block-message-icon' ).prepend(\n\t\t\t( new Icon( {\n\t\t\t\tname: 'block-destructive',\n\t\t\t\tadditionalClassNames: 'mw-ui-icon-flush-top'\n\t\t\t} ) ).$el\n\t\t);\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget template() {\n\t\treturn util.template( `\n<div class=\"block-message block-message-container\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      <div class=\"block-message-item\">\n        <p>\n          {{ createBody }}\n          <a class =\"block-message-see-more\" href=\"#\">{{ seeMoreLink }}</a>\n        </p>\n      </div>\n      <div class=\"block-message-item block-message-creator\">\n        {{#creator.name}}\n          <p>\n            {{ creatorHeader }}\n            <strong>\n              {{#creator.url}}\n                <a href=\"{{ creator.url }}\">{{ creator.name }}</a>\n              {{/creator.url}}\n              {{^creator.url}}\n                {{ creator.name }}\n              {{/creator.url}}\n            </strong>\n          </p>\n        {{/creator.name}}\n      </div>\n      <div class=\"block-message-item\">\n        <p>\n          {{ expiryHeader }}\n          <strong>{{#duration}}{{ duration }}{{/duration}}</strong>\n        </p>\n      </div>\n      {{#blockId}}\n        <div class=\"block-message-item\">\n          <a href=\"{{#createDetailsAnchorHref}}{{ blockId }}{{/createDetailsAnchorHref}}\">\n            {{ createDetailsAnchorLabel }}\n          </a>\n        </div>\n      {{/blockId}}\n    </div>\n  </div>\n  {{#reason}}\n    <div class=\"block-message-item block-message-reason\">\n      <h5>{{ reasonHeader }}</h5>\n      <div><p>{{{ reason }}}</p></div>\n    </div>\n  {{/reason}}\n  <div class=\"block-message-buttons\">\n  </div>\n</div>` );\n\t}\n}\n\nmodule.exports = BlockMessageDetails;\n","var util = require( '../mobile.startup/util' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n *\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {string|null} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\t// return an empty section for new pages\n\tthis.content = options.isNewPage ? '' : undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t *\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See Bug 50136 - passing rvsection will fail with non wikitext\n\t\t\tif ( this.sectionId ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tself.content = '';\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Mark content as modified and set text that should be prepended to given\n\t * section when #save is invoked.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} text Text to be prepended.\n\t */\n\tsetPrependText: function ( text ) {\n\t\tthis.prependtext = text;\n\t\tthis.hasChanged = true;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t *\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\terrorformat: 'html',\n\t\t\t\terrorlang: mw.config.get( 'wgUserLanguage' ),\n\t\t\t\terrorsuselocal: 1,\n\t\t\t\tformatversion: 2,\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t} else if ( self.prependtext ) {\n\t\t\t\tapiOptions.prependtext = self.prependtext;\n\t\t\t}\n\n\t\t\tif ( self.sectionId ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( data );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( data );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (bug 49218)\n\t\t\tsectionpreview: true,\n\t\t\t// Hide section edit links\n\t\t\tdisableeditsection: true,\n\t\t\t// needed for pre-save transform to work (bug 53692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (bug 54243)\n\t\t\tmobileformat: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\t\tthis._pending = this.api.post( options );\n\n\t\treturn this._pending.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// When editing section 0 or the whole page, there is no section name, so skip\n\t\t\t\tif ( self.sectionId && self.sectionId !== '0' &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn util.Deferred().reject();\n\t\t\t}\n\t\t} ).promise( {\n\t\t\tabort: function () { self._pending.abort(); }\n\t\t} );\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tparseBlockInfo = require( './parseBlockInfo' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\ttoast = require( '../mobile.startup/showOnPageReload' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tblockMessageDrawer = require( './blockMessageDrawer' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n *\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n *\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {number|null} params.editCount of user\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\tthis.sessionId = options.sessionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<h2 class=\"summary-request\">{{{summaryRequestMsg}}}</h2>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<div class=\"license\">{{{licenseMsg}}}</div>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'mf.schemaEditAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'mf.schemaVisualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Handles reloading the page, showing toast\n\t * messages.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number} newRevId ID of the newly created revision\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tvar msg,\n\t\t\t$window = util.getWindow(),\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\t\t/**\n\t\t * Fired after an edit was successfully saved, like postEdit in MediaWiki core.\n\t\t *\n\t\t * @event postEditMobile\n\t\t * @member mw.hook\n\t\t */\n\t\tmw.hook( 'postEditMobile' ).fire();\n\n\t\tif ( !mw.config.get( 'wgPostEditConfirmationDisabled' ) ) {\n\t\t\ttoast.showOnPageReload( msg, { type: 'success' } );\n\t\t}\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tif ( self.sectionId ) {\n\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t} else {\n\t\t\t// Cancel the hash fragment\n\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t// and may conflict with the window.reload call below.\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#';\n\t\t}\n\n\t\t$window.off( 'beforeunload.mfeditorwarning' );\n\n\t\t// Note the \"#\" may be in the URL.\n\t\t// If so, using window.location alone will not reload the page\n\t\t// we need to forcefully refresh\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.location.reload();\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data API response\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar key = data && data.errors && data.errors[0] && data.errors[0].code,\n\t\t\t// TODO: This looks incomplete and most of the error codes are wrong.\n\t\t\t// Compare to ve.init.mw.ArticleTargetEvents.js in VisualEditor.\n\t\t\ttypeMap = {\n\t\t\t\teditconflict: 'editConflict',\n\t\t\t\twasdeleted: 'editPageDeleted',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\tspamprotectiontext: 'extensionSpamBlacklist',\n\t\t\t\t'titleblacklist-forbidden-edit': 'extensionTitleBlacklist'\n\t\t\t};\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tkey = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: saveFailureMessage( data ),\n\t\t\ttype: typeMap[key] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text (HTML) of message to display to user\n\t */\n\treportError: function ( text ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'errorbox',\n\t\t\tmsg: text,\n\t\t\theading: mw.msg( 'mobile-frontend-editor-error' )\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.hideErrorNotice();\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew Icon( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\tname: 'next-invert',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\ttitle: options.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis.onStageChanges();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar windowManager,\n\t\t\tself = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\twindowManager = OO.ui.getWindowManager();\n\t\t\twindowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\twindowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.allowCloseWindow.release();\n\t\t\t\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.allowCloseWindow.release();\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\texit();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'warningbox anon-msg',\n\t\t\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\treturnto: options.returnTo || mw.config.get( 'wgPageName' ),\n\t\t\t\treturntoquery: 'action=edit&section=' + options.sectionId,\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tcurrentPageHTMLParser: this.options.currentPageHTMLParser,\n\t\t\tfakeScroll: this.options.fakeScroll,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\teditCount: this.options.editCount,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsessionId: this.options.sessionId,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Get a promise that is resolved when the editor data has loaded,\n\t * or rejected when we're refusing to load the editor because the user is blocked.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetLoadingPromise: function () {\n\t\treturn this.dataPromise.then( function ( result ) {\n\t\t\t// check if user is blocked\n\t\t\tif ( result && result.blockinfo ) {\n\t\t\t\t// Lazy-load moment only if it's needed, it's somewhat large (it is already used on\n\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\treturn mw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\tvar block = parseBlockInfo( result.blockinfo ),\n\t\t\t\t\t\tmessage = blockMessageDrawer( block );\n\t\t\t\t\treturn util.Deferred().reject( message );\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn result;\n\t\t} );\n\t},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n/**\n * Overlay that shows an editor\n *\n * @class SourceEditorOverlay\n * @uses Section\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {Object} [options.visualEditorConfig] falls back to wgVisualEditorConfig if not defined\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.visualEditorConfig = options.visualEditorConfig ||\n\t\tmw.config.get( 'wgVisualEditorConfig' ) || {};\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage,\n\t\tfromModified: !!dataPromise\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise || this.gateway.getContent();\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container content\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\t\t// Ensure we do this after showing the overlay, otherwise it doesn't work.\n\t\tthis._resizeEditor();\n\t},\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar config = this.visualEditorConfig,\n\t\t\tns = config.namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this,\n\t\t\tconfig = this.visualEditorConfig,\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar, windowManager, switchWindow,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tcanSwitch = config.fullRestbaseUrl || config.allowLossySwitching;\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else if ( canSwitch ) {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindowManager = new OO.ui.WindowManager();\n\t\t\t\t\t\t\tswitchWindow = new mw.libs.ve.SwitchConfirmDialog();\n\t\t\t\t\t\t\twindowManager.$element.appendTo( document.body );\n\t\t\t\t\t\t\twindowManager.addWindows( [ switchWindow ] );\n\t\t\t\t\t\t\twindowManager.openWindow( switchWindow, { mode: 'simple' } )\n\t\t\t\t\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twindowManager.destroy();\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\t// This spinner is still used when displaying save/preview panel\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner().$el );\n\t\tthis.hideSpinner();\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\t// The following classes can be used here:\n\t\t// * mw-editfont-monospace\n\t\t// * mw-editfont-sans-serif\n\t\t// * mw-editfont-serif\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( showAnonWarning ) {\n\t\t\tthis.$anonWarning = this.createAnonWarning( options );\n\t\t\tthis.$el.find( '.editor-container' ).append( this.$anonWarning );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$el.find( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content\n\t\t\t.on( 'input', this._resizeEditor.bind( this ) )\n\t\t\t.one( 'input', function () {\n\t\t\t\tself.log( { action: 'firstChange' } );\n\t\t\t} );\n\n\t\tif ( this.isFirefox ) {\n\t\t\tthis.$content.on( 'mousedown', function () {\n\t\t\t\t// Support: Firefox Mobile\n\t\t\t\t// Firefox scrolls back to the top of the page *every time*\n\t\t\t\t// you tap on the textarea. This makes things slightly\n\t\t\t\t// more usable by restoring your scroll offset every time\n\t\t\t\t// the page scrolls for the next 1000ms.\n\t\t\t\t// The page will still flicker every time the user touches\n\t\t\t\t// to place the cursor, but this is better than completely\n\t\t\t\t// losing your scroll offset. (T214880)\n\t\t\t\tvar docEl = document.documentElement,\n\t\t\t\t\tscrollTop = docEl.scrollTop;\n\t\t\t\tfunction blockScroll() {\n\t\t\t\t\tdocEl.scrollTop = scrollTop;\n\t\t\t\t}\n\t\t\t\twindow.addEventListener( 'scroll', blockScroll );\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\twindow.removeEventListener( 'scroll', blockScroll );\n\t\t\t\t}, 1000 );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.$anonWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass( 'errorbox' ).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass( 'errorbox' ).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this;\n\n\t\tthis.$content.hide();\n\n\t\tthis.getLoadingPromise()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar content = result.text;\n\n\t\t\t\tself.setContent( content );\n\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tmw.storage.set( 'preferredEditor', 'VisualEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.$content.prop( 'readonly', true );\n\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar newOverlay, options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tnewOverlay = new VisualEditorOverlay( options );\n\t\t\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\t\t\tself.switching = true;\n\t\t\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\t\t\tself.switching = false;\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.$el.removeClass( 'switching' );\n\t\t\t\tself.$el.find( '.overlay-header-container' ).show();\n\t\t\t\tself.$el.find( '.ve-mobile-fakeToolbar-container' ).remove();\n\t\t\t\tself.$content.prop( 'readonly', false );\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar msg, noRetry;\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tthis.captchaId = data.edit.captcha.id;\n\t\t\tthis.handleCaptcha( data.edit.captcha );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tthis.reportError( msg );\n\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\n\t\t\t// Some errors may be temporary, but for others we know for sure that the save will\n\t\t\t// never succeed, so don't confuse the user by giving them the option to retry.\n\t\t\tnoRetry = data.errors && data.errors.some( function ( error ) {\n\t\t\t\treturn error.code === 'abusefilter-disallowed';\n\t\t\t} );\n\n\t\t\tif ( noRetry ) {\n\t\t\t\t// disable continue and save buttons, reenabled when user changes content\n\t\t\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', true );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve, $ */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tidentifyLeadParagraph = require( './identifyLeadParagraph' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Overlay for VisualEditor view\n *\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tvar surfaceReady = util.Deferred();\n\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n\n\tthis.origDataPromise = this.options.dataPromise || mw.libs.ve.targetLoader.requestPageData(\n\t\t'visual',\n\t\toptions.titleObj.getPrefixedDb(),\n\t\t{\n\t\t\tsessionStore: true,\n\t\t\tsection: options.sectionId || null,\n\t\t\toldId: options.oldId || undefined,\n\t\t\ttargetName: ve.init.mw.MobileArticleTarget.static.trackingName\n\t\t}\n\t);\n\n\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t$element: this.$el,\n\t\t// string or null, but not undefined\n\t\tsection: this.options.sectionId || null\n\t} );\n\tthis.target.once( 'surfaceReady', function () {\n\t\tsurfaceReady.resolve();\n\n\t\tthis.target.getSurface().getModel().getDocument().once( 'transact', function () {\n\t\t\tthis.log( { action: 'firstChange' } );\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n\n\tthis.target.load( this.origDataPromise );\n\n\t// Overlay is only shown after this is resolved. It must be resolved\n\t// with the API response regardless of what we are waiting for.\n\tthis.dataPromise = this.origDataPromise.then( function ( data ) {\n\t\treturn surfaceReady.then( function () {\n\t\t\treturn data && data.visualeditor;\n\t\t} );\n\t} );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\tthis.emit( 'editor-loaded' );\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis.redoTargetInit();\n\t\t} else {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$el.append( this.$anonWarning );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t}\n\t},\n\t/**\n\t * Re-do some initialization steps that might have happened while the overlay\n\t * was hidden, but only work correctly after it is shown.\n\t */\n\tredoTargetInit: function () {\n\t\tthis.target.adjustContentPadding();\n\t\tthis.target.restoreEditSection();\n\t\tthis.scrollToLeadParagraph();\n\t},\n\t/**\n\t * Scroll so that the lead paragraph in edit mode shows at the same place on the screen\n\t * as the lead paragraph in read mode.\n\t *\n\t * Their normal position is different because of (most importantly) the lead paragraph\n\t * transformation to move it before the infobox, and also invisible templates and slugs\n\t * caused by the presence of hatnote templates (both only shown in edit mode).\n\t */\n\tscrollToLeadParagraph: function () {\n\t\tvar editLead, editLeadView, readLead, offset, initialCursorOffset,\n\t\t\tcurrentPageHTMLParser = this.options.currentPageHTMLParser,\n\t\t\tfakeScroll = this.options.fakeScroll,\n\t\t\t$window = $( window ),\n\t\t\tsection = this.target.section,\n\t\t\tsurface = this.target.getSurface(),\n\t\t\tmode = surface.getMode();\n\n\t\tif ( ( section === null || section === '0' ) && mode === 'visual' ) {\n\t\t\teditLead = identifyLeadParagraph( surface.getView().$attachedRootNode );\n\t\t\tif ( currentPageHTMLParser.getLeadSectionElement() ) {\n\t\t\t\treadLead = identifyLeadParagraph( currentPageHTMLParser.getLeadSectionElement() );\n\t\t\t}\n\n\t\t\tif ( editLead && readLead ) {\n\t\t\t\toffset = $( editLead ).offset().top - ( $( readLead ).offset().top - fakeScroll );\n\t\t\t\t// Set a model range to match\n\t\t\t\teditLeadView = $( editLead ).data( 'view' );\n\t\t\t\tif ( editLeadView ) {\n\t\t\t\t\tsurface.getModel().setLinearSelection(\n\t\t\t\t\t\tnew ve.Range( editLeadView.getModel().getRange().start )\n\t\t\t\t\t);\n\t\t\t\t\tinitialCursorOffset =\n\t\t\t\t\t\tsurface.getView().getSelection().getSelectionBoundingRect().top;\n\t\t\t\t\t// Ensure the surface is tall enough to scroll the cursor into view\n\t\t\t\t\tsurface.$element.css( 'min-height', $window.height() + initialCursorOffset - surface.padding.top );\n\t\t\t\t}\n\t\t\t\t$window.scrollTop( offset );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tself.$el.find( '.overlay-content' ).show();\n\t\tthis.redoTargetInit();\n\t},\n\t/**\n\t * Reveal the editing interface.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\tnewOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tmw.storage.set( 'preferredEditor', 'SourceEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.target.getSurface().setReadOnly( true );\n\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tnewOverlay = new SourceEditorOverlay( options, dataPromise );\n\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\tself.switching = true;\n\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\tself.switching = false;\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\t\tthis.destroyTarget();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","var\n\tDrawer = require( '../mobile.startup/Drawer' ),\n\tBlockMessageDetails = require( './BlockMessageDetails' );\n\n/**\n * @typedef {Object} BlockMessageOptions\n * @property {number} blockId representing the block\n * @property {boolean} partial is this a partial block?\n * @property {Object} creator\n * @property {string} creator.name of the blocker\n * @property {string} creator.url associated with the block\n * @property {string} reason for block\n * @property {string} [duration] of block e.g. \"1 week\"\n * @property {string} [expiry] of block, wrapped in parentheses\n *  e.g. \"(1st September 2019)\"\n */\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n *\n * @param {BlockMessageOptions} props\n * @return {Drawer}\n */\nmodule.exports = function blockMessageDrawer( props ) {\n\tconst blockDrawer = new Drawer( {\n\t\tclassName: 'drawer block-message',\n\t\tonBeforeHide: function ( drawer ) {\n\t\t\tdrawer.$el.remove();\n\t\t},\n\t\tonShow: function () {\n\t\t\tconst $drawer = blockDrawer.$el.find( '.drawer.block-message' ),\n\t\t\t\tdrawerTop = $drawer.offset().top - 100,\n\t\t\t\tcreatorTop = blockDrawer.$el.find( '.block-message-creator' ).offset().top - 100,\n\t\t\t\tbuttonsTop = blockDrawer.$el.find( '.block-message-buttons' ).offset().top - 100,\n\t\t\t\t$seeMore = blockDrawer.$el.find( '.block-message-see-more' );\n\t\t\t$drawer.css( 'top', drawerTop + ( buttonsTop - creatorTop ) );\n\t\t\t$seeMore.on(\n\t\t\t\t'click',\n\t\t\t\tfunction () {\n\t\t\t\t\tconst $container = blockDrawer.$el.find( '.block-message-container' );\n\t\t\t\t\t$drawer.css( 'top', '' );\n\t\t\t\t\tif ( $drawer.offset().top < 0 ) {\n\t\t\t\t\t\t$drawer.css( 'top', 0 );\n\t\t\t\t\t\t$container.css( 'overflow-y', 'auto' );\n\t\t\t\t\t\t$container.css( 'height', buttonsTop - $container.offset().top );\n\t\t\t\t\t}\n\t\t\t\t\t$seeMore.hide();\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t\tchildren: [\n\t\t\t( new BlockMessageDetails( props ) ).$el\n\t\t]\n\t} );\n\treturn blockDrawer;\n};\n","/* global $ */\n/**\n * Find first paragraph that has text content, i.e. paragraphs that are not empty.\n * Keep in sync with MoveLeadParagraphTransform::identifyLeadParagraph().\n *\n * @param {jQuery} $body Where to search for paragraphs\n * @return {Node|null} The lead paragraph\n */\nmodule.exports = function identifyLeadParagraph( $body ) {\n\tvar $paragraphs, i, node;\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNotEmptyNode()\n\tfunction isNotEmptyNode( node ) {\n\t\t// Ignore VE whitespace characters\n\t\treturn !/^[\\s↵➞]*$/.test( node.textContent );\n\t}\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNonLeadParagraph()\n\tfunction isNonLeadParagraph( node ) {\n\t\tvar $coords;\n\t\tnode = node.cloneNode( true );\n\t\t// Ignore non-content nodes\n\t\t$( node ).find( '.ve-ce-branchNode-inlineSlug, .ve-ce-focusableNode-invisible' ).remove();\n\t\tif ( isNotEmptyNode( node ) ) {\n\t\t\t$coords = $( node ).find( 'span#coordinates' );\n\t\t\tif ( !$coords.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ( node.textContent ) {\n\t\t\t\treturn node.textContent === $coords[ 0 ].textContent;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t$paragraphs = $body.children( 'p' );\n\tfor ( i = 0; i < $paragraphs.length; i++ ) {\n\t\tnode = $paragraphs[ i ];\n\t\tif ( !isNonLeadParagraph( node ) ) {\n\t\t\treturn node;\n\t\t}\n\t}\n\treturn null;\n};\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n","/**\n * @param {string} blockinfo\n * @return {Object}\n */\nmodule.exports = function parseBlockInfo( blockinfo ) {\n\tvar blockInfo, expiry, reason, expiryInSeconds,\n\t\tmoment = window.moment;\n\n\t// Workaround to parse a message parameter for mw.message, see T96885\n\tfunction jqueryMsgParse( wikitext ) {\n\t\tvar parser, ast;\n\t\t// eslint-disable-next-line new-cap\n\t\tparser = new mw.jqueryMsg.parser();\n\t\ttry {\n\t\t\tast = parser.wikiTextToAst( wikitext );\n\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t} catch ( e ) {\n\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t// can't parse templates.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tblockInfo = {\n\t\tpartial: blockinfo.blockpartial || false,\n\t\tnoCreateAccount: blockinfo.blocknocreate || false,\n\t\tanonOnly: blockinfo.blockanononly === undefined ? true : blockinfo.blockanononly,\n\t\tcreator: {\n\t\t\tname: blockinfo.blockedby,\n\t\t\turl: null\n\t\t},\n\t\texpiry: null,\n\t\tduration: null,\n\t\treason: '',\n\t\tblockId: blockinfo.blockid\n\t};\n\n\t// URL only useful if block creator is a local user\n\tif ( blockinfo.blockedbyid === 0 ) {\n\t\tblockInfo.creator.url = '';\n\t} else {\n\t\tblockInfo.creator.url = mw.Title.makeTitle(\n\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\tblockInfo.creator.name\n\t\t).getUrl();\n\t}\n\n\texpiry = blockinfo.blockexpiry;\n\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( expiry ) === -1 ) {\n\t\texpiryInSeconds = moment( expiry ).diff( moment(), 'seconds' );\n\n\t\tif ( expiryInSeconds <= 86400 ) {\n\t\t\t// For 24 hour blocks/or remaining expiry time and less, show both date and time\n\t\t\tblockInfo.expiry = mw.message( 'parentheses', moment( expiry ).format( 'LL, LT' ) ).escaped();\n\t\t} else {\n\t\t\tblockInfo.expiry = mw.message( 'parentheses', moment( expiry ).format( 'LL' ) ).escaped();\n\t\t}\n\t\tblockInfo.duration = moment().to( expiry, true );\n\t}\n\n\treason = blockinfo.blockreason;\n\tif ( reason ) {\n\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t} else {\n\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t}\n\n\treturn blockInfo;\n};\n","/**\n * Build a save failure message from the API response\n *\n * @param {Object} data API response\n * @return {string} message HTML text describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\t// In most cases, return the error message from the API directly.\n\t// Handle a few exceptions where it is unsuitable for end-users\n\t// (some error messages are seemingly intended for tool developers).\n\n\tvar code = data && data.errors && data.errors[0] && data.errors[0].code;\n\n\tif ( code === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t}\n\n\tif ( code === 'readonly' ) {\n\t\treturn data.errors[0].html + '<br>' + data.errors[0].data.readonlyreason;\n\t}\n\n\tif ( data.errors && data.errors[0] ) {\n\t\treturn data.errors[0].html;\n\t}\n\n\t// This probably indicates a connection problem and a \"fake\" response\n\t// generated by mediawiki.Api. TODO Give a better error message here.\n\treturn '';\n};\n"],"sourceRoot":""}