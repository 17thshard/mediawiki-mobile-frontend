{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessageDetails.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/blockMessageDrawer.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/identifyLeadParagraph.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/parseBlockInfo.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/setPreferredEditor.js","webpack://mfModules.[name]/./src/mobile.startup/MessageBox.js"],"names":["Button","require","View","Icon","util","BlockMessageDetails","createDetailsAnchorHref","blockId","render","mw","getUrl","wpTarget","createDetailsAnchorLabel","msg","createTitle","msgKey","user","isAnon","this","partial","createBody","anonOnly","noCreateAccount","seeMoreLink","reasonHeader","creatorHeader","options","get","expiryHeader","cta","config","progressive","wiki","label","href","Title","quiet","tagName","additionalClassNames","track","events","click","drawer","$el","find","prepend","getButtonConfig","name","parsedReason","then","htmlReason","html","template","module","exports","actionParams","veConfig","EditorGateway","api","title","sectionId","oldId","preload","preloadparams","editintro","content","isNewPage","undefined","fromModified","hasChanged","prototype","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","getContent","self","resolve","Deferred","text","prop","rvprop","titles","intestactions","intestactionsdetail","rvstartid","rvsection","resp","revision","reject","query","pages","missing","action","paction","page","response","OO","getProp","revisions","timestamp","originalContent","setContent","save","apiOptions","result","errorformat","errorlang","errorsuselocal","formatversion","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","abortPreview","_pending","abort","getPreview","sectionLine","extend","sectionpreview","disableeditsection","pst","mobileformat","useskin","disabletoc","post","parse","sections","anchor","line","id","promise","Overlay","parseBlockInfo","headers","PageGateway","icons","mfExtend","blockMessageDrawer","MessageBox","mwUser","EditVeTool","toolGroup","classes","super","call","EditorOverlayBase","params","onBeforeExit","bind","className","isBorderBox","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","overlayManager","inheritClass","ui","Tool","static","icon","group","onSelect","onUpdateState","defaults","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","editor_interface","editor","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","saved","invalidatePage","showSaveCompleteMsg","hook","fire","revision_id","setTimeout","location","hash","notify","type","onSaveFailure","errors","captcha","message","badtoken","assertanonfailed","assertuserfailed","assertnameduserfailed","spamblacklist","pagedeleted","editconflict","reportError","errorNotice","heading","$errorNoticeContainer","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","editSwitcher","editingMsg","readOnly","disabled","cancel","saveHeader","previewingMsg","savingHeader","postRender","apply","show","allowCloseWindow","confirmCloseWindow","test","namespace","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","switching","windowManager","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","onExit","target","edited","release","createAnonWarning","$actions","$","addClass","$anonWarning","append","returnto","returnTo","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","map","createAnonTalkWarning","clone","getOptionsForSwitch","switched","currentPageHTMLParser","fakeScroll","titleObj","contentLang","contentDir","getLoadingPromise","dataPromise","handleCaptcha","details","$input","captchaShown","val","attr","mime","detach","url","question","Section","saveFailureMessage","fakeToolbar","toast","setPreferredEditor","VisualEditorOverlay","SourceEditorOverlay","isFirefox","navigator","userAgent","visualEditorConfig","gateway","isVisualEditorEnabled","templatePartials","arguments","_resizeEditor","ns","namespaces","onInputWikitextEditor","_hidePreview","showAnonWarning","loader","using","switchToolbar","switchWindow","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","canSwitch","allowSwitchingToVisualMode","fullRestbaseUrl","allowLossySwitching","_switchToVisualEditor","WindowManager","SwitchConfirmDialog","$element","appendTo","document","body","destroy","setup","include","emit","spinner","hideSpinner","$preview","$content","$anonTalkWarning","hide","$anonHiddenButtons","one","docEl","documentElement","scrollTop","blockScroll","addEventListener","removeEventListener","_loadContent","hideSpinnerAndShowPreview","getDocument","showSpinner","mainpage","parsedText","parsedSectionLine","parseHTML","el","removeClass","container","$scrollContainer","Element","getClosestScrollableContainer","length","css","height","wikitext","feature","targetLoader","addPlugin","loadModules","newOverlay","requestPageData","targetName","modified","replaceCurrent","remove","uri","Uri","mfnotify","search","getQueryString","reload","showOnPageReload","router","identifyLeadParagraph","getSingleton","surfaceReady","appendChild","origDataPromise","getPrefixedDb","sessionStore","init","MobileArticleTarget","trackingName","targetFactory","create","once","getSurface","getModel","load","visualeditor","editHeader","destroyTarget","targetInit","afterSurfaceReady","scrollToLeadParagraph","editLead","editLeadView","readLead","offset","initialCursorOffset","$window","surface","getMode","getView","$attachedRootNode","getLeadSectionElement","top","setLinearSelection","Range","getRange","start","getSelection","getSelectionBoundingRect","padding","overlay","switchToEditor","switchToSourceEditor","setReadOnly","navigateTo","path","useReplaceState","hasBeenModified","Drawer","props","blockDrawer","onBeforeHide","onShow","$drawer","drawerTop","creatorTop","buttonsTop","$seeMore","$container","children","$body","isNonLeadParagraph","node","cloneNode","$node","hasClass","textContent","isNotEmptyNode","$paragraphs","i","p","m","define","blockInfo","blockpartial","blocknocreate","blockanononly","creator","blockedby","expiry","duration","reason","blockid","jqueryMsgParse","parser","jqueryMsg","ast","wikiTextToAst","emitter","e","blockedbyid","makeTitle","blockexpiry","blockexpiryformatted","escaped","blockexpiryrelative","blockreason","escape","Api","contentmodel","catch","readonlyreason","storage","set","saveOption","isTemplateMode"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["'use strict';\nconst Button = require( '../mobile.startup/Button' ),\n\tView = require( '../mobile.startup/View' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * @extends View\n */\nclass BlockMessageDetails extends View {\n\t/** @inheritdoc */\n\tget isTemplateMode() {\n\t\treturn true;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget defaults() {\n\t\treturn {\n\t\t\tcreateDetailsAnchorHref: function () {\n\t\t\t\treturn function ( blockId, render ) {\n\t\t\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + render( blockId ) } );\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateDetailsAnchorLabel: function () {\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t\t},\n\t\t\tcreateTitle: function () {\n\t\t\t\tlet msgKey = 'mobile-frontend-editor-blocked-drawer-title';\n\t\t\t\tif ( mw.user.isAnon() ) {\n\t\t\t\t\tmsgKey += '-ip';\n\t\t\t\t}\n\t\t\t\tif ( this.partial ) {\n\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip-partial\n\t\t\t\treturn mw.msg( msgKey );\n\t\t\t},\n\t\t\tcreateBody: function () {\n\t\t\t\tlet msgKey = '';\n\t\t\t\tif ( mw.user.isAnon() && this.anonOnly ) {\n\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body';\n\t\t\t\t\tif ( this.noCreateAccount ) {\n\t\t\t\t\t\tmsgKey += '-login';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgKey += '-login-createaccount';\n\t\t\t\t\t}\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body-partial';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount-partial\n\t\t\t\treturn msgKey ? mw.msg( msgKey ) : msgKey;\n\t\t\t},\n\t\t\tseeMoreLink: mw.msg( 'mobile-frontend-editor-blocked-drawer-body-link' ),\n\t\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\t\tcreatorHeader: function () {\n\t\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t\t},\n\t\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t\t};\n\t}\n\t/**\n\t * Configure the call to action depending on the type of block.\n\t *\n\t * @return {Object} Configuration options\n\t */\n\tgetButtonConfig() {\n\t\tlet cta = true;\n\t\tconst config = {\n\t\t\t\tprogressive: true\n\t\t\t},\n\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\tif ( mw.user.isAnon() && this.options.anonOnly ) {\n\t\t\t// The user can avoid the block by logging in\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-login' );\n\t\t\tconfig.href = new mw.Title( 'Special:UserLogin' ).getUrl();\n\t\t} else if ( this.options.partial ) {\n\t\t\t// The user can avoid the block by editing a different page\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-randompage' );\n\t\t\tconfig.href = new mw.Title( 'Special:Random' ).getUrl();\n\t\t\tconfig.quiet = true;\n\t\t} else {\n\t\t\t// The user cannot avoid the block\n\t\t\tconfig.tagName = 'button';\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-ok' );\n\t\t\tconfig.additionalClassNames = 'cancel';\n\t\t\tcta = false;\n\t\t}\n\n\t\tif ( cta && mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaShown', 1 );\n\t\t\tconfig.events = {\n\t\t\t\tclick: function () {\n\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaClicked', 1 );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn config;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender() {\n\t\tconst drawer = this;\n\t\tthis.$el.find( '.block-message-buttons' ).prepend(\n\t\t\tnew Button( this.getButtonConfig() ).$el\n\t\t);\n\t\tthis.$el.find( '.block-message-icon' ).prepend(\n\t\t\t( new Icon( {\n\t\t\t\tname: 'block-destructive',\n\t\t\t\tadditionalClassNames: 'mw-ui-icon-flush-top'\n\t\t\t} ) ).$el\n\t\t);\n\t\tthis.options.parsedReason.then( function ( htmlReason ) {\n\t\t\tdrawer.$el.find( '.block-message-reason div' ).html( htmlReason );\n\t\t} );\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget template() {\n\t\treturn util.template( `\n<div class=\"block-message block-message-container\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      <div class=\"block-message-item\">\n        <p>\n          {{ createBody }}\n          <a class =\"block-message-see-more\" href=\"#\">{{ seeMoreLink }}</a>\n        </p>\n      </div>\n      <div class=\"block-message-item block-message-creator\">\n        {{#creator.name}}\n          <p>\n            {{ creatorHeader }}\n            <strong>\n              {{#creator.url}}\n                <a href=\"{{ creator.url }}\">{{ creator.name }}</a>\n              {{/creator.url}}\n              {{^creator.url}}\n                {{ creator.name }}\n              {{/creator.url}}\n            </strong>\n          </p>\n        {{/creator.name}}\n      </div>\n      {{#duration}}\n        <div class=\"block-message-item\">\n          <p>\n            {{ expiryHeader }}\n            <strong>{{ duration }}</strong>\n          </p>\n        </div>\n      {{/duration}}\n      {{#blockId}}\n        <div class=\"block-message-item\">\n          <a href=\"{{#createDetailsAnchorHref}}{{ blockId }}{{/createDetailsAnchorHref}}\">\n            {{ createDetailsAnchorLabel }}\n          </a>\n        </div>\n      {{/blockId}}\n    </div>\n  </div>\n  {{#reason}}\n    <div class=\"block-message-item block-message-reason\">\n      <h5>{{ reasonHeader }}</h5>\n      <div><p>{{{ reason }}}</p></div>\n    </div>\n  {{/reason}}\n  <div class=\"block-message-buttons\">\n  </div>\n</div>` );\n\t}\n}\n\nmodule.exports = BlockMessageDetails;\n","var util = require( '../mobile.startup/util' ),\n\tactionParams = require( '../mobile.startup/actionParams' ),\n\tveConfig = mw.config.get( 'wgVisualEditorConfig' );\n\n/**\n * API that helps save and retrieve page content\n *\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {string|null} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n * @param {string} [options.preload] the name of a page to preload into the editor\n * @param {Array} [options.preloadparams] parameters to prefill into the preload content\n * @param {string} [options.editintro] edit intro to add to notices\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\tthis.preload = options.preload;\n\tthis.preloadparams = options.preloadparams;\n\tthis.editintro = options.editintro;\n\t// return an empty section for new pages\n\tthis.content = ( options.isNewPage && !this.preload ) ? '' : undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t *\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See T52136 - passing rvsection will fail with non wikitext\n\t\t\tif ( this.sectionId ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tif ( self.preload && veConfig ) {\n\t\t\t\t\t\treturn self.api.get( actionParams( {\n\t\t\t\t\t\t\taction: 'visualeditor',\n\t\t\t\t\t\t\tpaction: 'wikitext',\n\t\t\t\t\t\t\tpage: self.title,\n\t\t\t\t\t\t\teditintro: self.editintro,\n\t\t\t\t\t\t\tpreload: self.preload,\n\t\t\t\t\t\t\tpreloadparams: self.preloadparams\n\t\t\t\t\t\t} ) ).then( function ( response ) {\n\t\t\t\t\t\t\tresponse = OO.getProp( response, 'visualeditor' ) || [];\n\t\t\t\t\t\t\tself.content = response.content;\n\n\t\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t\t} );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.content = '';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t *\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\terrorformat: 'html',\n\t\t\t\terrorlang: mw.config.get( 'wgUserLanguage' ),\n\t\t\t\terrorsuselocal: 1,\n\t\t\t\tformatversion: 2,\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t}\n\n\t\t\tif ( self.sectionId ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( data );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( data );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (T51218)\n\t\t\tsectionpreview: true,\n\t\t\t// Hide section edit links\n\t\t\tdisableeditsection: true,\n\t\t\t// needed for pre-save transform to work (T55692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (T56243)\n\t\t\tmobileformat: true,\n\t\t\tuseskin: mw.config.get( 'skin' ),\n\t\t\tdisabletoc: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\t\tthis._pending = this.api.post( options );\n\n\t\treturn this._pending.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// When editing section 0 or the whole page, there is no section name, so skip\n\t\t\t\tif ( self.sectionId && self.sectionId !== '0' &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn util.Deferred().reject();\n\t\t\t}\n\t\t} ).promise( {\n\t\t\tabort: function () { self._pending.abort(); }\n\t\t} );\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tparseBlockInfo = require( './parseBlockInfo' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tblockMessageDrawer = require( './blockMessageDrawer' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n *\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n *\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {number|null} params.editCount of user\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<h2 class=\"summary-request\">{{{summaryRequestMsg}}}</h2>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<div class=\"license\">{{{licenseMsg}}}</div>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'editAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'visualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Updates urls and shows toast message.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null\n\t *  edit.\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tvar msg,\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\n\t\tif ( !mw.config.get( 'wgPostEditConfirmationDisabled' ) ) {\n\t\t\tthis.showSaveCompleteMsg( msg );\n\t\t}\n\n\t\t/**\n\t\t * Fired after an edit was successfully saved, like postEdit in MediaWiki core.\n\t\t *\n\t\t * @event postEditMobile\n\t\t * @member mw.hook\n\t\t * @param {Object} data\n\t\t * @param {number|null} data.newRevId (since MW 1.37) ID of the newly created revision,\n\t\t *  or null if it was a null edit.\n\t\t */\n\t\tmw.hook( 'postEditMobile' ).fire( { newRevId: newRevId } );\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tsetTimeout( function () {\n\t\t\t// Wait for any other teardown navigation to happen (e.g. router.back())\n\t\t\t// before setting our final location.\n\t\t\tif ( self.sectionId ) {\n\t\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t\t} else {\n\t\t\t\t// Cancel the hash fragment\n\t\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t\t// and may conflict with the window.reload call below.\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#';\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Show a save-complete message to the user\n\t *\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {string} msg Message\n\t */\n\tshowSaveCompleteMsg: function ( msg ) {\n\t\tmw.notify( msg, { type: 'success' } );\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data API response\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar code = data && data.errors && data.errors[0] && data.errors[0].code,\n\t\t\t// Compare to ve.init.mw.ArticleTargetEvents.js in VisualEditor.\n\t\t\ttypeMap = {\n\t\t\t\tbadtoken: 'userBadToken',\n\t\t\t\tassertanonfailed: 'userNewUser',\n\t\t\t\tassertuserfailed: 'userNewUser',\n\t\t\t\tassertnameduserfailed: 'userNewUser',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\t'abusefilter-warning': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// This is blocked on T254649\n\t\t\t\tspamblacklist: 'extensionSpamBlacklist',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// Removal of this line is blocked on T254650.\n\t\t\t\t'titleblacklist-forbidden': 'extensionTitleBlacklist',\n\t\t\t\tpagedeleted: 'editPageDeleted',\n\t\t\t\teditconflict: 'editConflict'\n\t\t\t};\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tcode = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: code,\n\t\t\ttype: typeMap[code] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text (HTML) of message to display to user\n\t */\n\treportError: function ( text ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'mw-message-box-error',\n\t\t\tmsg: text,\n\t\t\theading: mw.msg( 'mobile-frontend-editor-error' )\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.hideErrorNotice();\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew Icon( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\tname: 'next-invert',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\ttitle: options.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis.onStageChanges();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t * @param {Function} cancel Callback to cancel exiting the overlay\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar self = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\tif ( !this.windowManager ) {\n\t\t\t\tthis.windowManager = OO.ui.getWindowManager();\n\t\t\t\tthis.windowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\t}\n\t\t\tthis.windowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.onExit();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.onExit();\n\t\texit();\n\t},\n\tonExit: function () {\n\t\t// May not be set if overlay has not been previously shown\n\t\tif ( this.allowCloseWindow ) {\n\t\t\tthis.allowCloseWindow.release();\n\t\t}\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'mw-message-box-notice anon-msg',\n\t\t\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t\treturnto: options.returnTo || (\n\t\t\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\t\tmw.config.get( 'wgPageName' ) + '#/editor/' + ( options.sectionId || 'all' )\n\t\t\t\t),\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\t/**\n\t * Creates and returns a copy of the anon talk message warning\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonTalkWarning: function () {\n\t\treturn $( '.minerva-anon-talk-message' ).clone();\n\t},\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tcurrentPageHTMLParser: this.options.currentPageHTMLParser,\n\t\t\tfakeScroll: this.options.fakeScroll,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\teditCount: this.options.editCount,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Get a promise that is resolved when the editor data has loaded,\n\t * or rejected when we're refusing to load the editor because the user is blocked.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetLoadingPromise: function () {\n\t\treturn this.dataPromise.then( function ( result ) {\n\t\t\t// check if user is blocked\n\t\t\tif ( result && result.blockinfo ) {\n\t\t\t\tvar block = parseBlockInfo( result.blockinfo ),\n\t\t\t\t\tmessage = blockMessageDrawer( block );\n\t\t\t\treturn util.Deferred().reject( message );\n\t\t\t}\n\t\t\treturn result;\n\t\t} );\n\t},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\ttoast = require( '../mobile.startup/showOnPageReload' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n/**\n * Overlay that shows an editor\n *\n * @class SourceEditorOverlay\n * @uses Section\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {Object} [options.visualEditorConfig] falls back to wgVisualEditorConfig if not defined\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.visualEditorConfig = options.visualEditorConfig ||\n\t\tmw.config.get( 'wgVisualEditorConfig' ) || {};\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage,\n\t\tfromModified: !!dataPromise,\n\t\tpreload: options.preload,\n\t\tpreloadparams: options.preloadparams,\n\t\teditintro: options.editintro\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise || this.gateway.getContent();\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container content\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\t\t// Ensure we do this after showing the overlay, otherwise it doesn't work.\n\t\tthis._resizeEditor();\n\t},\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar config = this.visualEditorConfig,\n\t\t\tns = config.namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this,\n\t\t\tconfig = this.visualEditorConfig,\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar, windowManager, switchWindow,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\t// NOTE: Should be just config.allowSwitchingToVisualMode, but we need to\n\t\t\t\t\t// preserve compatibility for a bit.\n\t\t\t\t\tvar canSwitch = config.allowSwitchingToVisualMode ||\n\t\t\t\t\t\tconfig.fullRestbaseUrl ||\n\t\t\t\t\t\tconfig.allowLossySwitching;\n\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else if ( canSwitch ) {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindowManager = new OO.ui.WindowManager();\n\t\t\t\t\t\t\tswitchWindow = new mw.libs.ve.SwitchConfirmDialog();\n\t\t\t\t\t\t\twindowManager.$element.appendTo( document.body );\n\t\t\t\t\t\t\twindowManager.addWindows( [ switchWindow ] );\n\t\t\t\t\t\t\twindowManager.openWindow( switchWindow, { mode: 'simple' } )\n\t\t\t\t\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twindowManager.destroy();\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\t// This spinner is still used when displaying save/preview panel\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner().$el );\n\t\tthis.hideSpinner();\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\t// The following classes can be used here:\n\t\t// * mw-editfont-monospace\n\t\t// * mw-editfont-sans-serif\n\t\t// * mw-editfont-serif\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( showAnonWarning ) {\n\t\t\tthis.$anonWarning = this.createAnonWarning( options );\n\t\t\tthis.$anonTalkWarning = this.createAnonTalkWarning();\n\t\t\tthis.$el.find( '.editor-container' ).append( [ this.$anonTalkWarning, this.$anonWarning ] );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$el.find( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content\n\t\t\t.on( 'input', this._resizeEditor.bind( this ) )\n\t\t\t.one( 'input', function () {\n\t\t\t\tself.log( { action: 'firstChange' } );\n\t\t\t} );\n\n\t\tif ( this.isFirefox ) {\n\t\t\tthis.$content.on( 'mousedown', function () {\n\t\t\t\t// Support: Firefox Mobile\n\t\t\t\t// Firefox scrolls back to the top of the page *every time*\n\t\t\t\t// you tap on the textarea. This makes things slightly\n\t\t\t\t// more usable by restoring your scroll offset every time\n\t\t\t\t// the page scrolls for the next 1000ms.\n\t\t\t\t// The page will still flicker every time the user touches\n\t\t\t\t// to place the cursor, but this is better than completely\n\t\t\t\t// losing your scroll offset. (T214880)\n\t\t\t\tvar docEl = document.documentElement,\n\t\t\t\t\tscrollTop = docEl.scrollTop;\n\t\t\t\tfunction blockScroll() {\n\t\t\t\t\tdocEl.scrollTop = scrollTop;\n\t\t\t\t}\n\t\t\t\twindow.addEventListener( 'scroll', blockScroll );\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\twindow.removeEventListener( 'scroll', blockScroll );\n\t\t\t\t}, 1000 );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t\tmw.hook( 'wikipage.content' ).fire( self.$preview );\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass(\n\t\t\t\t'mw-message-box mw-message-box-error'\n\t\t\t).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass(\n\t\t\t'mw-message-box-error'\n\t\t).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this;\n\n\t\tthis.$content.hide();\n\n\t\tthis.getLoadingPromise()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar content = result.text;\n\n\t\t\t\tself.setContent( content );\n\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tsetPreferredEditor( 'VisualEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.$content.prop( 'readonly', true );\n\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar newOverlay, options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tnewOverlay = new VisualEditorOverlay( options );\n\t\t\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\t\t\tself.switching = true;\n\t\t\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\t\t\tself.switching = false;\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.$el.removeClass( 'switching' );\n\t\t\t\tself.$el.find( '.overlay-header-container' ).show();\n\t\t\t\tself.$el.find( '.ve-mobile-fakeToolbar-container' ).remove();\n\t\t\t\tself.$content.prop( 'readonly', false );\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null\n\t *  edit.\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\n\t\t// The parent class changes the location hash in a setTimeout, so wait\n\t\t// for that to happen before reloading.\n\t\tsetTimeout( function () {\n\t\t\tif ( newRevId ) {\n\t\t\t\t// Set a notify parameter similar to venotify in VisualEditor.\n\t\t\t\tvar uri = new mw.Uri( location.href );\n\t\t\t\turi.query.mfnotify = this.isNewPage ? 'created' : 'saved';\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.search = uri.getQueryString();\n\t\t\t} else {\n\t\t\t\t// Null edit; do not add notify parameter.\n\t\t\t\t// Note the \"#\" may be in the URL.\n\t\t\t\t// If so, using window.location alone will not reload the page\n\t\t\t\t// we need to forcefully refresh\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshowSaveCompleteMsg: function ( msg ) {\n\t\ttoast.showOnPageReload( msg, { type: 'success' } );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar msg, noRetry;\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tthis.captchaId = data.edit.captcha.id;\n\t\t\tthis.handleCaptcha( data.edit.captcha );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tthis.reportError( msg );\n\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\n\t\t\t// Some errors may be temporary, but for others we know for sure that the save will\n\t\t\t// never succeed, so don't confuse the user by giving them the option to retry.\n\t\t\tnoRetry = data.errors && data.errors.some( function ( error ) {\n\t\t\t\treturn error.code === 'abusefilter-disallowed';\n\t\t\t} );\n\n\t\t\tif ( noRetry ) {\n\t\t\t\t// disable continue and save buttons, reenabled when user changes content\n\t\t\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', true );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve, $ */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tidentifyLeadParagraph = require( './identifyLeadParagraph' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tutil = require( '../mobile.startup/util' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\toverlayManager = OverlayManager.getSingleton();\n\n/**\n * Overlay for VisualEditor view\n *\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tvar surfaceReady = util.Deferred();\n\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// VE surfaces must be attached to the DOM while initializing, and measurable\n\tthis.$el.addClass( 'editor-overlay-ve-initializing' );\n\toverlayManager.container.appendChild( this.$el[ 0 ] );\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n\n\tthis.origDataPromise = this.options.dataPromise || mw.libs.ve.targetLoader.requestPageData(\n\t\t'visual',\n\t\toptions.titleObj.getPrefixedDb(),\n\t\t{\n\t\t\tsessionStore: true,\n\t\t\tsection: options.sectionId || null,\n\t\t\toldId: options.oldId || undefined,\n\t\t\ttargetName: ve.init.mw.MobileArticleTarget.static.trackingName,\n\t\t\tpreload: options.preload,\n\t\t\tpreloadparams: options.preloadparams,\n\t\t\teditintro: options.editintro\n\t\t}\n\t);\n\n\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t$element: this.$el,\n\t\t// string or null, but not undefined\n\t\tsection: this.options.sectionId || null\n\t} );\n\tthis.target.once( 'surfaceReady', function () {\n\t\tsurfaceReady.resolve();\n\n\t\tthis.target.getSurface().getModel().getDocument().once( 'transact', function () {\n\t\t\tthis.log( { action: 'firstChange' } );\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n\n\tthis.target.load( this.origDataPromise );\n\n\t// Overlay is only shown after this is resolved. It must be resolved\n\t// with the API response regardless of what we are waiting for.\n\tthis.dataPromise = this.origDataPromise.then( function ( data ) {\n\t\treturn surfaceReady.then( function () {\n\t\t\tthis.$el.removeClass( 'editor-overlay-ve-initializing' );\n\t\t\treturn data && data.visualeditor;\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis.targetInit();\n\t\t} else {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$anonTalkWarning = this.createAnonTalkWarning();\n\t\t\tthis.$el.append( [ this.$anonTalkWarning, this.$anonWarning ] );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t}\n\n\t\tthis.emit( 'editor-loaded' );\n\t},\n\t/**\n\t * Initialize the target after it has been made visible\n\t */\n\ttargetInit: function () {\n\t\t// Note this.target will not be set if an error occurred and/or destroyTarget was called.\n\t\tif ( this.target ) {\n\t\t\tthis.target.afterSurfaceReady();\n\t\t\tthis.scrollToLeadParagraph();\n\t\t}\n\t},\n\t/**\n\t * Scroll so that the lead paragraph in edit mode shows at the same place on the screen\n\t * as the lead paragraph in read mode.\n\t *\n\t * Their normal position is different because of (most importantly) the lead paragraph\n\t * transformation to move it before the infobox, and also invisible templates and slugs\n\t * caused by the presence of hatnote templates (both only shown in edit mode).\n\t */\n\tscrollToLeadParagraph: function () {\n\t\tvar editLead, editLeadView, readLead, offset, initialCursorOffset,\n\t\t\tcurrentPageHTMLParser = this.options.currentPageHTMLParser,\n\t\t\tfakeScroll = this.options.fakeScroll,\n\t\t\t$window = $( window ),\n\t\t\tsection = this.target.section,\n\t\t\tsurface = this.target.getSurface(),\n\t\t\tmode = surface.getMode();\n\n\t\tif ( ( section === null || section === '0' ) && mode === 'visual' ) {\n\t\t\teditLead = identifyLeadParagraph( surface.getView().$attachedRootNode );\n\t\t\tif ( currentPageHTMLParser.getLeadSectionElement() ) {\n\t\t\t\treadLead = identifyLeadParagraph( currentPageHTMLParser.getLeadSectionElement() );\n\t\t\t}\n\n\t\t\tif ( editLead && readLead ) {\n\t\t\t\toffset = $( editLead ).offset().top - ( $( readLead ).offset().top - fakeScroll );\n\t\t\t\t// Set a model range to match\n\t\t\t\teditLeadView = $( editLead ).data( 'view' );\n\t\t\t\tif ( editLeadView ) {\n\t\t\t\t\tsurface.getModel().setLinearSelection(\n\t\t\t\t\t\tnew ve.Range( editLeadView.getModel().getRange().start )\n\t\t\t\t\t);\n\t\t\t\t\tinitialCursorOffset =\n\t\t\t\t\t\tsurface.getView().getSelection().getSelectionBoundingRect().top;\n\t\t\t\t\t// Ensure the surface is tall enough to scroll the cursor into view\n\t\t\t\t\tsurface.$element.css( 'min-height', $window.height() + initialCursorOffset - surface.padding.top );\n\t\t\t\t}\n\t\t\t\t$window.scrollTop( offset );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t}, cancel );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\tself.$el.find( '.overlay-content' ).show();\n\t\tthis.targetInit();\n\t},\n\t/**\n\t * Reveal the editing interface.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\tnewOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tsetPreferredEditor( 'SourceEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.target.getSurface().setReadOnly( true );\n\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tnewOverlay = new SourceEditorOverlay( options, dataPromise );\n\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\tself.switching = true;\n\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\tself.switching = false;\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","const\n\tDrawer = require( '../mobile.startup/Drawer' ),\n\tBlockMessageDetails = require( './BlockMessageDetails' );\n\n/**\n * @typedef {Object} BlockMessageOptions\n * @property {number} blockId representing the block\n * @property {boolean} partial is this a partial block?\n * @property {Object} creator\n * @property {string} creator.name of the blocker\n * @property {string} creator.url associated with the block\n * @property {string} reason for block\n * @property {string} [duration] of block e.g. \"1 week\"\n * @property {string} [expiry] of block, wrapped in parentheses\n *  e.g. \"(1st September 2019)\"\n */\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n *\n * @param {BlockMessageOptions} props\n * @return {Drawer}\n */\nmodule.exports = function blockMessageDrawer( props ) {\n\tconst blockDrawer = new Drawer( {\n\t\tclassName: 'drawer block-message',\n\t\tonBeforeHide: function ( drawer ) {\n\t\t\tdrawer.$el.remove();\n\t\t},\n\t\tonShow: function () {\n\t\t\tconst $drawer = blockDrawer.$el.find( '.drawer.block-message' ),\n\t\t\t\tdrawerTop = $drawer.offset().top - 100,\n\t\t\t\tcreatorTop = blockDrawer.$el.find( '.block-message-creator' ).offset().top - 100,\n\t\t\t\tbuttonsTop = blockDrawer.$el.find( '.block-message-buttons' ).offset().top - 100,\n\t\t\t\t$seeMore = blockDrawer.$el.find( '.block-message-see-more' ),\n\t\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\t\t$drawer.css( 'top', drawerTop + ( buttonsTop - creatorTop ) );\n\t\t\t$seeMore.on(\n\t\t\t\t'click',\n\t\t\t\tfunction () {\n\t\t\t\t\tconst $container = blockDrawer.$el.find( '.block-message-container' );\n\t\t\t\t\t$drawer.css( 'top', 0 );\n\t\t\t\t\t$container.css( 'overflow-y', 'auto' );\n\t\t\t\t\t$container.css( 'height', buttonsTop - $container.offset().top );\n\t\t\t\t\t$seeMore.hide();\n\n\t\t\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.reasonShown', 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.shown', 1 );\n\t\t\t}\n\t\t},\n\t\tchildren: [\n\t\t\t( new BlockMessageDetails( props ) ).$el\n\t\t]\n\t} );\n\treturn blockDrawer;\n};\n","/* global $ */\n/**\n * Find first paragraph that has text content, i.e. paragraphs that are not empty.\n * Keep in sync with MoveLeadParagraphTransform::identifyLeadParagraph().\n *\n * @param {jQuery} $body Where to search for paragraphs\n * @return {Node|null} The lead paragraph\n */\nmodule.exports = function identifyLeadParagraph( $body ) {\n\t// Keep in sync with MoveLeadParagraphTransform::isNotEmptyNode()\n\tfunction isNotEmptyNode( node ) {\n\t\t// Ignore VE whitespace characters\n\t\treturn !/^[\\s↵➞]*$/.test( node.textContent );\n\t}\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNonLeadParagraph()\n\tfunction isNonLeadParagraph( node ) {\n\t\tnode = node.cloneNode( true );\n\t\tvar $node = $( node );\n\t\t// The paragraph itself can be an invisible template (T293834)\n\t\tif ( $node.hasClass( 've-ce-focusableNode-invisible' ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t// Ignore non-content nodes, TemplateStyles and coordinates\n\t\t$node.find( '.ve-ce-branchNode-inlineSlug, .ve-ce-focusableNode-invisible, style, span#coordinates' ).remove();\n\t\tif ( isNotEmptyNode( node ) ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar $paragraphs = $body.children( 'p' );\n\tfor ( var i = 0; i < $paragraphs.length; i++ ) {\n\t\tvar p = $paragraphs[ i ];\n\t\tif ( !isNonLeadParagraph( p ) ) {\n\t\t\treturn p;\n\t\t}\n\t}\n\treturn null;\n};\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n","var util = require( '../mobile.startup/util' );\n\n/**\n * @param {string} blockinfo\n * @return {Object}\n */\nmodule.exports = function parseBlockInfo( blockinfo ) {\n\tconst blockInfo = {\n\t\tpartial: blockinfo.blockpartial || false,\n\t\tnoCreateAccount: blockinfo.blocknocreate || false,\n\t\tanonOnly: blockinfo.blockanononly === undefined ? true : blockinfo.blockanononly,\n\t\tcreator: {\n\t\t\tname: blockinfo.blockedby,\n\t\t\turl: null\n\t\t},\n\t\texpiry: null,\n\t\tduration: null,\n\t\treason: '',\n\t\tblockId: blockinfo.blockid\n\t};\n\n\t// Workaround to parse a message parameter for mw.message, see T96885\n\tfunction jqueryMsgParse( wikitext ) {\n\t\t// eslint-disable-next-line new-cap\n\t\tconst parser = new mw.jqueryMsg.parser();\n\t\ttry {\n\t\t\tconst ast = parser.wikiTextToAst( wikitext );\n\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t} catch ( e ) {\n\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t// can't parse templates.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// URL only useful if block creator is a local user\n\tif ( blockinfo.blockedbyid === 0 ) {\n\t\tblockInfo.creator.url = '';\n\t} else {\n\t\tblockInfo.creator.url = mw.Title.makeTitle(\n\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\tblockInfo.creator.name\n\t\t).getUrl();\n\t}\n\n\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( blockinfo.blockexpiry ) === -1 ) {\n\t\tblockInfo.expiry = mw.message( 'parentheses', blockinfo.blockexpiryformatted ).escaped();\n\t\tblockInfo.duration = blockinfo.blockexpiryrelative;\n\t}\n\n\tconst reason = blockinfo.blockreason;\n\tif ( reason ) {\n\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\tblockInfo.parsedReason = ( new mw.Api() ).get( {\n\t\t\taction: 'parse',\n\t\t\tformatversion: 2,\n\t\t\ttext: reason,\n\t\t\tcontentmodel: 'wikitext'\n\t\t} ).then( function ( result ) {\n\t\t\treturn result.parse.text;\n\t\t} ).catch( function () {\n\t\t\treturn jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} );\n\t} else {\n\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\tblockInfo.parsedReason = util.Deferred().resolve( blockInfo.reason ).promise();\n\t}\n\n\treturn blockInfo;\n};\n","/**\n * Build a save failure message from the API response\n *\n * @param {Object} data API response\n * @return {string} message HTML text describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\t// In most cases, return the error message from the API directly.\n\t// Handle a few exceptions where it is unsuitable for end-users\n\t// (some error messages are seemingly intended for tool developers).\n\n\tvar code = data && data.errors && data.errors[0] && data.errors[0].code;\n\n\tif ( code === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t}\n\n\tif ( code === 'readonly' ) {\n\t\treturn data.errors[0].html + '<br>' + data.errors[0].data.readonlyreason;\n\t}\n\n\tif ( data.errors && data.errors[0] ) {\n\t\treturn data.errors[0].html;\n\t}\n\n\t// This probably indicates a connection problem and a \"fake\" response\n\t// generated by mediawiki.Api. TODO Give a better error message here.\n\treturn '';\n};\n","/**\n * Store the user's preferred editor\n *\n * @param {string} editor 'VisualEditor' or 'SourceEditor'\n */\nmodule.exports = function setPreferredEditor( editor ) {\n\tif ( !mw.user.isAnon() ) {\n\t\tnew mw.Api().saveOption( 'mobile-editor', editor ).then( function () {\n\t\t\tmw.user.options.set( 'mobile-editor', editor );\n\t\t} );\n\t} else {\n\t\tmw.storage.set( 'preferredEditor', editor );\n\t}\n};\n","var\n\tView = require( './View' ),\n\tutil = require( './util' ),\n\tmfExtend = require( './mfExtend' );\n\n/**\n * @class MessageBox\n * @extends View\n */\nfunction MessageBox() {\n\tView.apply( this, arguments );\n}\n\nmfExtend( MessageBox, View, {\n\t/**\n\t * @inheritdoc\n\t * @memberof MessageBox\n\t * @instance\n\t */\n\tisTemplateMode: true,\n\t/**\n\t * @memberof MessageBox\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} [defaults.heading] heading to show along with message (text)\n\t * @property {string} defaults.msg message to show (html)\n\t * @property {string} defaults.className either mw-message-box-error,\n\t *   mw-message-box-notice or mw-message-box-warning\n\t */\n\tdefaults: {},\n\t/**\n\t * @memberof MessageBox\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"{{className}} mw-message-box\">\n\t{{#heading}}<h2>{{heading}}</h2>{{/heading}}\n\t{{{msg}}}\n</div>\n\t` )\n} );\n\nmodule.exports = MessageBox;\n"],"sourceRoot":""}