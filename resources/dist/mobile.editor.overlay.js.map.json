{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterPanel.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/schemaEditAttemptStep.js"],"names":["Button","require","util","mfExtend","Overlay","AbuseFilterOverlay","props","call","this","extend","className","defaults","prototype","confirmButton","additionalClassNames","progressive","options","templatePartials","button","template","content","mw","get","postRender","apply","$el","find","attr","module","exports","View","AbuseFilterPanel","isDisallowed","overlayManager","readMoreMsg","msg","show","type","message","add","text","removeClass","hide","addClass","Drawer","Icon","BlockMessage","arguments","stopHandIcon","name","userIcon","tagName","okButton","label","createDetailsAnchorHref","getUrl","wpTarget","blockId","createDetailsAnchorLabel","createTitle","partial","reasonHeader","creatorHeader","user","gender","expiryHeader","icon","onShowDrawer","wiki","config","track","parseSaveError","actionParams","EditorGateway","api","title","sectionId","oldId","isNewPage","undefined","hasChanged","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","loader","load","getContent","self","resolve","Deferred","userinfo","prop","meta","rvprop","titles","intestactions","intestactionsdetail","uiprop","rvstartid","isNumeric","rvsection","then","resp","revision","reject","query","pages","missing","revisions","timestamp","originalContent","setContent","setPrependText","prependtext","save","result","apiOptions","action","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","saveContent","abortPreview","_pending","abort","getPreview","request","sectionLine","sectionpreview","pst","mobileformat","post","parse","sections","line","promise","EditorOverlayBase","Section","saveFailureMessage","VisualEditorOverlay","MessageBox","EditorOverlay","gateway","readOnly","isVisualEditorEnabled","editSwitcher","editingMsg","isAnon","_prepareAnonWarning","isVisualEditor","previewingMsg","events","input .wikitext-editor","messageBox","anonWarning","loginButton","block","signupButton","anonButton","warningOptions","editor","ns","namespaces","onInputWikitextEditor","val","onClickContinue","ev","target","hasClass","_showEditorAfterWarning","onClickBack","_hidePreview","using","switchToolbar","toolFactory","OO","ui","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","classes","on","mode","window","confirm","onStageChanges","_switchToVisualEditor","setup","include","html","$element","emit","$preview","$content","$anonWarning","$anonHiddenButtons","hideSpinner","abuseFilterPanel","appendTo","_resizeEditor","bind","_loadContent","params","returnto","returnTo","returntoquery","warning","queryParams","signupParams","signupQueryParams","href","showSpinner","hideSpinnerAndShowPreview","scrollTop","getDocument","mainpage","parsedText","parsedSectionLine","parseHTML","el","scrollTo","showHidden","container","$scrollContainer","Element","static","getClosestScrollableContainer","length","css","height","_parseBlockInfo","blockInfo","expiry","reason","moment","blockpartial","creator","blockedby","url","duration","blockid","blockexpiry","format","to","blockreason","wikitext","parser","ast","jqueryMsg","wikiTextToAst","emitter","e","jqueryMsgParse","escape","escaped","toggle","reportError","log","mechanism","storage","set","targetLoader","addPlugin","loadModules","switching","replaceCurrent","_showAbuseFilter","onSaveBegin","confirmAborted","location","onSaveComplete","onSaveFailure","heading","details","id","handleCaptcha","PageGateway","toast","mwUser","EditVeTool","toolGroup","super","isBorderBox","click .back","click .continue","click .submit","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","sessionId","allowCloseWindow","confirmCloseWindow","test","namespace","inheritClass","Tool","group","onSelect","onUpdateState","hasToolbar","continueMsg","cancelMsg","closeMsg","summaryMsg","waitMsg","waitIcon","toHtmlString","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","editHeader","previewHeader","saveHeader","editor_interface","editing_session_id","confirmSave","$window","getWindow","saved","invalidatePage","showOnPageReload","hash","off","reload","key","editconflict","wasdeleted","abusefilter-disallowed","captcha","spamprotectiontext","titleblacklist-forbidden-edit","errorNotice","$errorNoticeContainer","hideErrorNotice","empty","skipPreview","nextStep","saveMsg","hook","fire","onClickSubmit","windowManager","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","release","edited","shouldConfirmLeave","force","$input","captchaShown","setTimeout","mime","detach","question","applyHeaderOptions","isVE","destroyTarget","destroy","init","targetFactory","create","dataPromise","overlay","retval","switchToEditor","switchToSourceEditor","getSurface","getModel","hasBeenModified","m","schemaEditAttemptStep","define","readonlyreason","info","trackdebug","getParamValue","getState","Schema","eventLog","sampleRate","actionPrefixMap","saveIntent","saveAttempt","saveSuccess","saveFailure","timing","page_id","revision_id","page_title","page_ns","user_id","getId","user_class","user_editcount","mw_version","platform","integration","page_token","getPageviewToken","session_token","version","trackSubscribe","topic","timeStamp","actionPrefix","Math","round","event","ready","warn","abort_type","computeDuration","is_oversample","inSample","console"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["var Button = require( '../mobile.startup/Button' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Overlay that shows a message about abuse.\n * This overlay is rendered when the error code from the API\n * is related to the abusefilter extension.\n * @class AbuseFilterOverlay\n * @extends Overlay\n * @param {Object} props\n */\nfunction AbuseFilterOverlay( props ) {\n\tOverlay.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'overlay abusefilter-overlay'\n\t\t}, props )\n\t);\n}\n\nmfExtend( AbuseFilterOverlay, Overlay, {\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.confirmButton options for a confirm Button\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tconfirmButton: new Button( {\n\t\t\tadditionalClassNames: 'cancel',\n\t\t\tprogressive: true\n\t\t} ).options\n\t} ),\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tbutton: Button.prototype.template,\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'AbuseFilterOverlay.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\t// make links open in separate tabs\n\t\tthis.$el.find( 'a' ).attr( 'target', '_blank' );\n\t}\n} );\n\nmodule.exports = AbuseFilterOverlay;\n","var util = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAbuseFilterOverlay = require( './AbuseFilterOverlay' );\n\n/**\n * Panel that shows an error message related to the abusefilter extension.\n * @class AbuseFilterPanel\n * @extends View\n * @uses AbuseFilterOverlay\n *\n * @param {Object} options Configuration options\n * FIXME: should extend Panel not View. Or the name should be changed to something meaningful.\n */\nfunction AbuseFilterPanel( options ) {\n\tthis.isDisallowed = false;\n\tthis.overlayManager = options.overlayManager;\n\tView.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'panel hidden'\n\t\t}, options )\n\t);\n}\n\nmfExtend( AbuseFilterPanel, View, {\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.readMoreMsg A caption for the button\n\t * allowing the user to read more about the problems with their edit.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t */\n\tdefaults: {\n\t\treadMoreMsg: mw.msg( 'mobile-frontend-editor-abusefilter-read-more' )\n\t},\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'AbuseFilterPanel.hogan' ),\n\t/**\n\t * Show the panel. Create a route to show AbuseFilterOverlay with message.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\tshow: function ( type, message ) {\n\t\tvar msg;\n\n\t\t// OverlayManager will replace previous instance of the route if present\n\t\tthis.overlayManager.add( /^\\/abusefilter$/, function () {\n\t\t\treturn new AbuseFilterOverlay( {\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t} );\n\n\t\tif ( type === 'warning' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-warning' );\n\t\t} else if ( type === 'disallow' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-disallow' );\n\t\t\tthis.isDisallowed = true;\n\t\t}\n\n\t\tthis.$el.find( '.message p' ).text( msg );\n\t\tthis.$el.removeClass( 'hidden' );\n\t},\n\n\t/**\n\t * Hide the panel.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\thide: function () {\n\t\tthis.$el.addClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = AbuseFilterPanel;\n","'use strict';\nvar Drawer = require( '../mobile.startup/Drawer' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n * @class BlockReason\n * @extends Drawer\n */\nfunction BlockMessage() {\n\tDrawer.apply( this, arguments );\n}\n\nmfExtend( BlockMessage, Drawer, {\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\tdefaults: util.extend( {}, Drawer.prototype.defaults, {\n\t\tstopHandIcon: new Icon( {\n\t\t\tname: 'stop-hand'\n\t\t} ).options,\n\t\tuserIcon: new Icon( {\n\t\t\ttagName: 'span',\n\t\t\tname: 'profile'\n\t\t} ).options,\n\t\tokButton: new Button( {\n\t\t\tlabel: mw.msg( 'ok' ),\n\t\t\ttagName: 'button',\n\t\t\tprogressive: true,\n\t\t\tadditionalClassNames: 'cancel'\n\t\t} ).options,\n\t\tcreateDetailsAnchorHref: function () {\n\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + this.blockId } );\n\t\t},\n\t\tcreateDetailsAnchorLabel: function () {\n\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t},\n\t\tcreateTitle: function () {\n\t\t\treturn this.partial ? mw.msg( 'mobile-frontend-editor-blocked-drawer-title-partial' ) : mw.msg( 'mobile-frontend-editor-blocked-drawer-title' );\n\t\t},\n\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\tcreatorHeader: function () {\n\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\tthis.user.options.gender || 'unknown' );\n\t\t},\n\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t} ),\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Drawer.prototype.templatePartials, {\n\t\tbutton: Button.prototype.template,\n\t\ticon: Icon.prototype.template\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\tonShowDrawer: function () {\n\t\tvar wiki = mw.config.get( 'wgDBname' );\n\n\t\tDrawer.prototype.onShowDrawer.apply( this );\n\n\t\tif ( mw.config.get( 'wgEnableBlockNoticeStats' ) ) {\n\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.shown', 1 );\n\t\t}\n\t},\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'BlockMessage.hogan' )\n} );\n\nmodule.exports = BlockMessage;\n","var util = require( '../mobile.startup/util' ),\n\tparseSaveError = require( './parseSaveError' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {number} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\t// return an empty section for new pages\n\tthis.content = options.isNewPage ? '' : undefined;\n\tthis.hasChanged = false;\n}\n\nEditorGateway.prototype = {\n\t/**\n\t * Get the block (if there is one) from the result.\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\t// Preload library used by EditorOverlay\n\t\t\t\t// to format block expiry datetime and duration\n\t\t\t\tmw.loader.load( 'moment' );\n\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo,\n\t\t\t\tuserinfo: self.userinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\tmeta: 'userinfo',\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full',\n\t\t\t\tuiprop: 'options'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See Bug 50136 - passing rvsection will fail with non wikitext\n\t\t\tif ( util.isNumeric( this.sectionId ) ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tself.content = '';\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\tself.userinfo = resp.query.userinfo;\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Mark content as modified and set text that should be prepended to given\n\t * section when #save is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} text Text to be prepended.\n\t */\n\tsetPrependText: function ( text ) {\n\t\tthis.prependtext = text;\n\t\tthis.hasChanged = true;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t} else if ( self.prependtext ) {\n\t\t\t\tapiOptions.prependtext = self.prependtext;\n\t\t\t}\n\n\t\t\tif ( util.isNumeric( self.sectionId ) ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve();\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( parseSaveError( data ) );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( parseSaveError( data, code || 'unknown' ) );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar result = util.Deferred(),\n\t\t\tsectionLine = '',\n\t\t\trequest,\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (bug 49218)\n\t\t\tsectionpreview: true,\n\t\t\t// needed for pre-save transform to work (bug 53692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (bug 54243)\n\t\t\tmobileformat: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\n\t\trequest = this.api.post( options );\n\t\tthis._pending = request.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// section 0 haven't a section name so skip\n\t\t\t\tif ( self.sectionId !== 0 &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined &&\n\t\t\t\t\tresp.parse.sections[0].line !== undefined\n\t\t\t\t) {\n\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t}\n\t\t\t\tresult.resolve( {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tline: sectionLine\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tresult.reject();\n\t\t\t}\n\t\t}, function () {\n\t\t\tresult.reject();\n\t\t} ).promise( {\n\t\t\tabort: function () { request.abort(); }\n\t\t} );\n\n\t\treturn result;\n\t}\n};\n\nmodule.exports = EditorGateway;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tAbuseFilterPanel = require( './AbuseFilterPanel' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tBlockMessage = require( './BlockMessage' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' );\n\n/**\n * Overlay that shows an editor\n * @class EditorOverlay\n * @uses Section\n * @uses AbuseFilterPanel\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n */\nfunction EditorOverlay( options ) {\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\tif ( options.isAnon ) {\n\t\t// add required data for anonymous editing warning\n\t\toptions = this._prepareAnonWarning( options );\n\t}\n\t// be explicit here. This may have been initialized from VE.\n\toptions.isVisualEditor = false;\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( EditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'content.hogan' ),\n\t\tmessageBox: MessageBox.prototype.template,\n\t\tanonWarning: mw.template.get( 'mobile.editor.overlay', 'EditorOverlayAnonWarning.hogan' )\n\t} ),\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @mixes EditorOverlayBase#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.loginButton options to render an sign in button\n\t * @property {Object} defaults.signupButton options to render a sign up button\n\t * @property {Object} defaults.anonButton options to render an edit anonymously button\n\t * @property {Object} defaults.warningOptions options for a MessageBox\n\t *  to display anonymous message warning\n\t * @property {mw.Api} defaults.api an api module to retrieve pages\n\t */\n\tdefaults: util.extend( {}, EditorOverlayBase.prototype.defaults, {\n\t\tloginButton: new Button( {\n\t\t\tblock: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t} ).options,\n\t\tsignupButton: new Button( {\n\t\t\tblock: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t} ).options,\n\t\tanonButton: new Button( {\n\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'continue anonymous',\n\t\t\tprogressive: true\n\t\t} ).options,\n\t\twarningOptions: {\n\t\t\tclassName: 'warningbox anon-msg',\n\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t}\n\t} ),\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar ns = mw.config.get( 'wgVisualEditorConfig' ) &&\n\t\t\tmw.config.get( 'wgVisualEditorConfig' ).namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonClickContinue: function ( ev ) {\n\t\t// handle the click on \"Edit without logging in\"\n\t\tif ( this.options.isAnon && this.$el.find( ev.target ).hasClass( 'anonymous' ) ) {\n\t\t\tthis._showEditorAfterWarning();\n\t\t\treturn false;\n\t\t}\n\t\tEditorOverlayBase.prototype.onClickContinue.apply( this, arguments );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this;\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\t// If the user tries to switch to the VisualEditor,\n\t\t\t\t\t\t// check if any changes have been made,\n\t\t\t\t\t\t// and if so, tell the user they have to save first.\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\t// TODO: Be more selective in which options we pass between editors\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.options );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t\t\t\t\tif ( window.confirm( mw.msg( 'mobile-frontend-editor-switch-confirm' ) ) ) {\n\t\t\t\t\t\t\t\tself.onStageChanges();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( self.options.isAnon ) {\n\t\t\tthis.$anonWarning = this.$el.find( '.anonwarning' );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$el.find( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t\tthis.hideSpinner();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\tthis.abuseFilterPanel = new AbuseFilterPanel( {\n\t\t\toverlayManager: this.overlayManager\n\t\t} ).appendTo( this.$el.find( '.panels' ) );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content.on( 'input', this._resizeEditor.bind( this ) );\n\n\t\tif ( !self.options.isAnon ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {Object} options object\n\t * @return {Object} Object with all options\n\t */\n\t_prepareAnonWarning: function ( options ) {\n\t\tvar params = util.extend( {\n\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\treturnto: options.returnTo || mw.config.get( 'wgPageName' ),\n\t\t\t\treturntoquery: 'action=edit&section=' + options.sectionId,\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams );\n\n\t\toptions.loginButton = util.extend( {\n\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params )\n\t\t}, this.defaults.loginButton );\n\t\toptions.signupButton = util.extend( {\n\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) )\n\t\t}, this.defaults.signupButton );\n\n\t\treturn options;\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_showEditorAfterWarning: function () {\n\t\tthis.showSpinner();\n\t\tthis.$anonWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass( 'error' ).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass( 'error' ).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.abuseFilterPanel.hide();\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @param {string} data\n\t * @return {string|false}\n\t */\n\t_parseBlockInfo: function ( data ) {\n\t\tvar blockInfo, expiry, reason,\n\t\t\tmoment = window.moment;\n\n\t\t// Workaround to parse a message parameter for mw.message, see T96885\n\t\tfunction jqueryMsgParse( wikitext ) {\n\t\t\tvar parser, ast;\n\t\t\t// eslint-disable-next-line new-cap\n\t\t\tparser = new mw.jqueryMsg.parser();\n\t\t\ttry {\n\t\t\t\tast = parser.wikiTextToAst( wikitext );\n\t\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t\t} catch ( e ) {\n\t\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t\t// can't parse templates.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tblockInfo = {\n\t\t\tpartial: data.blockinfo.blockpartial || false,\n\t\t\tuser: data.userinfo,\n\t\t\tcreator: {\n\t\t\t\tname: data.blockinfo.blockedby,\n\t\t\t\t// NS_USER === 2\n\t\t\t\turl: mw.util.getUrl(\n\t\t\t\t\tmw.config.get( 'wgFormattedNamespaces' )[2] + ':' +\n\t\t\t\t\tdata.blockinfo.blockedby\n\t\t\t\t)\n\t\t\t},\n\t\t\texpiry: null,\n\t\t\tduration: null,\n\t\t\treason: '',\n\t\t\tblockId: data.blockinfo.blockid\n\t\t};\n\n\t\texpiry = data.blockinfo.blockexpiry;\n\t\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( expiry ) === -1 ) {\n\t\t\tblockInfo.expiry = moment( expiry ).format( 'LLL' );\n\t\t\tblockInfo.duration = moment().to( expiry, true );\n\t\t}\n\n\t\treason = data.blockinfo.blockreason;\n\t\tif ( reason ) {\n\t\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} else {\n\t\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\t}\n\n\t\treturn blockInfo;\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this,\n\t\t\t$el = this.$el;\n\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\t\t$el.addClass( 'overlay-loading' );\n\n\t\tthis.gateway.getContent()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar block, message,\n\t\t\t\t\tcontent = result.text;\n\n\t\t\t\tself.setContent( content );\n\t\t\t\t// check if user is blocked\n\t\t\t\tif ( result.blockinfo ) {\n\t\t\t\t\t// Lazy-load moment only if it's needed,\n\t\t\t\t\t// it's somewhat large (it is already used on\n\t\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\t\tmw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\t\tblock = self._parseBlockInfo( result );\n\t\t\t\t\t\tmessage = new BlockMessage( block );\n\t\t\t\t\t\tmessage.toggle();\n\t\t\t\t\t\tself.hide();\n\t\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t}\n\t\t\t}, function () {\n\t\t\t\tself.reportError( mw.msg( 'mobile-frontend-editor-error-loading' ) );\n\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing EditorOverlay with it\n\t * based on the current option values.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {Object} options Object passed to the constructor\n\t */\n\t_switchToVisualEditor: function ( options ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tmw.storage.set( 'preferredEditor', 'VisualEditor' );\n\t\t// Load the VisualEditor and replace the SourceEditor overlay with it\n\t\tthis.showSpinner();\n\t\tthis.$content.hide();\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\toptions.EditorOverlay = EditorOverlay;\n\t\t\t\tself.hideSpinner();\n\t\t\t\t// Unset classes from other editor\n\t\t\t\tdelete options.className;\n\t\t\t\tself.switching = true;\n\t\t\t\tself.overlayManager.replaceCurrent( new VisualEditorOverlay( options ) );\n\t\t\t\tself.switching = false;\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.hideSpinner();\n\t\t\t\tself.$content.show();\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Reveals an abuse filter panel inside the view.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\t_showAbuseFilter: function ( type, message ) {\n\t\tthis.abuseFilterPanel.show( type, message );\n\t\tthis.showHidden( '.save-header' );\n\t\t// disable continue and save buttons, reenabled when user changes content\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', this.abuseFilterPanel.isDisallowed );\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save button. Handles logging and submitting\n\t * the save action to the editor API.\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function () {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete();\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar heading, msg;\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tthis.captchaId = data.details.id;\n\t\t\tthis.handleCaptcha( data.details );\n\t\t} else if ( data.type === 'abusefilter' ) {\n\t\t\tthis._showAbuseFilter( data.details.type, data.details.message );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tif ( data.type === 'readonly' ) {\n\t\t\t\theading = mw.msg( 'apierror-readonly' );\n\t\t\t}\n\n\t\t\tif ( msg || heading ) {\n\t\t\t\tthis.reportError( msg, heading );\n\t\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = EditorOverlay;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for EditorOverlay\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {number|null} params.editCount of user\n */\nfunction EditorOverlayBase( params ) {\n\tvar self = this,\n\t\toptions = util.extend(\n\t\t\t{\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\t// FIXME: Pass this in via options rather than accessing mw.config\n\tthis.config = mw.config.get( 'wgMFEditorOptions' );\n\tthis.sessionId = options.sessionId;\n\tthis.overlayManager = options.overlayManager;\n\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t// Returns true if content has changed\n\t\ttest: function () {\n\t\t\t// Check if content has changed\n\t\t\treturn self.hasChanged();\n\t\t},\n\n\t\t// Message to show the user, if content has changed\n\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t// Event namespace\n\t\tnamespace: 'editwarning'\n\t} );\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.cancelMsg Caption for cancel button on edit form.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.waitMsg Text that displays while a page edit is being saved.\n\t * @property {string} defaults.waitIcon HTML of the icon that displays while a page edit\n\t * is being saved.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcancelMsg: mw.msg( 'mobile-frontend-editor-cancel' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\twaitMsg: mw.msg( 'mobile-frontend-editor-wait' ),\n\t\t// icons.spinner can't be used,\n\t\t// the spinner class changes to display:none in onStageChanges\n\t\twaitIcon: new Icon( {\n\t\t\tname: 'spinner',\n\t\t\tadditionalClassNames: 'savespinner loading'\n\t\t} ).toHtmlString(),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\teditHeader: mw.template.get( 'mobile.editor.overlay', 'editHeader.hogan' ),\n\t\tpreviewHeader: mw.template.get( 'mobile.editor.overlay', 'previewHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'EditorOverlayBase.hogan' ),\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'mf.schemaEditAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Handles reloading the page, showing toast\n\t * messages.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tvar msg,\n\t\t\t$window = util.getWindow(),\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\t\ttoast.showOnPageReload( msg, { type: 'success' } );\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess'\n\t\t} );\n\t\tif ( self.sectionLine ) {\n\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = self.sectionLine;\n\t\t} else {\n\t\t\t// Cancel the hash fragment\n\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t// and may conflict with the window.reload call below.\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#';\n\t\t}\n\n\t\t$window.off( 'beforeunload.mfeditorwarning' );\n\n\t\t// Note the \"#\" may be in the URL.\n\t\t// If so, using window.location alone will not reload the page\n\t\t// we need to forcefully refresh\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.location.reload();\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar key = data && data.details && data.details.code,\n\t\t\ttypeMap = {\n\t\t\t\teditconflict: 'editConflict',\n\t\t\t\twasdeleted: 'editPageDeleted',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\tspamprotectiontext: 'extensionSpamBlacklist',\n\t\t\t\t'titleblacklist-forbidden-edit': 'extensionTitleBlacklist'\n\t\t\t};\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tkey = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: saveFailureMessage( data ),\n\t\t\ttype: typeMap[key] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text of message to display to user\n\t * @param {string} heading heading text to display to user\n\t */\n\treportError: function ( text, heading ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'errorbox',\n\t\t\tmsg: text,\n\t\t\theading: heading\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\t// log edit attempt\n\t\t// TODO: if VE/NWE become the default, or even loadable-by-URL, this\n\t\t// logging needs to be moved into the individual overlays, because postRender\n\t\t// for VE still wouldn't technically be 'ready'.\n\t\tthis.log( {\n\t\t\taction: 'ready'\n\t\t} );\n\t\tthis.log( {\n\t\t\taction: 'loaded'\n\t\t} );\n\n\t\t// decide what happens, when the user clicks the continue button\n\t\tif ( this.config.skipPreview ) {\n\t\t\t// skip the preview and save the changes\n\t\t\tthis.nextStep = 'onSaveBegin';\n\t\t\tthis.$el.find( '.continue' ).text( this.defaults.saveMsg );\n\t\t} else {\n\t\t\t// default: show the preview step\n\t\t\tthis.nextStep = 'onStageChanges';\n\t\t}\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis[this.nextStep]();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean|jQuery.Promise} Boolean, or promise resolving with a boolean\n\t */\n\thide: function () {\n\t\tvar windowManager,\n\t\t\tself = this;\n\t\tif ( this.hasChanged() ) {\n\t\t\twindowManager = OO.ui.getWindowManager();\n\t\t\twindowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\treturn windowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.allowCloseWindow.release();\n\t\t\t\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\t\t\t\tOverlay.prototype.hide.call( self );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.allowCloseWindow.release();\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\treturn Overlay.prototype.hide.call( self );\n\t},\n\t/**\n\t * Check, if the user should be asked if they really want to leave the page.\n\t * Returns false, if he hasn't made changes, otherwise true.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {boolean} [force] Whether this function should always return false\n\t * @return {boolean}\n\t */\n\tshouldConfirmLeave: function ( force ) {\n\t\tif ( force || !this.hasChanged() ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t},\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","/* global ve */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Overlay for VisualEditor view\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {EditorOverlay} options.EditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEdtiorOverlay and EditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tthis.applyHeaderOptions( options, true );\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.EditorOverlay = options.EditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: mw.template.get( 'mobile.editor.overlay', 'toolbarVE.hogan' ),\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'contentVE.hogan' )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Set options that apply specifically to VisualEditorOverlay but not\n\t * EditorOverlay so that an EditorOverlay instance can be created effortlessly.\n\t * FIXME: Must be smarter way to do this.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {boolean} isVE whether the options are being generated for a VisualEditorOverlay\n\t *  or a EditorOverlay\n\t */\n\tapplyHeaderOptions: function ( options, isVE ) {\n\t\t// Set things that are known to be true.\n\t\toptions.hasToolbar = isVE;\n\t\toptions.isVisualEditor = isVE;\n\t},\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t\t$element: this.$el,\n\t\t\t// || null so that scrolling is not triggered for the lead (0) section\n\t\t\t// (which has no header to scroll to)\n\t\t\tsection: this.options.sectionId || null\n\t\t} );\n\t\tthis.target.load( this.options.dataPromise );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thide: function () {\n\t\tvar overlay = this,\n\t\t\tretval = EditorOverlayBase.prototype.hide.apply( this, arguments );\n\t\tif ( retval === true ) {\n\t\t\tthis.destroyTarget();\n\t\t} else if ( retval && retval.then ) {\n\t\t\tretval.then( function ( hide ) {\n\t\t\t\tif ( hide ) {\n\t\t\t\t\toverlay.destroyTarget();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\treturn retval;\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\n\t/**\n\t * Reveal the editing interface.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {EditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToSourceEditor: function () {\n\t\tvar self = this,\n\t\t\tEditorOverlay = this.EditorOverlay;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tmw.storage.set( 'preferredEditor', 'SourceEditor' );\n\t\tthis.showSpinner();\n\t\tthis.$el.find( '.surface' ).hide();\n\t\tself.hideSpinner();\n\t\tself.applyHeaderOptions( self.options, false );\n\t\t// Unset classes from other editor\n\t\tdelete self.options.className;\n\t\tself.switching = true;\n\t\tself.overlayManager.replaceCurrent( new EditorOverlay( self.options ) );\n\t\tself.switching = false;\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\t\tthis.destroyTarget();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\treturn this.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified() &&\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\t!this.saved;\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tEditorOverlay = require( './EditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tschemaEditAttemptStep = require( './schemaEditAttemptStep' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/EditorOverlay', EditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n// setup schema:edit logging\nschemaEditAttemptStep();\n","/**\n * Build a save failure message from the API response\n * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n * @return {string} message describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\tvar key = data && data.details && data.details.code,\n\t\t// When save failed with one of these error codes, the returned\n\t\t// message in response.error.info will be forwarded to the user.\n\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\twhitelistedErrorInfo = [\n\t\t\t'blocked',\n\t\t\t'autoblocked'\n\t\t];\n\tif ( data.type === 'readonly' ) {\n\t\treturn data.details.readonlyreason;\n\t}\n\tif ( key === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t} else if ( whitelistedErrorInfo.indexOf( key ) > -1 ) {\n\t\treturn data.error.info;\n\t}\n\treturn mw.msg( 'mobile-frontend-editor-error' );\n};\n","module.exports = function () {\n\tvar trackdebug = !!mw.util.getParamValue( 'trackdebug' );\n\n\tif ( mw.loader.getState( 'schema.EditAttemptStep' ) === null && !trackdebug ) {\n\t\treturn;\n\t}\n\n\tmw.loader.using( [ 'ext.eventLogging.subscriber' ] ).then( function () {\n\t\tvar // Schema provided by ext.eventLogging.subscriber class\n\t\t\tSchema = mw.eventLog.Schema,\n\t\t\tuser = mw.user,\n\t\t\tsampleRate = mw.config.get( 'wgWMESchemaEditAttemptStepSamplingRate' ),\n\t\t\tactionPrefixMap = {\n\t\t\t\tsaveIntent: 'save_intent',\n\t\t\t\tsaveAttempt: 'save_attempt',\n\t\t\t\tsaveSuccess: 'save_success',\n\t\t\t\tsaveFailure: 'save_failure'\n\t\t\t},\n\t\t\ttiming = {},\n\t\t\t/**\n\t\t\t * Edit schema\n\t\t\t * https://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t\t\t */\n\t\t\t/* eslint-disable camelcase */\n\t\t\tschemaEditAttemptStep = new Schema(\n\t\t\t\t'EditAttemptStep',\n\t\t\t\tsampleRate,\n\t\t\t\t{\n\t\t\t\t\tpage_id: mw.config.get( 'wgArticleId' ),\n\t\t\t\t\trevision_id: mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\tpage_title: mw.config.get( 'wgPageName' ),\n\t\t\t\t\tpage_ns: mw.config.get( 'wgNamespaceNumber' ),\n\t\t\t\t\tuser_id: user.getId(),\n\t\t\t\t\tuser_class: user.isAnon() ? 'IP' : undefined,\n\t\t\t\t\tuser_editcount: mw.config.get( 'wgUserEditCount', 0 ),\n\t\t\t\t\tmw_version: mw.config.get( 'wgVersion' ),\n\t\t\t\t\tplatform: 'phone',\n\t\t\t\t\tintegration: 'page',\n\t\t\t\t\tpage_token: user.getPageviewToken(),\n\t\t\t\t\tsession_token: user.sessionId(),\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t);\n\t\t\t/* eslint-enable camelcase */\n\n\t\tfunction log() {\n\t\t\t// mw.log is a no-op unless resource loader is in debug mode, so\n\t\t\t// this allows trackdebug to work independently (T211698)\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply( console, arguments );\n\t\t}\n\n\t\tfunction computeDuration( action, event, timeStamp ) {\n\t\t\t// This is duplicated from the VisualEditor extension\n\t\t\t// (ve.init.mw.trackSubscriber.js). Changes to this should be kept in\n\t\t\t// sync with that file, so the data remains consistent.\n\t\t\tif ( event.timing !== undefined ) {\n\t\t\t\treturn event.timing;\n\t\t\t}\n\n\t\t\tswitch ( action ) {\n\t\t\t\tcase 'ready':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'loaded':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'saveIntent':\n\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\tcase 'saveAttempt':\n\t\t\t\t\treturn timeStamp - timing.saveIntent;\n\t\t\t\tcase 'saveSuccess':\n\t\t\t\tcase 'saveFailure':\n\t\t\t\t\t// HERE BE DRAGONS: the caller must compute these themselves\n\t\t\t\t\t// for sensible results. Deliberately sabotage any attempts to\n\t\t\t\t\t// use the default by returning -1\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Do not rely on default timing value for saveSuccess/saveFailure' );\n\t\t\t\t\treturn -1;\n\t\t\t\tcase 'abort':\n\t\t\t\t\tswitch ( event.abort_type ) {\n\t\t\t\t\t\tcase 'preinit':\n\t\t\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\t\t\tcase 'nochange':\n\t\t\t\t\t\tcase 'switchwith':\n\t\t\t\t\t\tcase 'switchwithout':\n\t\t\t\t\t\tcase 'switchnochange':\n\t\t\t\t\t\tcase 'abandon':\n\t\t\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\t\t\tcase 'abandonMidsave':\n\t\t\t\t\t\t\treturn timeStamp - timing.saveAttempt;\n\t\t\t\t\t}\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized abort type', event.type );\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized action', action );\n\t\t\treturn -1;\n\t\t}\n\n\t\tmw.trackSubscribe( 'mf.schemaEditAttemptStep', function ( topic, data, timeStamp ) {\n\t\t\tvar actionPrefix = actionPrefixMap[ data.action ] || data.action,\n\t\t\t\tduration = 0;\n\n\t\t\ttimeStamp = timeStamp || this.timeStamp; // I8e82acc12 back-compat\n\n\t\t\tdata[actionPrefix + '_type'] = data.type;\n\t\t\tdata[actionPrefix + '_mechanism'] = data.mechanism;\n\t\t\tif ( data.action !== 'init' ) {\n\t\t\t\tduration = Math.round( computeDuration( data.action, data, timeStamp ) );\n\t\t\t\tdata[actionPrefix + '_timing'] = duration;\n\t\t\t}\n\n\t\t\t// Remove renamed properties\n\t\t\tdelete data.type;\n\t\t\tdelete data.mechanism;\n\t\t\tdata[actionPrefix + '_message'] = data.message;\n\t\t\tdelete data.message;\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tdata.is_oversample =\n\t\t\t\t!mw.eventLog.inSample( 1 / sampleRate );\n\n\t\t\tif ( data.action === 'abort' && data.abort_type !== 'switchnochange' ) {\n\t\t\t\ttiming = {};\n\t\t\t} else {\n\t\t\t\ttiming[ data.action ] = timeStamp;\n\t\t\t}\n\n\t\t\t// Switching between visual and source produces a chain of\n\t\t\t// abort/ready events and no init event, so suppress them for\n\t\t\t// consistency with desktop VE's logging.\n\t\t\tif ( data.abort_type === 'switchnochange' ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( timing.abort && data.action === 'ready' ) {\n\t\t\t\tdelete timing.abort;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( trackdebug ) {\n\t\t\t\tlog( topic + '.' + data.action, duration + 'ms', data );\n\t\t\t} else {\n\t\t\t\tschemaEditAttemptStep.log( data, mw.config.get( 'wgWMESchemaEditAttemptStepOversample' ) ? 1 : sampleRate );\n\t\t\t}\n\t\t} );\n\n\t} );\n};\n"],"sourceRoot":""}