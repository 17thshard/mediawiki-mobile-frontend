{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterPanel.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/schemaEditAttemptStep.js"],"names":["Button","__webpack_require__","util","mfExtend","Overlay","AbuseFilterOverlay","props","call","this","extend","className","defaults","prototype","confirmButton","additionalClassNames","progressive","options","templatePartials","button","template","content","mw","get","postRender","apply","$","attr","module","exports","View","AbuseFilterPanel","isDisallowed","overlayManager","readMoreMsg","msg","show","type","message","add","text","$el","removeClass","hide","addClass","Drawer","Icon","BlockMessage","arguments","stopHandIcon","name","userIcon","tagName","okButton","label","createTitle","partial","reasonHeader","creatorHeader","user","gender","expiryHeader","icon","onShowDrawer","wiki","config","track","parseSaveError","actionParams","EditorGateway","api","title","sectionId","oldId","isNewPage","undefined","hasChanged","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","loader","load","getContent","self","resolve","Deferred","userinfo","prop","meta","rvprop","titles","intestactions","intestactionsdetail","uiprop","rvstartid","isNumeric","rvsection","then","resp","revision","reject","query","pages","missing","revisions","timestamp","originalContent","setContent","setPrependText","prependtext","save","result","apiOptions","action","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","saveContent","abortPreview","_pending","abort","getPreview","request","sectionLine","sectionpreview","pst","mobileformat","post","parse","sections","line","promise","EditorOverlayBase","Section","VisualEditorOverlay","MessageBox","EditorOverlay","gateway","readOnly","isVisualEditorEnabled","editSwitcher","editingMsg","isAnon","_prepareAnonWarning","isVisualEditor","previewingMsg","events","input .wikitext-editor","messageBox","anonWarning","loginButton","block","signupButton","anonButton","warningOptions","editor","ns","namespaces","onInputWikitextEditor","val","onClickContinue","ev","target","hasClass","_showEditorAfterWarning","onClickBack","_hidePreview","using","switchToolbar","toolFactory","OO","ui","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","classes","on","mode","window","confirm","onStageChanges","_switchToVisualEditor","setup","include","find","html","$element","emit","$preview","$content","$anonWarning","$anonHiddenButtons","hideSpinner","abuseFilterPanel","appendTo","_resizeEditor","bind","_loadContent","params","returnto","returnTo","returntoquery","warning","queryParams","signupParams","signupQueryParams","href","getUrl","showSpinner","hideSpinnerAndShowPreview","scrollTop","getDocument","mainpage","parsedText","parsedSectionLine","parseHTML","el","scrollTo","showHidden","container","$scrollContainer","Element","static","getClosestScrollableContainer","length","css","height","_parseBlockInfo","blockInfo","expiry","reason","moment","blockpartial","creator","blockedby","url","duration","blockexpiry","format","to","blockreason","wikitext","parser","ast","jqueryMsg","wikiTextToAst","emitter","e","jqueryMsgParse","escape","escaped","toggle","reportError","log","mechanism","storage","set","targetLoader","addPlugin","loadModules","replaceCurrent","_showAbuseFilter","onSaveBegin","confirmAborted","location","onSaveComplete","onSaveFailure","heading","details","id","handleCaptcha","saveFailureMessage","PageGateway","toast","mwUser","EditVeTool","toolGroup","super","isBorderBox","click .back","click .continue","click .submit","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","sessionId","allowCloseWindow","confirmCloseWindow","test","namespace","inheritClass","Tool","group","onSelect","onUpdateState","hasToolbar","continueMsg","cancelMsg","closeMsg","summaryMsg","waitMsg","waitIcon","toHtmlString","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","editHeader","previewHeader","saveHeader","editor_interface","editing_session_id","confirmSave","$window","getWindow","invalidatePage","showOnPageReload","hash","off","reload","key","editconflict","wasdeleted","abusefilter-disallowed","captcha","spamprotectiontext","titleblacklist-forbidden-edit","readonlyreason","info","errorNotice","$errorNoticeContainer","hideErrorNotice","empty","skipPreview","nextStep","saveMsg","hook","fire","onExitClick","onClickSubmit","windowManager","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","release","shouldConfirmLeave","force","$input","captchaShown","setTimeout","mime","detach","question","applyHeaderOptions","hasFixedHeader","isVE","destroyTarget","destroy","init","targetFactory","create","dataPromise","saved","overlay","retval","switchToEditor","switchToSourceEditor","getSurface","getModel","hasBeenModified","m","schemaEditAttemptStep","define","trackdebug","getParamValue","getState","Schema","eventLog","sampleRate","actionPrefixMap","saveIntent","saveAttempt","saveSuccess","saveFailure","timing","page_id","revision_id","page_title","page_ns","user_id","getId","user_class","user_editcount","mw_version","platform","integration","page_token","getPageviewToken","session_token","version","trackSubscribe","topic","timeStamp","actionPrefix","Math","round","event","ready","warn","abort_type","computeDuration","is_oversample","inSample","console"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["var Button = require( '../mobile.startup/Button' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Overlay that shows a message about abuse.\n * This overlay is rendered when the error code from the API\n * is related to the abusefilter extension.\n * @class AbuseFilterOverlay\n * @extends Overlay\n * @param {Object} props\n */\nfunction AbuseFilterOverlay( props ) {\n\tOverlay.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'overlay abusefilter-overlay'\n\t\t}, props )\n\t);\n}\n\nmfExtend( AbuseFilterOverlay, Overlay, {\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.confirmButton options for a confirm Button\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tconfirmButton: new Button( {\n\t\t\tadditionalClassNames: 'cancel',\n\t\t\tprogressive: true\n\t\t} ).options\n\t} ),\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tbutton: Button.prototype.template,\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'AbuseFilterOverlay.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\t// make links open in separate tabs\n\t\tthis.$( 'a' ).attr( 'target', '_blank' );\n\t}\n} );\n\nmodule.exports = AbuseFilterOverlay;\n","var util = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAbuseFilterOverlay = require( './AbuseFilterOverlay' );\n\n/**\n * Panel that shows an error message related to the abusefilter extension.\n * @class AbuseFilterPanel\n * @extends View\n * @uses AbuseFilterOverlay\n *\n * @param {Object} options Configuration options\n * FIXME: should extend Panel not View. Or the name should be changed to something meaningful.\n */\nfunction AbuseFilterPanel( options ) {\n\tthis.isDisallowed = false;\n\tthis.overlayManager = options.overlayManager;\n\tView.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'panel hidden'\n\t\t}, options )\n\t);\n}\n\nmfExtend( AbuseFilterPanel, View, {\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.readMoreMsg A caption for the button\n\t * allowing the user to read more about the problems with their edit.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t */\n\tdefaults: {\n\t\treadMoreMsg: mw.msg( 'mobile-frontend-editor-abusefilter-read-more' )\n\t},\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'AbuseFilterPanel.hogan' ),\n\t/**\n\t * Show the panel. Create a route to show AbuseFilterOverlay with message.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\tshow: function ( type, message ) {\n\t\tvar msg;\n\n\t\t// OverlayManager will replace previous instance of the route if present\n\t\tthis.overlayManager.add( /^\\/abusefilter$/, function () {\n\t\t\treturn new AbuseFilterOverlay( {\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t} );\n\n\t\tif ( type === 'warning' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-warning' );\n\t\t} else if ( type === 'disallow' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-disallow' );\n\t\t\tthis.isDisallowed = true;\n\t\t}\n\n\t\tthis.$( '.message p' ).text( msg );\n\t\tthis.$el.removeClass( 'hidden' );\n\t},\n\n\t/**\n\t * Hide the panel.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\thide: function () {\n\t\tthis.$el.addClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = AbuseFilterPanel;\n","'use strict';\nvar Drawer = require( '../mobile.startup/Drawer' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n * @class BlockReason\n * @extends Drawer\n */\nfunction BlockMessage() {\n\tDrawer.apply( this, arguments );\n}\n\nmfExtend( BlockMessage, Drawer, {\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\tdefaults: util.extend( {}, Drawer.prototype.defaults, {\n\t\tstopHandIcon: new Icon( {\n\t\t\tname: 'stop-hand'\n\t\t} ).options,\n\t\tuserIcon: new Icon( {\n\t\t\ttagName: 'span',\n\t\t\tname: 'profile'\n\t\t} ).options,\n\t\tokButton: new Button( {\n\t\t\tlabel: mw.msg( 'ok' ),\n\t\t\ttagName: 'button',\n\t\t\tprogressive: true,\n\t\t\tadditionalClassNames: 'cancel'\n\t\t} ).options,\n\t\tcreateTitle: function () {\n\t\t\treturn this.partial ? mw.msg( 'mobile-frontend-editor-blocked-drawer-title-partial' ) : mw.msg( 'mobile-frontend-editor-blocked-drawer-title' );\n\t\t},\n\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\tcreatorHeader: function () {\n\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\tthis.user.options.gender || 'unknown' );\n\t\t},\n\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t} ),\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Drawer.prototype.templatePartials, {\n\t\tbutton: Button.prototype.template,\n\t\ticon: Icon.prototype.template\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\tonShowDrawer: function () {\n\t\tvar wiki = mw.config.get( 'wgDBname' );\n\n\t\tDrawer.prototype.onShowDrawer.apply( this );\n\n\t\tif ( mw.config.get( 'wgEnableBlockNoticeStats' ) ) {\n\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.shown', 1 );\n\t\t}\n\t},\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'BlockMessage.hogan' )\n} );\n\nmodule.exports = BlockMessage;\n","var util = require( '../mobile.startup/util' ),\n\tparseSaveError = require( './parseSaveError' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {number} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\t// return an empty section for new pages\n\tthis.content = options.isNewPage ? '' : undefined;\n\tthis.hasChanged = false;\n}\n\nEditorGateway.prototype = {\n\t/**\n\t * Get the block (if there is one) from the result.\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\t// Preload library used by EditorOverlay\n\t\t\t\t// to format block expiry datetime and duration\n\t\t\t\tmw.loader.load( 'moment' );\n\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo,\n\t\t\t\tuserinfo: self.userinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\tmeta: 'userinfo',\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full',\n\t\t\t\tuiprop: 'options'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See Bug 50136 - passing rvsection will fail with non wikitext\n\t\t\tif ( util.isNumeric( this.sectionId ) ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tself.content = '';\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\tself.userinfo = resp.query.userinfo;\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Mark content as modified and set text that should be prepended to given\n\t * section when #save is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} text Text to be prepended.\n\t */\n\tsetPrependText: function ( text ) {\n\t\tthis.prependtext = text;\n\t\tthis.hasChanged = true;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t} else if ( self.prependtext ) {\n\t\t\t\tapiOptions.prependtext = self.prependtext;\n\t\t\t}\n\n\t\t\tif ( util.isNumeric( self.sectionId ) ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve();\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( parseSaveError( data ) );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( parseSaveError( data, code || 'unknown' ) );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar result = util.Deferred(),\n\t\t\tsectionLine = '',\n\t\t\trequest,\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (bug 49218)\n\t\t\tsectionpreview: true,\n\t\t\t// needed for pre-save transform to work (bug 53692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (bug 54243)\n\t\t\tmobileformat: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\n\t\trequest = this.api.post( options );\n\t\tthis._pending = request.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// section 0 haven't a section name so skip\n\t\t\t\tif ( self.sectionId !== 0 &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined &&\n\t\t\t\t\tresp.parse.sections[0].line !== undefined\n\t\t\t\t) {\n\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t}\n\t\t\t\tresult.resolve( {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tline: sectionLine\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tresult.reject();\n\t\t\t}\n\t\t}, function () {\n\t\t\tresult.reject();\n\t\t} ).promise( {\n\t\t\tabort: function () { request.abort(); }\n\t\t} );\n\n\t\treturn result;\n\t}\n};\n\nmodule.exports = EditorGateway;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tAbuseFilterPanel = require( './AbuseFilterPanel' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tBlockMessage = require( './BlockMessage' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' );\n\n/**\n * Overlay that shows an editor\n * @class EditorOverlay\n * @uses Section\n * @uses AbuseFilterPanel\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n */\nfunction EditorOverlay( options ) {\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\tif ( options.isAnon ) {\n\t\t// add required data for anonymous editing warning\n\t\toptions = this._prepareAnonWarning( options );\n\t}\n\t// be explicit here. This may have been initialized from VE.\n\toptions.isVisualEditor = false;\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( EditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'content.hogan' ),\n\t\tmessageBox: MessageBox.prototype.template,\n\t\tanonWarning: mw.template.get( 'mobile.editor.overlay', 'EditorOverlayAnonWarning.hogan' )\n\t} ),\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @mixes EditorOverlayBase#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.loginButton options to render an sign in button\n\t * @property {Object} defaults.signupButton options to render a sign up button\n\t * @property {Object} defaults.anonButton options to render an edit anonymously button\n\t * @property {Object} defaults.warningOptions options for a MessageBox\n\t *  to display anonymous message warning\n\t * @property {mw.Api} defaults.api an api module to retrieve pages\n\t */\n\tdefaults: util.extend( {}, EditorOverlayBase.prototype.defaults, {\n\t\tloginButton: new Button( {\n\t\t\tblock: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t} ).options,\n\t\tsignupButton: new Button( {\n\t\t\tblock: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t} ).options,\n\t\tanonButton: new Button( {\n\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'continue anonymous',\n\t\t\tprogressive: true\n\t\t} ).options,\n\t\twarningOptions: {\n\t\t\tclassName: 'warningbox anon-msg',\n\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t}\n\t} ),\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar ns = mw.config.get( 'wgVisualEditorConfig' ) &&\n\t\t\tmw.config.get( 'wgVisualEditorConfig' ).namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$( '.wikitext-editor' ).val() );\n\t\tthis.$( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonClickContinue: function ( ev ) {\n\t\t// handle the click on \"Edit without logging in\"\n\t\tif ( this.options.isAnon && this.$( ev.target ).hasClass( 'anonymous' ) ) {\n\t\t\tthis._showEditorAfterWarning();\n\t\t\treturn false;\n\t\t}\n\t\tEditorOverlayBase.prototype.onClickContinue.apply( this, arguments );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this;\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\t// If the user tries to switch to the VisualEditor,\n\t\t\t\t\t\t// check if any changes have been made,\n\t\t\t\t\t\t// and if so, tell the user they have to save first.\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\t// TODO: Be more selective in which options we pass between editors\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.options );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t\t\t\t\tif ( window.confirm( mw.msg( 'mobile-frontend-editor-switch-confirm' ) ) ) {\n\t\t\t\t\t\t\t\tself.onStageChanges();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\tthis.$preview = this.$( '.preview' );\n\t\tthis.$content = this.$( '.wikitext-editor' );\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( self.options.isAnon ) {\n\t\t\tthis.$anonWarning = this.$( '.anonwarning' );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t\tthis.hideSpinner();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$( '.license a' ).attr( 'target', '_blank' );\n\n\t\tthis.abuseFilterPanel = new AbuseFilterPanel( {\n\t\t\toverlayManager: this.overlayManager\n\t\t} ).appendTo( this.$( '.panels' ) );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content.on( 'input', this._resizeEditor.bind( this ) );\n\n\t\tif ( !self.options.isAnon ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {Object} options object\n\t * @return {Object} Object with all options\n\t */\n\t_prepareAnonWarning: function ( options ) {\n\t\tvar params = util.extend( {\n\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\treturnto: options.returnTo || mw.config.get( 'wgPageName' ),\n\t\t\t\treturntoquery: 'action=edit&section=' + options.sectionId,\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams );\n\n\t\toptions.loginButton = util.extend( {\n\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params )\n\t\t}, this.defaults.loginButton );\n\t\toptions.signupButton = util.extend( {\n\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) )\n\t\t}, this.defaults.signupButton );\n\n\t\treturn options;\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_showEditorAfterWarning: function () {\n\t\tthis.showSpinner();\n\t\tthis.$anonWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass( 'error' ).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass( 'error' ).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.abuseFilterPanel.hide();\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$( container ).length ?\n\t\t\t\tthis.$( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @param {string} data\n\t * @return {string|false}\n\t */\n\t_parseBlockInfo: function ( data ) {\n\t\tvar blockInfo, expiry, reason,\n\t\t\tmoment = window.moment;\n\n\t\t// Workaround to parse a message parameter for mw.message, see T96885\n\t\tfunction jqueryMsgParse( wikitext ) {\n\t\t\tvar parser, ast;\n\t\t\t// eslint-disable-next-line new-cap\n\t\t\tparser = new mw.jqueryMsg.parser();\n\t\t\ttry {\n\t\t\t\tast = parser.wikiTextToAst( wikitext );\n\t\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t\t} catch ( e ) {\n\t\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t\t// can't parse templates.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tblockInfo = {\n\t\t\tpartial: data.blockinfo.blockpartial || false,\n\t\t\tuser: data.userinfo,\n\t\t\tcreator: {\n\t\t\t\tname: data.blockinfo.blockedby,\n\t\t\t\t// NS_USER === 2\n\t\t\t\turl: mw.util.getUrl(\n\t\t\t\t\tmw.config.get( 'wgFormattedNamespaces' )[2] + ':' +\n\t\t\t\t\tdata.blockinfo.blockedby\n\t\t\t\t)\n\t\t\t},\n\t\t\texpiry: null,\n\t\t\tduration: null,\n\t\t\treason: ''\n\t\t};\n\n\t\texpiry = data.blockinfo.blockexpiry;\n\t\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( expiry ) === -1 ) {\n\t\t\tblockInfo.expiry = moment( expiry ).format( 'LLL' );\n\t\t\tblockInfo.duration = moment().to( expiry, true );\n\t\t}\n\n\t\treason = data.blockinfo.blockreason;\n\t\tif ( reason ) {\n\t\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} else {\n\t\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\t}\n\n\t\treturn blockInfo;\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this,\n\t\t\t$el = this.$el;\n\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\t\t$el.addClass( 'overlay-loading' );\n\n\t\tthis.gateway.getContent()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar block, message,\n\t\t\t\t\tcontent = result.text;\n\n\t\t\t\tself.setContent( content );\n\t\t\t\t// check if user is blocked\n\t\t\t\tif ( result.blockinfo ) {\n\t\t\t\t\t// Lazy-load moment only if it's needed,\n\t\t\t\t\t// it's somewhat large (it is already used on\n\t\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\t\tmw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\t\tblock = self._parseBlockInfo( result );\n\t\t\t\t\t\tmessage = new BlockMessage( block );\n\t\t\t\t\t\tmessage.toggle();\n\t\t\t\t\t\tself.hide();\n\t\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t}\n\t\t\t}, function () {\n\t\t\t\tself.reportError( mw.msg( 'mobile-frontend-editor-error-loading' ) );\n\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing EditorOverlay with it\n\t * based on the current option values.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {Object} options Object passed to the constructor\n\t */\n\t_switchToVisualEditor: function ( options ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tmw.storage.set( 'preferredEditor', 'VisualEditor' );\n\t\t// Load the VisualEditor and replace the SourceEditor overlay with it\n\t\tthis.showSpinner();\n\t\tthis.$content.hide();\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\toptions.EditorOverlay = EditorOverlay;\n\t\t\t\tself.hideSpinner();\n\t\t\t\tself.overlayManager.replaceCurrent( new VisualEditorOverlay( options ) );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.hideSpinner();\n\t\t\t\tself.$content.show();\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Reveals an abuse filter panel inside the view.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\t_showAbuseFilter: function ( type, message ) {\n\t\tthis.abuseFilterPanel.show( type, message );\n\t\tthis.showHidden( '.save-header' );\n\t\t// disable continue and save buttons, reenabled when user changes content\n\t\tthis.$( '.continue, .submit' ).prop( 'disabled', this.abuseFilterPanel.isDisallowed );\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save button. Handles logging and submitting\n\t * the save action to the editor API.\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function () {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete();\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t * @inheritdoc\n\t * @memberof EditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar heading, msg;\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tthis.captchaId = data.details.id;\n\t\t\tthis.handleCaptcha( data.details );\n\t\t} else if ( data.type === 'abusefilter' ) {\n\t\t\tthis._showAbuseFilter( data.details.type, data.details.message );\n\t\t} else {\n\t\t\tmsg = this.saveFailureMessage( data );\n\t\t\tif ( data.type === 'readonly' ) {\n\t\t\t\theading = mw.msg( 'apierror-readonly' );\n\t\t\t}\n\n\t\t\tif ( msg || heading ) {\n\t\t\t\tthis.reportError( msg, heading );\n\t\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t * @memberof EditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = EditorOverlay;\n","var Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for EditorOverlay\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {number|null} params.editCount of user\n */\nfunction EditorOverlayBase( params ) {\n\tvar self = this,\n\t\toptions = util.extend(\n\t\t\t{\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\t// FIXME: Pass this in via options rather than accessing mw.config\n\tthis.config = mw.config.get( 'wgMFEditorOptions' );\n\tthis.sessionId = options.sessionId;\n\tthis.overlayManager = options.overlayManager;\n\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t// Returns true if content has changed\n\t\ttest: function () {\n\t\t\t// Check if content has changed\n\t\t\treturn self.hasChanged();\n\t\t},\n\n\t\t// Message to show the user, if content has changed\n\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t// Event namespace\n\t\tnamespace: 'editwarning'\n\t} );\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.cancelMsg Caption for cancel button on edit form.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.waitMsg Text that displays while a page edit is being saved.\n\t * @property {string} defaults.waitIcon HTML of the icon that displays while a page edit\n\t * is being saved.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcancelMsg: mw.msg( 'mobile-frontend-editor-cancel' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\twaitMsg: mw.msg( 'mobile-frontend-editor-wait' ),\n\t\t// icons.spinner can't be used,\n\t\t// the spinner class changes to display:none in onStageChanges\n\t\twaitIcon: new Icon( {\n\t\t\tname: 'spinner',\n\t\t\tadditionalClassNames: 'savespinner loading'\n\t\t} ).toHtmlString(),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\teditHeader: mw.template.get( 'mobile.editor.overlay', 'editHeader.hogan' ),\n\t\tpreviewHeader: mw.template.get( 'mobile.editor.overlay', 'previewHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.editor.overlay', 'EditorOverlayBase.hogan' ),\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'mf.schemaEditAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Handles reloading the page, showing toast\n\t * messages.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tvar msg,\n\t\t\t$window = util.getWindow(),\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\t\ttoast.showOnPageReload( msg, 'success' );\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess'\n\t\t} );\n\t\tif ( self.sectionLine ) {\n\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = self.sectionLine;\n\t\t} else {\n\t\t\t// Cancel the hash fragment\n\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t// and may conflict with the window.reload call below.\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#';\n\t\t}\n\n\t\t$window.off( 'beforeunload.mfeditorwarning' );\n\n\t\t// Note the \"#\" may be in the URL.\n\t\t// If so, using window.location alone will not reload the page\n\t\t// we need to forcefully refresh\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.location.reload();\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar key = data && data.details && data.details.code,\n\t\t\ttypeMap = {\n\t\t\t\teditconflict: 'editConflict',\n\t\t\t\twasdeleted: 'editPageDeleted',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\tspamprotectiontext: 'extensionSpamBlacklist',\n\t\t\t\t'titleblacklist-forbidden-edit': 'extensionTitleBlacklist'\n\t\t\t};\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tkey = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: this.saveFailureMessage( data ),\n\t\t\ttype: typeMap[key] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Build a save failure message from the API response\n\t * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n\t * @return {string} message describing the failure for display to the user\n\t */\n\tsaveFailureMessage: function ( data ) {\n\t\tvar key = data && data.details && data.details.code,\n\t\t\t// When save failed with one of these error codes, the returned\n\t\t\t// message in response.error.info will be forwarded to the user.\n\t\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\t\twhitelistedErrorInfo = [\n\t\t\t\t'blocked',\n\t\t\t\t'autoblocked'\n\t\t\t];\n\t\tif ( data.type === 'readonly' ) {\n\t\t\treturn data.details.readonlyreason;\n\t\t}\n\t\tif ( key === 'editconflict' ) {\n\t\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t\t} else if ( whitelistedErrorInfo.indexOf( key ) > -1 ) {\n\t\t\treturn data.error.info;\n\t\t}\n\t\treturn mw.msg( 'mobile-frontend-editor-error' );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text of message to display to user\n\t * @param {string} heading heading text to display to user\n\t */\n\treportError: function ( text, heading ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'errorbox',\n\t\t\tmsg: text,\n\t\t\theading: heading\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\t// log edit attempt\n\t\t// TODO: if VE/NWE become the default, or even loadable-by-URL, this\n\t\t// logging needs to be moved into the individual overlays, because postRender\n\t\t// for VE still wouldn't technically be 'ready'.\n\t\tthis.log( {\n\t\t\taction: 'ready'\n\t\t} );\n\t\tthis.log( {\n\t\t\taction: 'loaded'\n\t\t} );\n\n\t\t// decide what happens, when the user clicks the continue button\n\t\tif ( this.config.skipPreview ) {\n\t\t\t// skip the preview and save the changes\n\t\t\tthis.nextStep = 'onSaveBegin';\n\t\t\tthis.$( '.continue' ).text( this.defaults.saveMsg );\n\t\t} else {\n\t\t\t// default: show the preview step\n\t\t\tthis.nextStep = 'onStageChanges';\n\t\t}\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tOverlay.prototype.show.call( this );\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Exit handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonExitClick: function () {\n\t\tOverlay.prototype.onExitClick.apply( this, arguments );\n\t\t// log cancel attempt\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\tmechanism: 'cancel',\n\t\t\ttype: this.hasChanged() ? 'abandon' : 'nochange'\n\t\t} );\n\t},\n\t/**\n\t * Submit button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis[this.nextStep]();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean|jQuery.Promise} Boolean, or promise resolving with a boolean\n\t */\n\thide: function () {\n\t\tvar windowManager,\n\t\t\tself = this;\n\t\tif ( this.hasChanged() ) {\n\t\t\twindowManager = OO.ui.getWindowManager();\n\t\t\twindowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\treturn windowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\tself.allowCloseWindow.release();\n\t\t\t\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\t\t\t\tOverlay.prototype.hide.call( self );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t} else {\n\t\t\tthis.allowCloseWindow.release();\n\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\treturn Overlay.prototype.hide.call( self );\n\t\t}\n\t},\n\t/**\n\t * Check, if the user should be asked if they really want to leave the page.\n\t * Returns false, if he hasn't made changes, otherwise true.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {boolean} [force] Whether this function should always return false\n\t * @return {boolean}\n\t */\n\tshouldConfirmLeave: function ( force ) {\n\t\tif ( force || !this.hasChanged() ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t},\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$( '.captcha-panel#question' ).detach();\n\t\t\tthis.$( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","/* global ve */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Overlay for VisualEditor view\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {EditorOverlay} options.EditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEdtiorOverlay and EditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tthis.applyHeaderOptions( options, true );\n\t// When switch, all options from the source mode editor are passed\n\t// to VE, so ensure these settings override them.\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {}, options, {\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t} )\n\t);\n\tthis.EditorOverlay = options.EditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * Disable this for now as it breaks OOUI dialogs (T126240)\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasFixedHeader: false,\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: mw.template.get( 'mobile.editor.overlay', 'toolbarVE.hogan' ),\n\t\tcontent: mw.template.get( 'mobile.editor.overlay', 'contentVE.hogan' )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Set options that apply specifically to VisualEditorOverlay but not\n\t * EditorOverlay so that an EditorOverlay instance can be created effortlessly.\n\t * FIXME: Must be smarter way to do this.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {boolean} isVE whether the options are being generated for a VisualEditorOverlay\n\t *  or a EditorOverlay\n\t */\n\tapplyHeaderOptions: function ( options, isVE ) {\n\t\t// Set things that are known to be true.\n\t\toptions.hasToolbar = isVE;\n\t\toptions.isVisualEditor = isVE;\n\t},\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t\t$element: this.$el,\n\t\t\t// || null so that scrolling is not triggered for the lead (0) section\n\t\t\t// (which has no header to scroll to)\n\t\t\tsection: this.options.sectionId || null\n\t\t} );\n\t\tthis.target.load( this.options.dataPromise );\n\t\tthis.saved = false;\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thide: function () {\n\t\tvar overlay = this,\n\t\t\tretval = EditorOverlayBase.prototype.hide.apply( this, arguments );\n\t\tif ( retval === true ) {\n\t\t\tthis.destroyTarget();\n\t\t} else if ( retval && retval.then ) {\n\t\t\tretval.then( function ( hide ) {\n\t\t\t\tif ( hide ) {\n\t\t\t\t\toverlay.destroyTarget();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\treturn retval;\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\n\t/**\n\t * Reveal the editing interface.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {EditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToSourceEditor: function () {\n\t\tvar self = this,\n\t\t\tEditorOverlay = this.EditorOverlay;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tmw.storage.set( 'preferredEditor', 'SourceEditor' );\n\t\tthis.showSpinner();\n\t\tthis.$( '.surface' ).hide();\n\t\tself.hideSpinner();\n\t\tself.applyHeaderOptions( self.options, false );\n\t\tself.overlayManager.replaceCurrent( new EditorOverlay( self.options ) );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tthis.saved = true;\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\t\tthis.destroyTarget();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\treturn this.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified() &&\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\t!this.saved;\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tEditorOverlay = require( './EditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tschemaEditAttemptStep = require( './schemaEditAttemptStep' );\n\n// Exposed for Minerva integration\nm.define( 'mobile.editor.overlay/EditorOverlay', EditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n// setup schema:edit logging\nschemaEditAttemptStep();\n","module.exports = function () {\n\tvar trackdebug = !!mw.util.getParamValue( 'trackdebug' );\n\n\tif ( mw.loader.getState( 'schema.EditAttemptStep' ) === null && !trackdebug ) {\n\t\treturn;\n\t}\n\n\tmw.loader.using( [ 'ext.eventLogging.subscriber' ] ).then( function () {\n\t\tvar // Schema provided by ext.eventLogging.subscriber class\n\t\t\tSchema = mw.eventLog.Schema,\n\t\t\tuser = mw.user,\n\t\t\tsampleRate = mw.config.get( 'wgWMESchemaEditAttemptStepSamplingRate' ),\n\t\t\tactionPrefixMap = {\n\t\t\t\tsaveIntent: 'save_intent',\n\t\t\t\tsaveAttempt: 'save_attempt',\n\t\t\t\tsaveSuccess: 'save_success',\n\t\t\t\tsaveFailure: 'save_failure'\n\t\t\t},\n\t\t\ttiming = {},\n\t\t\t/**\n\t\t\t * Edit schema\n\t\t\t * https://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t\t\t */\n\t\t\t/* eslint-disable camelcase */\n\t\t\tschemaEditAttemptStep = new Schema(\n\t\t\t\t'EditAttemptStep',\n\t\t\t\tsampleRate,\n\t\t\t\t{\n\t\t\t\t\tpage_id: mw.config.get( 'wgArticleId' ),\n\t\t\t\t\trevision_id: mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\tpage_title: mw.config.get( 'wgPageName' ),\n\t\t\t\t\tpage_ns: mw.config.get( 'wgNamespaceNumber' ),\n\t\t\t\t\tuser_id: user.getId(),\n\t\t\t\t\tuser_class: user.isAnon() ? 'IP' : undefined,\n\t\t\t\t\tuser_editcount: mw.config.get( 'wgUserEditCount', 0 ),\n\t\t\t\t\tmw_version: mw.config.get( 'wgVersion' ),\n\t\t\t\t\tplatform: 'phone',\n\t\t\t\t\tintegration: 'page',\n\t\t\t\t\tpage_token: user.getPageviewToken(),\n\t\t\t\t\tsession_token: user.sessionId(),\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t);\n\t\t\t/* eslint-enable camelcase */\n\n\t\tfunction log() {\n\t\t\t// mw.log is a no-op unless resource loader is in debug mode, so\n\t\t\t// this allows trackdebug to work independently (T211698)\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply( console, arguments );\n\t\t}\n\n\t\tfunction computeDuration( action, event, timeStamp ) {\n\t\t\t// This is duplicated from the VisualEditor extension\n\t\t\t// (ve.init.mw.trackSubscriber.js). Changes to this should be kept in\n\t\t\t// sync with that file, so the data remains consistent.\n\t\t\tif ( event.timing !== undefined ) {\n\t\t\t\treturn event.timing;\n\t\t\t}\n\n\t\t\tswitch ( action ) {\n\t\t\t\tcase 'ready':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'loaded':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'saveIntent':\n\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\tcase 'saveAttempt':\n\t\t\t\t\treturn timeStamp - timing.saveIntent;\n\t\t\t\tcase 'saveSuccess':\n\t\t\t\tcase 'saveFailure':\n\t\t\t\t\t// HERE BE DRAGONS: the caller must compute these themselves\n\t\t\t\t\t// for sensible results. Deliberately sabotage any attempts to\n\t\t\t\t\t// use the default by returning -1\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Do not rely on default timing value for saveSuccess/saveFailure' );\n\t\t\t\t\treturn -1;\n\t\t\t\tcase 'abort':\n\t\t\t\t\tswitch ( event.abort_type ) {\n\t\t\t\t\t\tcase 'preinit':\n\t\t\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\t\t\tcase 'nochange':\n\t\t\t\t\t\tcase 'switchwith':\n\t\t\t\t\t\tcase 'switchwithout':\n\t\t\t\t\t\tcase 'switchnochange':\n\t\t\t\t\t\tcase 'abandon':\n\t\t\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\t\t\tcase 'abandonMidsave':\n\t\t\t\t\t\t\treturn timeStamp - timing.saveAttempt;\n\t\t\t\t\t}\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized abort type', event.type );\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized action', action );\n\t\t\treturn -1;\n\t\t}\n\n\t\tmw.trackSubscribe( 'mf.schemaEditAttemptStep', function ( topic, data, timeStamp ) {\n\t\t\tvar actionPrefix = actionPrefixMap[ data.action ] || data.action,\n\t\t\t\tduration = 0;\n\n\t\t\ttimeStamp = timeStamp || this.timeStamp; // I8e82acc12 back-compat\n\n\t\t\tif ( data.action !== 'init' ) {\n\t\t\t\tduration = Math.round( computeDuration( data.action, data, timeStamp ) );\n\t\t\t\tdata[actionPrefix + '_timing'] = duration;\n\t\t\t}\n\n\t\t\tdata[actionPrefix + '_type'] = data.type;\n\t\t\tdelete data.type;\n\t\t\tdata[actionPrefix + '_mechanism'] = data.mechanism;\n\t\t\tdelete data.mechanism;\n\t\t\tdata[actionPrefix + '_message'] = data.message;\n\t\t\tdelete data.message;\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tdata.is_oversample =\n\t\t\t\t!mw.eventLog.inSample( 1 / sampleRate );\n\n\t\t\tif ( data.action === 'abort' && data.abort_type !== 'switchnochange' ) {\n\t\t\t\ttiming = {};\n\t\t\t} else {\n\t\t\t\ttiming[ data.action ] = timeStamp;\n\t\t\t}\n\n\t\t\t// Switching between visual and source produces a chain of\n\t\t\t// abort/ready events and no init event, so suppress them for\n\t\t\t// consistency with desktop VE's logging.\n\t\t\tif ( data.abort_type === 'switchnochange' ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( timing.abort && data.action === 'ready' ) {\n\t\t\t\tdelete timing.abort;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( trackdebug ) {\n\t\t\t\tlog( topic + '.' + data.action, duration + 'ms', data );\n\t\t\t} else {\n\t\t\t\tschemaEditAttemptStep.log( data, mw.config.get( 'wgWMESchemaEditAttemptStepOversample' ) ? 1 : sampleRate );\n\t\t\t}\n\t\t} );\n\n\t} );\n};\n"],"sourceRoot":""}