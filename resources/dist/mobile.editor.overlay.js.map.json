{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/AbuseFilterPanel.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/schemaEditAttemptStep.js"],"names":["Button","require","util","mfExtend","Overlay","AbuseFilterOverlay","props","call","this","extend","className","defaults","prototype","confirmButton","additionalClassNames","progressive","templatePartials","content","template","postRender","apply","$el","find","attr","append","options","module","exports","View","AbuseFilterPanel","isDisallowed","overlayManager","readMoreMsg","mw","msg","show","type","message","add","text","removeClass","hide","addClass","Drawer","Icon","BlockMessage","arguments","stopHandIcon","name","userIcon","tagName","okButton","label","createDetailsAnchorHref","getUrl","wpTarget","blockId","createDetailsAnchorLabel","createTitle","partial","reasonHeader","creatorHeader","user","get","expiryHeader","prepend","parseSaveError","actionParams","EditorGateway","api","title","sectionId","oldId","isNewPage","undefined","fromModified","hasChanged","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","loader","load","getContent","self","resolve","Deferred","prop","rvprop","titles","intestactions","intestactionsdetail","rvstartid","isNumeric","rvsection","then","resp","revision","reject","query","pages","missing","revisions","timestamp","originalContent","setContent","setPrependText","prependtext","save","result","apiOptions","action","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","saveContent","abortPreview","_pending","abort","getPreview","request","sectionLine","sectionpreview","pst","mobileformat","post","parse","sections","anchor","line","id","promise","headers","PageGateway","icons","toast","saveFailureMessage","MessageBox","mwUser","EditVeTool","toolGroup","config","classes","super","EditorOverlayBase","params","onBeforeExit","bind","isBorderBox","events","click .back","click .continue","click .submit","click .anonymous","placeholder","summaryRequestMsg","pageGateway","editCount","isNewEditor","sessionId","OO","inheritClass","ui","Tool","static","icon","group","onSelect","onUpdateState","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","track","editor_interface","editor","editing_session_id","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","$window","getWindow","saved","invalidatePage","showOnPageReload","revision_id","location","hash","off","reload","onSaveFailure","key","details","editconflict","wasdeleted","abusefilter-disallowed","captcha","spamprotectiontext","titleblacklist-forbidden-edit","reportError","heading","errorNotice","$errorNoticeContainer","html","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","render","editSwitcher","editingMsg","readOnly","disabled","skipPreview","saveButtonMessage","cancel","saveHeader","previewingMsg","savingHeader","nextStep","spinner","allowCloseWindow","confirmCloseWindow","test","namespace","hook","fire","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","windowManager","switching","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","release","target","edited","createAnonWarning","$actions","$","$anonWarning","returnto","returnTo","returntoquery","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","href","map","parseBlockInfo","blockInfo","expiry","reason","moment","blockpartial","creator","blockedby","url","Title","makeTitle","duration","blockid","blockexpiry","format","to","blockreason","wikitext","parser","ast","jqueryMsg","wikiTextToAst","emitter","emit","e","jqueryMsgParse","escape","escaped","getOptionsForSwitch","switched","titleObj","isAnon","contentLang","contentDir","handleCaptcha","$input","captchaShown","val","setTimeout","mime","detach","question","Section","VisualEditorOverlay","SourceEditorOverlay","dataPromise","isFirefox","navigator","userAgent","gateway","isVisualEditorEnabled","input .wikitext-editor","ns","namespaces","onInputWikitextEditor","_hidePreview","showAnonWarning","using","switchToolbar","switchWindow","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","canSwitch","fullRestbaseUrl","allowLossySwitching","_switchToVisualEditor","WindowManager","SwitchConfirmDialog","$element","appendTo","document","body","destroy","setup","include","$preview","$content","$anonHiddenButtons","hideSpinner","abuseFilterPanel","_resizeEditor","_loadContent","showSpinner","hideSpinnerAndShowPreview","scrollTop","getDocument","mainpage","parsedText","parsedSectionLine","parseHTML","el","container","$scrollContainer","Element","getClosestScrollableContainer","length","css","height","toggle","feature","storage","set","targetLoader","addPlugin","loadModules","requestPageData","targetName","modified","replaceCurrent","_showAbuseFilter","router","editHeader","destroyTarget","overlay","init","targetFactory","create","once","checkForBlocks","switchToEditor","visualeditor","switchToSourceEditor","navigateTo","path","useReplaceState","getSurface","getModel","hasBeenModified","m","schemaEditAttemptStep","define","readonlyreason","info","trackdebug","getParamValue","exists","Schema","eventLog","sampleRate","actionPrefixMap","saveIntent","saveAttempt","saveSuccess","saveFailure","timing","page_id","page_title","page_ns","user_id","getId","user_class","user_editcount","mw_version","platform","integration","page_token","getPageviewToken","session_token","version","anonymous_user_token","bucket","trackSubscribe","topic","timeStamp","actionPrefix","Math","round","event","ready","warn","abort_type","computeDuration","is_oversample","inSample","console"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["var Button = require( '../mobile.startup/Button' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Overlay that shows a message about abuse.\n * This overlay is rendered when the error code from the API\n * is related to the abusefilter extension.\n * @class AbuseFilterOverlay\n * @extends Overlay\n * @param {Object} props\n */\nfunction AbuseFilterOverlay( props ) {\n\tOverlay.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'overlay abusefilter-overlay'\n\t\t}, props )\n\t);\n}\n\nmfExtend( AbuseFilterOverlay, Overlay, {\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {Object} defaults.confirmButton options for a confirm Button\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tconfirmButton: new Button( {\n\t\t\tadditionalClassNames: 'cancel',\n\t\t\tprogressive: true\n\t\t} )\n\t} ),\n\t/**\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div class=\"content\">\n\t{{{message}}}\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof AbuseFilterOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\t// make links open in separate tabs\n\t\tthis.$el.find( 'a' ).attr( 'target', '_blank' );\n\t\tthis.$el.find( '.content' ).append( this.options.confirmButton.$el );\n\t}\n} );\n\nmodule.exports = AbuseFilterOverlay;\n","var util = require( '../mobile.startup/util' ),\n\tView = require( '../mobile.startup/View' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tAbuseFilterOverlay = require( './AbuseFilterOverlay' );\n\n/**\n * Panel that shows an error message related to the abusefilter extension.\n * @class AbuseFilterPanel\n * @extends View\n * @uses AbuseFilterOverlay\n *\n * @param {Object} options Configuration options\n * FIXME: should extend Panel not View. Or the name should be changed to something meaningful.\n */\nfunction AbuseFilterPanel( options ) {\n\tthis.isDisallowed = false;\n\tthis.overlayManager = options.overlayManager;\n\tView.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'panel hidden'\n\t\t}, options )\n\t);\n}\n\nmfExtend( AbuseFilterPanel, View, {\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.readMoreMsg A caption for the button\n\t * allowing the user to read more about the problems with their edit.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t */\n\tdefaults: {\n\t\treadMoreMsg: mw.msg( 'mobile-frontend-editor-abusefilter-read-more' )\n\t},\n\t/**\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"message\">\n\t<p></p><a href=\"#/abusefilter\" class=\"readmore\">{{readMoreMsg}}</a>\n</div>\n\t` ),\n\t/**\n\t * Show the panel. Create a route to show AbuseFilterOverlay with message.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\tshow: function ( type, message ) {\n\t\tvar msg;\n\n\t\t// OverlayManager will replace previous instance of the route if present\n\t\tthis.overlayManager.add( /^\\/abusefilter$/, function () {\n\t\t\treturn new AbuseFilterOverlay( {\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t} );\n\n\t\tif ( type === 'warning' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-warning' );\n\t\t} else if ( type === 'disallow' ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-abusefilter-disallow' );\n\t\t\tthis.isDisallowed = true;\n\t\t}\n\n\t\tthis.$el.find( '.message p' ).text( msg );\n\t\tthis.$el.removeClass( 'hidden' );\n\t},\n\n\t/**\n\t * Hide the panel.\n\t * @memberof AbuseFilterPanel\n\t * @instance\n\t */\n\thide: function () {\n\t\tthis.$el.addClass( 'hidden' );\n\t}\n} );\n\nmodule.exports = AbuseFilterPanel;\n","'use strict';\nvar Drawer = require( '../mobile.startup/Drawer' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n * @class BlockReason\n * @extends Drawer\n */\nfunction BlockMessage() {\n\tDrawer.apply( this, arguments );\n}\n\nmfExtend( BlockMessage, Drawer, {\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\tdefaults: util.extend( {}, Drawer.prototype.defaults, {\n\t\tstopHandIcon: new Icon( {\n\t\t\tname: 'stop-hand'\n\t\t} ),\n\t\tuserIcon: new Icon( {\n\t\t\ttagName: 'span',\n\t\t\tname: 'profile'\n\t\t} ),\n\t\tokButton: new Button( {\n\t\t\tlabel: mw.msg( 'ok' ),\n\t\t\ttagName: 'button',\n\t\t\tprogressive: true,\n\t\t\tadditionalClassNames: 'cancel'\n\t\t} ),\n\t\tcreateDetailsAnchorHref: function () {\n\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + this.blockId } );\n\t\t},\n\t\tcreateDetailsAnchorLabel: function () {\n\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t},\n\t\tcreateTitle: function () {\n\t\t\treturn this.partial ? mw.msg( 'mobile-frontend-editor-blocked-drawer-title-partial' ) : mw.msg( 'mobile-frontend-editor-blocked-drawer-title' );\n\t\t},\n\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\tcreatorHeader: function () {\n\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t},\n\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender: function () {\n\t\tthis.$el.find( '.block-message-creator a' ).prepend(\n\t\t\tthis.options.userIcon.$el\n\t\t);\n\t\tthis.$el.find( '.block-message-icon' ).append(\n\t\t\tthis.options.stopHandIcon.$el\n\t\t);\n\t\tthis.$el.find( '.block-message-buttons' ).append(\n\t\t\tthis.options.okButton.$el\n\t\t);\n\t},\n\t/**\n\t * @memberof BlockMessage\n\t * @instance\n\t */\n\ttemplate: util.template( `\n{{#collapseIcon}}{{>icon}}{{/collapseIcon}}\n<div class=\"block-message\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      {{#reason}}\n        <div class=\"block-message-item\">\n          <h6>{{ reasonHeader }}</h6>\n          <div><strong>{{{ reason }}}</strong></div>\n        </div>\n      {{/reason}}\n      <div class=\"block-message-item block-message-creator\">\n        <h6>{{ creatorHeader }}</h6>\n        <div><strong><a href=\"{{ creator.url }}\">{{ creator.name }}</a></strong></div>\n      </div>\n      {{#expiry}}\n        <div class=\"block-message-item\">\n          <h6>{{ expiryHeader }}</h6>\n          <div><strong>{{#duration}}{{ duration }} / {{/duration}}{{ expiry }}</strong></div>\n        </div>\n      {{/expiry}}\n    </div>\n    <div class=\"block-message-item block-message-buttons\">\n      <a href=\"{{ createDetailsAnchorHref }}\">{{ createDetailsAnchorLabel }}</a>\n    </div>\n  </div>\n</div>\n\t` )\n} );\n\nmodule.exports = BlockMessage;\n","var util = require( '../mobile.startup/util' ),\n\tparseSaveError = require( './parseSaveError' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {number} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.isNewPage] whether the page being created is new\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\t// return an empty section for new pages\n\tthis.content = options.isNewPage ? '' : undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\t// Preload library used by EditorOverlayBase#parseBlockInfo\n\t\t\t\t// to format block expiry datetime and duration\n\t\t\t\tmw.loader.load( 'moment' );\n\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See Bug 50136 - passing rvsection will fail with non wikitext\n\t\t\tif ( util.isNumeric( this.sectionId ) ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tself.content = '';\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Mark content as modified and set text that should be prepended to given\n\t * section when #save is invoked.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} text Text to be prepended.\n\t */\n\tsetPrependText: function ( text ) {\n\t\tthis.prependtext = text;\n\t\tthis.hasChanged = true;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t} else if ( self.prependtext ) {\n\t\t\t\tapiOptions.prependtext = self.prependtext;\n\t\t\t}\n\n\t\t\tif ( util.isNumeric( self.sectionId ) ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( parseSaveError( data ) );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( parseSaveError( data, code || 'unknown' ) );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar result = util.Deferred(),\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\trequest,\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (bug 49218)\n\t\t\tsectionpreview: true,\n\t\t\t// needed for pre-save transform to work (bug 53692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (bug 54243)\n\t\t\tmobileformat: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\n\t\trequest = this.api.post( options );\n\t\tthis._pending = request.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// section 0 haven't a section name so skip\n\t\t\t\tif ( self.sectionId !== 0 &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.resolve( {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t} );\n\t\t\t} else {\n\t\t\t\tresult.reject();\n\t\t\t}\n\t\t}, function () {\n\t\t\tresult.reject();\n\t\t} ).promise( {\n\t\t\tabort: function () { request.abort(); }\n\t\t} );\n\n\t\treturn result;\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {number|null} params.editCount of user\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.editCount = options.editCount;\n\tthis.isNewPage = options.isNewPage;\n\tthis.isNewEditor = options.editCount === 0;\n\tthis.sectionId = options.sectionId;\n\t// FIXME: Pass this in via options rather than accessing mw.config\n\tthis.config = mw.config.get( 'wgMFEditorOptions' );\n\tthis.sessionId = options.sessionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<p class=\"summary-request\">{{{summaryRequestMsg}}}</p>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<p class=\"license\">{{{licenseMsg}}}</p>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'mf.schemaEditAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor,\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'mf.schemaVisualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tediting_session_id: this.sessionId\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Handles reloading the page, showing toast\n\t * messages.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number} newRevId ID of the newly created revision\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tvar msg,\n\t\t\t$window = util.getWindow(),\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\t// FIXME: use generic method for following 3 lines\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( this.isNewPage ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-new-page' );\n\t\t} else if ( this.isNewEditor ) {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success-landmark-1' );\n\t\t} else {\n\t\t\tmsg = mw.msg( 'mobile-frontend-editor-success' );\n\t\t}\n\t\ttoast.showOnPageReload( msg, { type: 'success' } );\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tif ( self.sectionId ) {\n\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t} else {\n\t\t\t// Cancel the hash fragment\n\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t// and may conflict with the window.reload call below.\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\twindow.location.hash = '#';\n\t\t}\n\n\t\t$window.off( 'beforeunload.mfeditorwarning' );\n\n\t\t// Note the \"#\" may be in the URL.\n\t\t// If so, using window.location alone will not reload the page\n\t\t// we need to forcefully refresh\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.location.reload();\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar key = data && data.details && data.details.code,\n\t\t\ttypeMap = {\n\t\t\t\teditconflict: 'editConflict',\n\t\t\t\twasdeleted: 'editPageDeleted',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\tspamprotectiontext: 'extensionSpamBlacklist',\n\t\t\t\t'titleblacklist-forbidden-edit': 'extensionTitleBlacklist'\n\t\t\t};\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tkey = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: saveFailureMessage( data ),\n\t\t\ttype: typeMap[key] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text of message to display to user\n\t * @param {string} heading heading text to display to user\n\t */\n\treportError: function ( text, heading ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'errorbox',\n\t\t\tmsg: text,\n\t\t\theading: heading\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew Button( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\tlabel: this.config.skipPreview ?\n\t\t\t\t\t\t\tutil.saveButtonMessage() :\n\t\t\t\t\t\t\toptions.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\t// decide what happens, when the user clicks the continue button\n\t\tif ( this.config.skipPreview ) {\n\t\t\t// skip the preview and save the changes\n\t\t\tthis.nextStep = 'onSaveBegin';\n\t\t} else {\n\t\t\t// default: show the preview step\n\t\t\tthis.nextStep = 'onStageChanges';\n\t\t}\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner.$el );\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis[this.nextStep]();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar windowManager,\n\t\t\tself = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\twindowManager = OO.ui.getWindowManager();\n\t\t\twindowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\twindowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.allowCloseWindow.release();\n\t\t\t\t\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.allowCloseWindow.release();\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t\texit();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'warningbox anon-msg',\n\t\t\t\t\tmsg: mw.msg( 'mobile-frontend-editor-anonwarning' )\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\treturnto: options.returnTo || mw.config.get( 'wgPageName' ),\n\t\t\t\treturntoquery: 'action=edit&section=' + options.sectionId,\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} blockinfo\n\t * @return {Object}\n\t */\n\tparseBlockInfo: function ( blockinfo ) {\n\t\tvar blockInfo, expiry, reason,\n\t\t\tmoment = window.moment;\n\n\t\t// Workaround to parse a message parameter for mw.message, see T96885\n\t\tfunction jqueryMsgParse( wikitext ) {\n\t\t\tvar parser, ast;\n\t\t\t// eslint-disable-next-line new-cap\n\t\t\tparser = new mw.jqueryMsg.parser();\n\t\t\ttry {\n\t\t\t\tast = parser.wikiTextToAst( wikitext );\n\t\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t\t} catch ( e ) {\n\t\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t\t// can't parse templates.\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tblockInfo = {\n\t\t\tpartial: blockinfo.blockpartial || false,\n\t\t\tcreator: {\n\t\t\t\tname: blockinfo.blockedby,\n\t\t\t\turl: mw.Title.makeTitle(\n\t\t\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\t\t\tblockinfo.blockedby\n\t\t\t\t).getUrl()\n\t\t\t},\n\t\t\texpiry: null,\n\t\t\tduration: null,\n\t\t\treason: '',\n\t\t\tblockId: blockinfo.blockid\n\t\t};\n\n\t\texpiry = blockinfo.blockexpiry;\n\t\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( expiry ) === -1 ) {\n\t\t\tblockInfo.expiry = moment( expiry ).format( 'LLL' );\n\t\t\tblockInfo.duration = moment().to( expiry, true );\n\t\t}\n\n\t\treason = blockinfo.blockreason;\n\t\tif ( reason ) {\n\t\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} else {\n\t\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\t}\n\n\t\treturn blockInfo;\n\t},\n\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\teditCount: this.options.editCount,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsessionId: this.options.sessionId,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tAbuseFilterPanel = require( './AbuseFilterPanel' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tBlockMessage = require( './BlockMessage' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n/**\n * Overlay that shows an editor\n * @class SourceEditorOverlay\n * @uses Section\n * @uses AbuseFilterPanel\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage,\n\t\tfromModified: !!dataPromise\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise;\n\tif ( this.isVisualEditorEnabled() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview content\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * Check whether VisualEditor is enabled or not.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\tisVisualEditorEnabled: function () {\n\t\tvar ns = mw.config.get( 'wgVisualEditorConfig' ) &&\n\t\t\tmw.config.get( 'wgVisualEditorConfig' ).namespaces;\n\n\t\treturn ns &&\n\t\t\tns.indexOf(\n\t\t\t\tmw.config.get( 'wgNamespaceNumber' )\n\t\t\t) > -1 &&\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\t\t\tmw.config.get( 'wgPageContentModel' ) === 'wikitext';\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this,\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.isVisualEditorEnabled() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar, windowManager, switchWindow,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tconfig = mw.config.get( 'wgVisualEditorConfig' ),\n\t\t\t\t\t\tcanSwitch = config.fullRestbaseUrl || config.allowLossySwitching;\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else if ( canSwitch ) {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindowManager = new OO.ui.WindowManager();\n\t\t\t\t\t\t\tswitchWindow = new mw.libs.ve.SwitchConfirmDialog();\n\t\t\t\t\t\t\twindowManager.$element.appendTo( document.body );\n\t\t\t\t\t\t\twindowManager.addWindows( [ switchWindow ] );\n\t\t\t\t\t\t\twindowManager.openWindow( switchWindow, { mode: 'simple' } )\n\t\t\t\t\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twindowManager.destroy();\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\t\tif ( showAnonWarning ) {\n\t\t\tthis.$anonWarning = this.createAnonWarning( options );\n\t\t\tthis.$el.find( '.editor-container' ).append( this.$anonWarning );\n\t\t\tthis.$content.hide();\n\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t// disable \"Next\" button on top right\n\t\t\tthis.$anonHiddenButtons = this.$el.find( '.overlay-header .continue, .editor-switcher' ).hide();\n\t\t\tthis.hideSpinner();\n\t\t}\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\tthis.abuseFilterPanel = new AbuseFilterPanel( {\n\t\t\toverlayManager: this.overlayManager\n\t\t} ).appendTo( this.$el.find( '.panels' ) );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content.on( 'input', this._resizeEditor.bind( this ) );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis._loadContent();\n\t\t}\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.showSpinner();\n\t\tthis.$anonWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass( 'error' ).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass( 'error' ).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.abuseFilterPanel.hide();\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\t// exiting early for firefox due to a bug that causes the page to scroll to top\n\t\t// whenever a caret is inserted T214880\n\t\tif ( this.isFirefox ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this,\n\t\t\t$el = this.$el;\n\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\t\t$el.addClass( 'overlay-loading' );\n\n\t\t( this.dataPromise || this.gateway.getContent() )\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar block, message,\n\t\t\t\t\tcontent = result.text;\n\n\t\t\t\tself.setContent( content );\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\t\t\t\t// check if user is blocked\n\t\t\t\tif ( result.blockinfo ) {\n\t\t\t\t\t// Lazy-load moment only if it's needed,\n\t\t\t\t\t// it's somewhat large (it is already used on\n\t\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\t\tmw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\t\tblock = self.parseBlockInfo( result.blockinfo );\n\t\t\t\t\t\tmessage = new BlockMessage( block );\n\t\t\t\t\t\tmessage.toggle();\n\t\t\t\t\t\tself.hide();\n\t\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tself.hideSpinner();\n\t\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t\t}\n\t\t\t}, function () {\n\t\t\t\tself.reportError( mw.msg( 'mobile-frontend-editor-error-loading' ) );\n\t\t\t\t$el.removeClass( 'overlay-loading' );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tmw.storage.set( 'preferredEditor', 'VisualEditor' );\n\t\t// Load the VisualEditor and replace the SourceEditor overlay with it\n\t\tthis.showSpinner();\n\t\tthis.$content.hide();\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tself.hideSpinner();\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tself.switching = true;\n\t\t\t\tself.overlayManager.replaceCurrent( new VisualEditorOverlay( options ) );\n\t\t\t\tself.switching = false;\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.hideSpinner();\n\t\t\t\tself.$content.show();\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Reveals an abuse filter panel inside the view.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} type The type of alert, e.g. 'warning' or 'disallow'\n\t * @param {string} message Message to show in the AbuseFilter overlay\n\t */\n\t_showAbuseFilter: function ( type, message ) {\n\t\tthis.abuseFilterPanel.show( type, message );\n\t\tthis.showHidden( '.save-header' );\n\t\t// disable continue and save buttons, reenabled when user changes content\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', this.abuseFilterPanel.isDisallowed );\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar heading, msg;\n\n\t\tif ( data.type === 'captcha' ) {\n\t\t\tthis.captchaId = data.details.id;\n\t\t\tthis.handleCaptcha( data.details );\n\t\t} else if ( data.type === 'abusefilter' ) {\n\t\t\tthis._showAbuseFilter( data.details.type, data.details.message );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tif ( data.type === 'readonly' ) {\n\t\t\t\theading = mw.msg( 'apierror-readonly' );\n\t\t\t}\n\n\t\t\tif ( msg || heading ) {\n\t\t\t\tthis.reportError( msg, heading );\n\t\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tBlockMessage = require( './BlockMessage' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Overlay for VisualEditor view\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tisNewPage: options.isNewPage\n\t} );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar overlay = this,\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\t// We don't use the default spinner. Instead, rely on the progressbar from init/editor.js.\n\t\tif ( !this.options.switched ) {\n\t\t\tthis.hideSpinner();\n\t\t\tthis.$el.addClass( 'loading' );\n\t\t}\n\n\t\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t\t$element: this.$el,\n\t\t\t// || null so that scrolling is not triggered for the lead (0) section\n\t\t\t// (which has no header to scroll to)\n\t\t\tsection: this.options.sectionId || null\n\t\t} );\n\t\tthis.target.once( 'surfaceReady', function () {\n\t\t\tthis.emit( 'editor-loaded' );\n\t\t\tthis.$el.removeClass( 'loading' );\n\t\t\t// log edit attempt\n\t\t\toverlay.log( { action: 'ready' } );\n\t\t\toverlay.log( { action: 'loaded' } );\n\t\t}.bind( this ) );\n\t\tthis.dataPromise = this.target.load( this.options.dataPromise );\n\n\t\tif ( showAnonWarning ) {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$el.append( this.$anonWarning );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t\tthis.$el.removeClass( 'loading' );\n\t\t} else {\n\t\t\tthis.checkForBlocks();\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tthis.checkForBlocks().then( function () {\n\t\t\tself.$el.find( '.overlay-content' ).show();\n\t\t} );\n\t},\n\n\t/**\n\t * Check if the user is blocked, and close the editor if they are\n\t *\n\t * @return {jQuery.Promise} Promise which resolves when the check is complete\n\t */\n\tcheckForBlocks: function () {\n\t\tvar self = this;\n\t\treturn this.dataPromise.then( function ( data ) {\n\t\t\tif ( data.visualeditor && data.visualeditor.blockinfo ) {\n\t\t\t\t// Lazy-load moment only if it's needed,\n\t\t\t\t// it's somewhat large (it is already used on\n\t\t\t\t// mobile by Echo's notifications panel, where it's also lazy-loaded)\n\t\t\t\tmw.loader.using( 'moment' ).then( function () {\n\t\t\t\t\tvar block = self.parseBlockInfo( data.visualeditor.blockinfo ),\n\t\t\t\t\t\tmessage = new BlockMessage( block );\n\t\t\t\t\tmessage.toggle();\n\t\t\t\t\tself.hide();\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * Reveal the editing interface.\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tmw.storage.set( 'preferredEditor', 'SourceEditor' );\n\t\tthis.showSpinner();\n\t\tthis.$el.find( '.surface' ).hide();\n\t\tself.hideSpinner();\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tself.switching = true;\n\t\tself.overlayManager.replaceCurrent( new SourceEditorOverlay( options, dataPromise ) );\n\t\tself.switching = false;\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonSaveComplete: function () {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\t\tthis.destroyTarget();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tschemaEditAttemptStep = require( './schemaEditAttemptStep' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n// setup schema:edit logging\nschemaEditAttemptStep();\n","/**\n * Build a save failure message from the API response\n * @param {Object} data Details about the failure, from EditorGateway.parseSaveError\n * @return {string} message describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\tvar key = data && data.details && data.details.code,\n\t\t// When save failed with one of these error codes, the returned\n\t\t// message in response.error.info will be forwarded to the user.\n\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\twhitelistedErrorInfo = [\n\t\t\t'blocked',\n\t\t\t'autoblocked'\n\t\t];\n\tif ( data.type === 'readonly' ) {\n\t\treturn data.details.readonlyreason;\n\t}\n\tif ( key === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t} else if ( whitelistedErrorInfo.indexOf( key ) > -1 ) {\n\t\treturn data.error.info;\n\t}\n\treturn mw.msg( 'mobile-frontend-editor-error' );\n};\n","module.exports = function () {\n\tvar trackdebug = !!mw.util.getParamValue( 'trackdebug' );\n\n\tif ( !mw.config.exists( 'wgWMESchemaEditAttemptStepSamplingRate' ) ) {\n\t\treturn;\n\t}\n\n\tmw.loader.using( [ 'ext.eventLogging' ] ).then( function () {\n\t\tvar // Schema class is provided by ext.eventLogging\n\t\t\tSchema = mw.eventLog.Schema,\n\t\t\tuser = mw.user,\n\t\t\tsampleRate = mw.config.get( 'wgWMESchemaEditAttemptStepSamplingRate' ),\n\t\t\tactionPrefixMap = {\n\t\t\t\tsaveIntent: 'save_intent',\n\t\t\t\tsaveAttempt: 'save_attempt',\n\t\t\t\tsaveSuccess: 'save_success',\n\t\t\t\tsaveFailure: 'save_failure'\n\t\t\t},\n\t\t\ttiming = {},\n\t\t\t/**\n\t\t\t * Edit schema\n\t\t\t * https://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t\t\t */\n\t\t\t/* eslint-disable camelcase */\n\t\t\tschemaEditAttemptStep = new Schema(\n\t\t\t\t'EditAttemptStep',\n\t\t\t\tsampleRate,\n\t\t\t\t{\n\t\t\t\t\tpage_id: mw.config.get( 'wgArticleId' ),\n\t\t\t\t\trevision_id: mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\tpage_title: mw.config.get( 'wgPageName' ),\n\t\t\t\t\tpage_ns: mw.config.get( 'wgNamespaceNumber' ),\n\t\t\t\t\tuser_id: user.getId(),\n\t\t\t\t\tuser_class: user.isAnon() ? 'IP' : undefined,\n\t\t\t\t\tuser_editcount: mw.config.get( 'wgUserEditCount', 0 ),\n\t\t\t\t\tmw_version: mw.config.get( 'wgVersion' ),\n\t\t\t\t\tplatform: 'phone',\n\t\t\t\t\tintegration: 'page',\n\t\t\t\t\tpage_token: user.getPageviewToken(),\n\t\t\t\t\tsession_token: user.sessionId(),\n\t\t\t\t\tversion: 1\n\t\t\t\t}\n\t\t\t);\n\t\t\t/* eslint-enable camelcase */\n\n\t\tif ( mw.config.get( 'wgMFSchemaEditAttemptStepAnonymousUserId' ) ) {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tschemaEditAttemptStep.defaults.anonymous_user_token = mw.config.get( 'wgMFSchemaEditAttemptStepAnonymousUserId' );\n\t\t}\n\t\tif ( mw.config.get( 'wgMFSchemaEditAttemptStepBucket' ) ) {\n\t\t\tschemaEditAttemptStep.defaults.bucket = mw.config.get( 'wgMFSchemaEditAttemptStepBucket' );\n\t\t}\n\n\t\tfunction log() {\n\t\t\t// mw.log is a no-op unless resource loader is in debug mode, so\n\t\t\t// this allows trackdebug to work independently (T211698)\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply( console, arguments );\n\t\t}\n\n\t\tfunction computeDuration( action, event, timeStamp ) {\n\t\t\t// This is duplicated from the VisualEditor extension\n\t\t\t// (ve.init.mw.trackSubscriber.js). Changes to this should be kept in\n\t\t\t// sync with that file, so the data remains consistent.\n\t\t\tif ( event.timing !== undefined ) {\n\t\t\t\treturn event.timing;\n\t\t\t}\n\n\t\t\tswitch ( action ) {\n\t\t\t\tcase 'ready':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'loaded':\n\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\tcase 'saveIntent':\n\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\tcase 'saveAttempt':\n\t\t\t\t\treturn timeStamp - timing.saveIntent;\n\t\t\t\tcase 'saveSuccess':\n\t\t\t\tcase 'saveFailure':\n\t\t\t\t\t// HERE BE DRAGONS: the caller must compute these themselves\n\t\t\t\t\t// for sensible results. Deliberately sabotage any attempts to\n\t\t\t\t\t// use the default by returning -1\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Do not rely on default timing value for saveSuccess/saveFailure' );\n\t\t\t\t\treturn -1;\n\t\t\t\tcase 'abort':\n\t\t\t\t\tswitch ( event.abort_type ) {\n\t\t\t\t\t\tcase 'preinit':\n\t\t\t\t\t\t\treturn timeStamp - timing.init;\n\t\t\t\t\t\tcase 'nochange':\n\t\t\t\t\t\tcase 'switchwith':\n\t\t\t\t\t\tcase 'switchwithout':\n\t\t\t\t\t\tcase 'switchnochange':\n\t\t\t\t\t\tcase 'abandon':\n\t\t\t\t\t\t\treturn timeStamp - timing.ready;\n\t\t\t\t\t\tcase 'abandonMidsave':\n\t\t\t\t\t\t\treturn timeStamp - timing.saveAttempt;\n\t\t\t\t\t}\n\t\t\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized abort type', event.type );\n\t\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tmw.log.warn( 'mf.schemaEditAttemptStep: Unrecognized action', action );\n\t\t\treturn -1;\n\t\t}\n\n\t\tmw.trackSubscribe( 'mf.schemaEditAttemptStep', function ( topic, data, timeStamp ) {\n\t\t\tvar actionPrefix = actionPrefixMap[ data.action ] || data.action,\n\t\t\t\tduration = 0;\n\n\t\t\ttimeStamp = timeStamp || this.timeStamp; // I8e82acc12 back-compat\n\n\t\t\t// Schema's kind of a mess of special properties\n\t\t\tif ( data.action === 'init' || data.action === 'abort' || data.action === 'saveFailure' ) {\n\t\t\t\tdata[ actionPrefix + '_type' ] = data.type;\n\t\t\t}\n\t\t\tif ( data.action === 'init' || data.action === 'abort' ) {\n\t\t\t\tdata[ actionPrefix + '_mechanism' ] = data.mechanism;\n\t\t\t}\n\t\t\tif ( data.action !== 'init' ) {\n\t\t\t\t// Schema actually does have an init_timing field, but we don't want to\n\t\t\t\t// store it because it's not meaningful.\n\t\t\t\tduration = Math.round( computeDuration( data.action, data, timeStamp ) );\n\t\t\t\tdata[ actionPrefix + '_timing' ] = duration;\n\t\t\t}\n\t\t\tif ( data.action === 'saveFailure' ) {\n\t\t\t\tdata[ actionPrefix + '_message' ] = data.message;\n\t\t\t}\n\n\t\t\t// Remove renamed properties\n\t\t\tdelete data.type;\n\t\t\tdelete data.mechanism;\n\t\t\tdelete data.timing;\n\t\t\tdelete data.message;\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\tdata.is_oversample =\n\t\t\t\t!mw.eventLog.inSample( 1 / sampleRate );\n\n\t\t\tif ( data.action === 'abort' && data.abort_type !== 'switchnochange' ) {\n\t\t\t\ttiming = {};\n\t\t\t} else {\n\t\t\t\ttiming[ data.action ] = timeStamp;\n\t\t\t}\n\n\t\t\t// Switching between visual and source produces a chain of\n\t\t\t// abort/ready/loaded events and no init event, so suppress them for\n\t\t\t// consistency with desktop VE's logging.\n\t\t\tif ( data.abort_type === 'switchnochange' ) {\n\t\t\t\t// The initial abort, flagged as a switch\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( timing.abort ) {\n\t\t\t\t// An abort was previously logged\n\t\t\t\tif ( data.action === 'ready' ) {\n\t\t\t\t\t// Just discard the ready\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( data.action === 'loaded' ) {\n\t\t\t\t\t// Switch has finished; remove the abort timing so we stop discarding events.\n\t\t\t\t\tdelete timing.abort;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( trackdebug ) {\n\t\t\t\tlog( topic + '.' + data.action, duration + 'ms', data, schemaEditAttemptStep.defaults );\n\t\t\t} else {\n\t\t\t\tschemaEditAttemptStep.log( data, (\n\t\t\t\t\tmw.config.get( 'wgWMESchemaEditAttemptStepOversample' ) ||\n\t\t\t\t\tmw.config.get( 'wgMFSchemaEditAttemptStepOversample' ) === 'all' ||\n\t\t\t\t\t// wikitext / visualeditor\n\t\t\t\t\tdata.editor_interface === mw.config.get( 'wgMFSchemaEditAttemptStepOversample' )\n\t\t\t\t) ? 1 : sampleRate );\n\t\t\t}\n\t\t} );\n\n\t} );\n};\n"],"sourceRoot":""}