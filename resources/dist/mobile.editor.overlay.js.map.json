{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessageDetails.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/blockMessageDrawer.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/identifyLeadParagraph.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/parseBlockInfo.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/setPreferredEditor.js","webpack://mfModules.[name]/./src/mobile.startup/MessageBox.js"],"names":["Button","require","View","Icon","util","BlockMessageDetails","createDetailsAnchorHref","blockId","render","mw","getUrl","wpTarget","createDetailsAnchorLabel","msg","createTitle","msgKey","user","isAnon","this","partial","createBody","anonOnly","noCreateAccount","seeMoreLink","reasonHeader","creatorHeader","options","get","expiryHeader","cta","config","progressive","wiki","label","href","Title","quiet","tagName","additionalClassNames","track","events","click","drawer","$el","find","prepend","getButtonConfig","name","parsedReason","then","htmlReason","html","template","module","exports","actionParams","EditorGateway","api","title","sectionId","oldId","preload","preloadparams","editintro","content","undefined","fromModified","hasChanged","prototype","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","getContent","self","resolve","Deferred","text","prop","rvprop","inprop","inpreloadcustom","inpreloadparams","titles","intestactions","intestactionsautocreate","intestactionsdetail","rvstartid","rvsection","resp","revision","reject","query","pages","missing","preloadcontent","preloadisdefault","revisions","timestamp","originalContent","wouldautocreate","setContent","save","apiOptions","result","action","errorformat","errorlang","errorsuselocal","formatversion","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","abortPreview","_pending","abort","getPreview","sectionLine","extend","sectionpreview","disableeditsection","pst","mobileformat","useskin","disabletoc","post","parse","sections","anchor","line","id","promise","Overlay","parseBlockInfo","headers","PageGateway","icons","mfExtend","blockMessageDrawer","MessageBox","mwUser","EditVeTool","toolGroup","classes","super","call","EditorOverlayBase","params","onBeforeExit","bind","className","isBorderBox","isNewPage","placeholder","summaryRequestMsg","pageGateway","overlayManager","OO","inheritClass","ui","Tool","static","icon","group","onSelect","onUpdateState","defaults","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","editor_interface","editor","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","saved","invalidatePage","loader","using","showSaveCompleteMsg","revision_id","setTimeout","location","hash","hook","fire","message","onSaveFailure","errors","captcha","type","badtoken","assertanonfailed","assertuserfailed","assertnameduserfailed","spamblacklist","pagedeleted","editconflict","reportError","errorNotice","heading","$errorNoticeContainer","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","editSwitcher","editingMsg","readOnly","disabled","cancel","saveHeader","previewingMsg","savingHeader","postRender","apply","show","allowCloseWindow","confirmCloseWindow","test","namespace","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","switching","windowManager","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","onExit","target","edited","release","createAnonWarning","$actions","$","addClass","contLangMessages","__non_webpack_require__","gateway","$anonWarning","append","returnto","returnTo","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","map","createAnonTalkWarning","clone","getOptionsForSwitch","switched","currentPageHTMLParser","fakeScroll","titleObj","contentLang","contentDir","getLoadingPromise","dataPromise","handleCaptcha","details","$input","captchaShown","val","attr","mime","detach","url","question","Section","saveFailureMessage","fakeToolbar","toast","setPreferredEditor","VisualEditorOverlay","currentPage","SourceEditorOverlay","isFirefox","navigator","userAgent","visualEditorConfig","isVEVisualAvailable","templatePartials","arguments","_resizeEditor","onInputWikitextEditor","_hidePreview","switchToolbar","switchWindow","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","canSwitch","allowSwitchingToVisualMode","fullRestbaseUrl","allowLossySwitching","_switchToVisualEditor","WindowManager","SwitchConfirmDialog","$element","appendTo","document","body","destroy","setup","include","emit","spinner","hideSpinner","$preview","$content","one","docEl","documentElement","scrollTop","blockScroll","addEventListener","removeEventListener","_loadContent","hide","$anonTalkWarning","$anonHiddenButtons","hideSpinnerAndShowPreview","getDocument","showSpinner","mainpage","parsedText","parsedSectionLine","parseHTML","el","removeClass","container","$scrollContainer","Element","getClosestScrollableContainer","length","css","height","wikitext","feature","targetLoader","addPlugin","loadModules","newOverlay","requestPageData","targetName","modified","replaceCurrent","remove","uri","Uri","mfnotify","search","getQueryString","reload","showOnPageReload","postEdit","router","identifyLeadParagraph","getSingleton","surfaceReady","appendChild","origDataPromise","getPrefixedDb","sessionStore","init","MobileArticleTarget","trackingName","modes","push","isVESourceAvailable","targetFactory","create","defaultMode","once","getSurface","getModel","firstLoad","getDefaultMode","targetInit","load","visualeditor","editHeader","destroyTarget","showAnonWarning","afterSurfaceReady","scrollToLeadParagraph","editLead","editLeadView","readLead","offset","initialCursorOffset","$window","surface","getMode","getView","$attachedRootNode","getLeadSectionElement","top","setLinearSelection","Range","getRange","start","getSelection","getSelectionBoundingRect","padding","overlay","switchToEditor","switchToSourceEditor","setReadOnly","navigateTo","path","useReplaceState","hasBeenModified","Drawer","props","blockDrawer","onBeforeHide","onShow","$drawer","drawerTop","creatorTop","buttonsTop","$seeMore","$container","children","$body","isNonLeadParagraph","node","cloneNode","$node","hasClass","textContent","isNotEmptyNode","$paragraphs","i","p","m","define","blockInfo","blockpartial","blocknocreate","blockanononly","creator","blockedby","expiry","duration","reason","blockid","jqueryMsgParse","parser","jqueryMsg","ast","wikiTextToAst","emitter","e","blockedbyid","makeTitle","blockexpiry","blockexpiryformatted","escaped","blockexpiryrelative","blockreason","escape","Api","contentmodel","catch","readonlyreason","isNamed","saveOption","set","storage","isTemplateMode"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["'use strict';\nconst Button = require( '../mobile.startup/Button' ),\n\tView = require( '../mobile.startup/View' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * @extends View\n */\nclass BlockMessageDetails extends View {\n\t/** @inheritdoc */\n\tget isTemplateMode() {\n\t\treturn true;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget defaults() {\n\t\treturn {\n\t\t\tcreateDetailsAnchorHref: function () {\n\t\t\t\treturn function ( blockId, render ) {\n\t\t\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + render( blockId ) } );\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateDetailsAnchorLabel: function () {\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t\t},\n\t\t\tcreateTitle: function () {\n\t\t\t\tlet msgKey = 'mobile-frontend-editor-blocked-drawer-title';\n\t\t\t\tif ( mw.user.isAnon() ) {\n\t\t\t\t\tmsgKey += '-ip';\n\t\t\t\t}\n\t\t\t\tif ( this.partial ) {\n\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip-partial\n\t\t\t\treturn mw.msg( msgKey );\n\t\t\t},\n\t\t\tcreateBody: function () {\n\t\t\t\tlet msgKey = '';\n\t\t\t\tif ( mw.user.isAnon() && this.anonOnly ) {\n\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body';\n\t\t\t\t\tif ( this.noCreateAccount ) {\n\t\t\t\t\t\tmsgKey += '-login';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgKey += '-login-createaccount';\n\t\t\t\t\t}\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body-partial';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount-partial\n\t\t\t\treturn msgKey ? mw.msg( msgKey ) : msgKey;\n\t\t\t},\n\t\t\tseeMoreLink: mw.msg( 'mobile-frontend-editor-blocked-drawer-body-link' ),\n\t\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\t\tcreatorHeader: function () {\n\t\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t\t},\n\t\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t\t};\n\t}\n\t/**\n\t * Configure the call to action depending on the type of block.\n\t *\n\t * @return {Object} Configuration options\n\t */\n\tgetButtonConfig() {\n\t\tlet cta = true;\n\t\tconst config = {\n\t\t\t\tprogressive: true\n\t\t\t},\n\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\tif ( mw.user.isAnon() && this.options.anonOnly ) {\n\t\t\t// The user can avoid the block by logging in\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-login' );\n\t\t\tconfig.href = new mw.Title( 'Special:UserLogin' ).getUrl();\n\t\t} else if ( this.options.partial ) {\n\t\t\t// The user can avoid the block by editing a different page\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-randompage' );\n\t\t\tconfig.href = new mw.Title( 'Special:Random' ).getUrl();\n\t\t\tconfig.quiet = true;\n\t\t} else {\n\t\t\t// The user cannot avoid the block\n\t\t\tconfig.tagName = 'button';\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-ok' );\n\t\t\tconfig.additionalClassNames = 'cancel';\n\t\t\tcta = false;\n\t\t}\n\n\t\tif ( cta && mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaShown', 1 );\n\t\t\tconfig.events = {\n\t\t\t\tclick: function () {\n\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaClicked', 1 );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn config;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender() {\n\t\tconst drawer = this;\n\t\tthis.$el.find( '.block-message-buttons' ).prepend(\n\t\t\tnew Button( this.getButtonConfig() ).$el\n\t\t);\n\t\tthis.$el.find( '.block-message-icon' ).prepend(\n\t\t\t( new Icon( {\n\t\t\t\tname: 'block-destructive',\n\t\t\t\tadditionalClassNames: 'mw-ui-icon-flush-top'\n\t\t\t} ) ).$el\n\t\t);\n\t\tthis.options.parsedReason.then( function ( htmlReason ) {\n\t\t\tdrawer.$el.find( '.block-message-reason div' ).html( htmlReason );\n\t\t} );\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget template() {\n\t\treturn util.template( `\n<div class=\"block-message block-message-container\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      <div class=\"block-message-item\">\n        <p>\n          {{ createBody }}\n          <a class =\"block-message-see-more\" href=\"#\">{{ seeMoreLink }}</a>\n        </p>\n      </div>\n      <div class=\"block-message-item block-message-creator\">\n        {{#creator.name}}\n          <p>\n            {{ creatorHeader }}\n            <strong>\n              {{#creator.url}}\n                <a href=\"{{ creator.url }}\">{{ creator.name }}</a>\n              {{/creator.url}}\n              {{^creator.url}}\n                {{ creator.name }}\n              {{/creator.url}}\n            </strong>\n          </p>\n        {{/creator.name}}\n      </div>\n      {{#duration}}\n        <div class=\"block-message-item\">\n          <p>\n            {{ expiryHeader }}\n            <strong>{{ duration }}</strong>\n          </p>\n        </div>\n      {{/duration}}\n      {{#blockId}}\n        <div class=\"block-message-item\">\n          <a href=\"{{#createDetailsAnchorHref}}{{ blockId }}{{/createDetailsAnchorHref}}\">\n            {{ createDetailsAnchorLabel }}\n          </a>\n        </div>\n      {{/blockId}}\n    </div>\n  </div>\n  {{#reason}}\n    <div class=\"block-message-item block-message-reason\">\n      <h5>{{ reasonHeader }}</h5>\n      <div><p>{{{ reason }}}</p></div>\n    </div>\n  {{/reason}}\n  <div class=\"block-message-buttons\">\n  </div>\n</div>` );\n\t}\n}\n\nmodule.exports = BlockMessageDetails;\n","var util = require( '../mobile.startup/util' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n *\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {string|null} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n * @param {string} [options.preload] the name of a page to preload into the editor\n * @param {Array} [options.preloadparams] parameters to prefill into the preload content\n * @param {string} [options.editintro] edit intro to add to notices\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\tthis.preload = options.preload;\n\tthis.preloadparams = options.preloadparams;\n\tthis.editintro = options.editintro;\n\tthis.content = undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t *\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\t// TODO: Enable 'editintro' once there is user interface to display the messages\n\t\t\t\tinprop: [ 'preloadcontent' /* , 'editintro' */ ],\n\t\t\t\tinpreloadcustom: self.preload,\n\t\t\t\tinpreloadparams: self.preloadparams,\n\t\t\t\t/* ineditintrocustom: self.editintro, */\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\t// …and test whether this edit will auto-create an account\n\t\t\t\tintestactionsautocreate: true,\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See T52136 - passing rvsection will fail with non wikitext\n\t\t\tif ( this.sectionId ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tvar revision, pageObj;\n\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tpageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tif ( pageObj.preloadcontent ) {\n\t\t\t\t\t\tself.content = pageObj.preloadcontent.content;\n\t\t\t\t\t\tself.hasChanged = !pageObj.preloadisdefault;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.content = '';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trevision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\t\t\t\tself.wouldautocreate = pageObj.wouldautocreate && pageObj.wouldautocreate.edit;\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t *\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\terrorformat: 'html',\n\t\t\t\terrorlang: mw.config.get( 'wgUserLanguage' ),\n\t\t\t\terrorsuselocal: 1,\n\t\t\t\tformatversion: 2,\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t}\n\n\t\t\tif ( self.sectionId ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( data );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( data );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (T51218)\n\t\t\tsectionpreview: true,\n\t\t\t// Hide section edit links\n\t\t\tdisableeditsection: true,\n\t\t\t// needed for pre-save transform to work (T55692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (T56243)\n\t\t\tmobileformat: true,\n\t\t\tuseskin: mw.config.get( 'skin' ),\n\t\t\tdisabletoc: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\t\tthis._pending = this.api.post( options );\n\n\t\treturn this._pending.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// When editing section 0 or the whole page, there is no section name, so skip\n\t\t\t\tif ( self.sectionId && self.sectionId !== '0' &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn util.Deferred().reject();\n\t\t\t}\n\t\t} ).promise( {\n\t\t\tabort: function () { self._pending.abort(); }\n\t\t} );\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tparseBlockInfo = require( './parseBlockInfo' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tblockMessageDrawer = require( './blockMessageDrawer' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n *\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n *\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses Icon\n * @uses user\n * @param {Object} params Configuration options\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.pageGateway = new PageGateway( options.api );\n\tthis.isNewPage = options.isNewPage;\n\tthis.sectionId = options.sectionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<h2 class=\"summary-request\">{{{summaryRequestMsg}}}</h2>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<div class=\"license\">{{{licenseMsg}}}</div>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'editAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'visualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Updates urls and shows toast message.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null\n\t *  edit.\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tvar\n\t\t\ttitle = this.options.title,\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\tthis.pageGateway.invalidatePage( title );\n\n\t\tif ( newRevId ) {\n\t\t\tmw.loader.using( 'mediawiki.action.view.postEdit' ).then( function () {\n\t\t\t\tvar msg;\n\t\t\t\tif ( self.isNewPage ) {\n\t\t\t\t\tmsg = mw.msg( 'postedit-confirmation-created', mw.user );\n\t\t\t\t} else if ( self.options.oldId ) {\n\t\t\t\t\tmsg = mw.msg( 'postedit-confirmation-restored', mw.user );\n\t\t\t\t} else if ( mw.config.get( 'wgEditSubmitButtonLabelPublish' ) ) {\n\t\t\t\t\tmsg = mw.msg( 'postedit-confirmation-published', mw.user );\n\t\t\t\t} else {\n\t\t\t\t\tmsg = mw.msg( 'postedit-confirmation-saved', mw.user );\n\t\t\t\t}\n\t\t\t\tself.showSaveCompleteMsg( msg );\n\t\t\t} );\n\t\t}\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tsetTimeout( function () {\n\t\t\t// Wait for any other teardown navigation to happen (e.g. router.back())\n\t\t\t// before setting our final location.\n\t\t\tif ( self.sectionId ) {\n\t\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t\t} else {\n\t\t\t\t// Cancel the hash fragment\n\t\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t\t// and may conflict with the window.reload call below.\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#';\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Show a save-complete message to the user\n\t *\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {string} msg Message\n\t */\n\tshowSaveCompleteMsg: function ( msg ) {\n\t\t// Fire a hook after an edit was saved, like in MediaWiki core.\n\t\tmw.hook( 'postEdit' ).fire( {\n\t\t\tmessage: msg\n\t\t} );\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data API response\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar code = data && data.errors && data.errors[0] && data.errors[0].code,\n\t\t\t// Compare to ve.init.mw.ArticleTargetEvents.js in VisualEditor.\n\t\t\ttypeMap = {\n\t\t\t\tbadtoken: 'userBadToken',\n\t\t\t\tassertanonfailed: 'userNewUser',\n\t\t\t\tassertuserfailed: 'userNewUser',\n\t\t\t\tassertnameduserfailed: 'userNewUser',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\t'abusefilter-warning': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// This is blocked on T254649\n\t\t\t\tspamblacklist: 'extensionSpamBlacklist',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// Removal of this line is blocked on T254650.\n\t\t\t\t'titleblacklist-forbidden': 'extensionTitleBlacklist',\n\t\t\t\tpagedeleted: 'editPageDeleted',\n\t\t\t\teditconflict: 'editConflict'\n\t\t\t};\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tcode = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: code,\n\t\t\ttype: typeMap[code] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text (HTML) of message to display to user\n\t */\n\treportError: function ( text ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'mw-message-box-error',\n\t\t\tmsg: text,\n\t\t\theading: mw.msg( 'mobile-frontend-editor-error' )\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.hideErrorNotice();\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew Icon( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\tname: 'next-invert',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\ttitle: options.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis.onStageChanges();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t * @param {Function} cancel Callback to cancel exiting the overlay\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar self = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\tif ( !this.windowManager ) {\n\t\t\t\tthis.windowManager = OO.ui.getWindowManager();\n\t\t\t\tthis.windowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\t}\n\t\t\tthis.windowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.onExit();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.onExit();\n\t\texit();\n\t},\n\tonExit: function () {\n\t\t// May not be set if overlay has not been previously shown\n\t\tif ( this.allowCloseWindow ) {\n\t\t\tthis.allowCloseWindow.release();\n\t\t}\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t// Use MediaWiki ResourceLoader require(), not Webpack require()\n\t\t\tcontLangMessages = (\n\t\t\t\t// eslint-disable-next-line camelcase\n\t\t\t\ttypeof __non_webpack_require__ !== 'undefined' ?\n\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\t__non_webpack_require__( './contLangMessages.json' ) :\n\t\t\t\t\t{}\n\t\t\t),\n\t\t\tmsg = this.gateway.wouldautocreate ?\n\t\t\t\t'mobile-frontend-editor-autocreatewarning' :\n\t\t\t\t'mobile-frontend-editor-anonwarning',\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'mw-message-box-notice anon-msg',\n\t\t\t\t\t// eslint-disable-next-line mediawiki/msg-doc\n\t\t\t\t\tmsg: mw.message( msg, contLangMessages[ 'tempuser-helppage' ] ).parse()\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t\treturnto: options.returnTo || (\n\t\t\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\t\tmw.config.get( 'wgPageName' ) + '#/editor/' + ( options.sectionId || 'all' )\n\t\t\t\t),\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\t/**\n\t * Creates and returns a copy of the anon talk message warning\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonTalkWarning: function () {\n\t\treturn $( '.minerva-anon-talk-message' ).clone();\n\t},\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tcurrentPageHTMLParser: this.options.currentPageHTMLParser,\n\t\t\tfakeScroll: this.options.fakeScroll,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Get a promise that is resolved when the editor data has loaded,\n\t * or rejected when we're refusing to load the editor because the user is blocked.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetLoadingPromise: function () {\n\t\treturn this.dataPromise.then( function ( result ) {\n\t\t\t// check if user is blocked\n\t\t\tif ( result && result.blockinfo ) {\n\t\t\t\tvar block = parseBlockInfo( result.blockinfo ),\n\t\t\t\t\tmessage = blockMessageDrawer( block );\n\t\t\t\treturn util.Deferred().reject( message );\n\t\t\t}\n\t\t\treturn result;\n\t\t} );\n\t},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\ttoast = require( '../mobile.startup/showOnPageReload' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tcurrentPage = require( '../mobile.startup/currentPage' );\n\n/**\n * Overlay that shows an editor\n *\n * @class SourceEditorOverlay\n * @uses Section\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {Object} [options.visualEditorConfig] falls back to wgVisualEditorConfig if not defined\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.visualEditorConfig = options.visualEditorConfig ||\n\t\tmw.config.get( 'wgVisualEditorConfig' ) || {};\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tfromModified: !!dataPromise,\n\t\tpreload: options.preload,\n\t\tpreloadparams: options.preloadparams,\n\t\teditintro: options.editintro\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise || this.gateway.getContent();\n\tthis.currentPage = currentPage();\n\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container content\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\t\t// Ensure we do this after showing the overlay, otherwise it doesn't work.\n\t\tthis._resizeEditor();\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this,\n\t\t\tconfig = this.visualEditorConfig;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar, windowManager, switchWindow,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\t// NOTE: Should be just config.allowSwitchingToVisualMode, but we need to\n\t\t\t\t\t// preserve compatibility for a bit.\n\t\t\t\t\tvar canSwitch = config.allowSwitchingToVisualMode ||\n\t\t\t\t\t\tconfig.fullRestbaseUrl ||\n\t\t\t\t\t\tconfig.allowLossySwitching;\n\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else if ( canSwitch ) {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twindowManager = new OO.ui.WindowManager();\n\t\t\t\t\t\t\tswitchWindow = new mw.libs.ve.SwitchConfirmDialog();\n\t\t\t\t\t\t\twindowManager.$element.appendTo( document.body );\n\t\t\t\t\t\t\twindowManager.addWindows( [ switchWindow ] );\n\t\t\t\t\t\t\twindowManager.openWindow( switchWindow, { mode: 'simple' } )\n\t\t\t\t\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\twindowManager.destroy();\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\t// This spinner is still used when displaying save/preview panel\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner().$el );\n\t\tthis.hideSpinner();\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\t// The following classes can be used here:\n\t\t// * mw-editfont-monospace\n\t\t// * mw-editfont-sans-serif\n\t\t// * mw-editfont-serif\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content\n\t\t\t.on( 'input', this._resizeEditor.bind( this ) )\n\t\t\t.one( 'input', function () {\n\t\t\t\tself.log( { action: 'firstChange' } );\n\t\t\t} );\n\n\t\tif ( this.isFirefox ) {\n\t\t\tthis.$content.on( 'mousedown', function () {\n\t\t\t\t// Support: Firefox Mobile\n\t\t\t\t// Firefox scrolls back to the top of the page *every time*\n\t\t\t\t// you tap on the textarea. This makes things slightly\n\t\t\t\t// more usable by restoring your scroll offset every time\n\t\t\t\t// the page scrolls for the next 1000ms.\n\t\t\t\t// The page will still flicker every time the user touches\n\t\t\t\t// to place the cursor, but this is better than completely\n\t\t\t\t// losing your scroll offset. (T214880)\n\t\t\t\tvar docEl = document.documentElement,\n\t\t\t\t\tscrollTop = docEl.scrollTop;\n\t\t\t\tfunction blockScroll() {\n\t\t\t\t\tdocEl.scrollTop = scrollTop;\n\t\t\t\t}\n\t\t\t\twindow.addEventListener( 'scroll', blockScroll );\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\twindow.removeEventListener( 'scroll', blockScroll );\n\t\t\t\t}, 1000 );\n\t\t\t} );\n\t\t}\n\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis.$content.show();\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t\tmw.hook( 'wikipage.content' ).fire( self.$preview );\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass(\n\t\t\t\t'mw-message-box mw-message-box-error'\n\t\t\t).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass(\n\t\t\t'mw-message-box-error'\n\t\t).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this;\n\n\t\tthis.$content.hide();\n\n\t\tthis.getLoadingPromise()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar content = result.text;\n\n\t\t\t\tself.setContent( content );\n\n\t\t\t\t// If the loaded content is not the default content, enable the save button\n\t\t\t\tif ( self.hasChanged() ) {\n\t\t\t\t\tself.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t\t\t\t}\n\n\t\t\t\tvar options = self.options;\n\t\t\t\tvar showAnonWarning = options.isAnon && !options.switched;\n\n\t\t\t\tif ( showAnonWarning ) {\n\t\t\t\t\tself.$anonWarning = self.createAnonWarning( options );\n\t\t\t\t\tself.$anonTalkWarning = self.createAnonTalkWarning();\n\t\t\t\t\tself.$el.find( '.editor-container' ).append( [ self.$anonTalkWarning, self.$anonWarning ] );\n\t\t\t\t\tself.$content.hide();\n\t\t\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t\t\t// disable \"Next\" button on top right\n\t\t\t\t\tself.$anonHiddenButtons = self.$el.find( '.overlay-header .continue' ).hide();\n\t\t\t\t}\n\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tsetPreferredEditor( 'VisualEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.$content.prop( 'readonly', true );\n\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'ext.visualEditor.mobileArticleTarget' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar newOverlay, options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tnewOverlay = new VisualEditorOverlay( options );\n\t\t\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\t\t\tself.switching = true;\n\t\t\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\t\t\tself.switching = false;\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.$el.removeClass( 'switching' );\n\t\t\t\tself.$el.find( '.overlay-header-container' ).show();\n\t\t\t\tself.$el.find( '.ve-mobile-fakeToolbar-container' ).remove();\n\t\t\t\tself.$content.prop( 'readonly', false );\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null\n\t *  edit.\n\t */\n\tonSaveComplete: function ( newRevId ) {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\n\t\t// The parent class changes the location hash in a setTimeout, so wait\n\t\t// for that to happen before reloading.\n\t\tsetTimeout( function () {\n\t\t\tif ( newRevId ) {\n\t\t\t\t// Set a notify parameter similar to venotify in VisualEditor.\n\t\t\t\tvar uri = new mw.Uri( location.href );\n\t\t\t\turi.query.mfnotify = this.isNewPage ? 'created' : 'saved';\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.search = uri.getQueryString();\n\t\t\t} else {\n\t\t\t\t// Null edit; do not add notify parameter.\n\t\t\t\t// Note the \"#\" may be in the URL.\n\t\t\t\t// If so, using window.location alone will not reload the page\n\t\t\t\t// we need to forcefully refresh\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshowSaveCompleteMsg: function ( msg ) {\n\t\ttoast.showOnPageReload( msg, { postEdit: true } );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar msg, noRetry;\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tthis.captchaId = data.edit.captcha.id;\n\t\t\tthis.handleCaptcha( data.edit.captcha );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tthis.reportError( msg );\n\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\n\t\t\t// Some errors may be temporary, but for others we know for sure that the save will\n\t\t\t// never succeed, so don't confuse the user by giving them the option to retry.\n\t\t\tnoRetry = data.errors && data.errors.some( function ( error ) {\n\t\t\t\treturn error.code === 'abusefilter-disallowed';\n\t\t\t} );\n\n\t\t\tif ( noRetry ) {\n\t\t\t\t// disable continue and save buttons, reenabled when user changes content\n\t\t\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', true );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve, $ */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tidentifyLeadParagraph = require( './identifyLeadParagraph' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tutil = require( '../mobile.startup/util' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\toverlayManager = OverlayManager.getSingleton(),\n\tcurrentPage = require( '../mobile.startup/currentPage' );\n\n/**\n * Overlay for VisualEditor view\n *\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tvar surfaceReady = util.Deferred();\n\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// VE surfaces must be attached to the DOM while initializing, and measurable\n\tthis.$el.addClass( 'editor-overlay-ve-initializing' );\n\toverlayManager.container.appendChild( this.$el[ 0 ] );\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId\n\t} );\n\n\tthis.origDataPromise = this.options.dataPromise || mw.libs.ve.targetLoader.requestPageData(\n\t\t'visual',\n\t\toptions.titleObj.getPrefixedDb(),\n\t\t{\n\t\t\tsessionStore: true,\n\t\t\tsection: options.sectionId || null,\n\t\t\toldId: options.oldId || undefined,\n\t\t\ttargetName: ve.init.mw.MobileArticleTarget.static.trackingName,\n\t\t\tpreload: options.preload,\n\t\t\tpreloadparams: options.preloadparams,\n\t\t\teditintro: options.editintro\n\t\t}\n\t);\n\n\tvar modes = [];\n\tthis.currentPage = currentPage();\n\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\tmodes.push( 'visual' );\n\t}\n\tif ( this.currentPage.isVESourceAvailable() ) {\n\t\tmodes.push( 'source' );\n\t}\n\n\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t$element: this.$el,\n\t\t// string or null, but not undefined\n\t\tsection: this.options.sectionId || null,\n\t\tmodes: modes,\n\t\t// If source is passed in without being in modes, it'll just fall back to visual\n\t\tdefaultMode: this.options.mode === 'source' ? 'source' : 'visual'\n\t} );\n\tthis.target.once( 'surfaceReady', function () {\n\t\tsurfaceReady.resolve();\n\n\t\tthis.target.getSurface().getModel().getDocument().once( 'transact', function () {\n\t\t\tthis.log( { action: 'firstChange' } );\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n\tvar firstLoad = true;\n\tthis.target.on( 'surfaceReady', function () {\n\t\tsetPreferredEditor( this.target.getDefaultMode() === 'source' ? 'SourceEditor' : 'VisualEditor' );\n\t\t// On first surfaceReady we wait for any dialogs to be closed before running targetInit.\n\t\t// On subsequent surfaceReady's (i.e. edit mode switch) we can initialize immediately.\n\t\tif ( !firstLoad ) {\n\t\t\tthis.targetInit();\n\t\t}\n\t\tfirstLoad = false;\n\t}.bind( this ) );\n\n\tthis.target.load( this.origDataPromise );\n\n\t// Overlay is only shown after this is resolved. It must be resolved\n\t// with the API response regardless of what we are waiting for.\n\tthis.dataPromise = this.origDataPromise.then( function ( data ) {\n\t\tthis.gateway.wouldautocreate =\n\t\t\tdata && data.visualeditor && data.visualeditor.wouldautocreate;\n\n\t\treturn surfaceReady.then( function () {\n\t\t\tthis.$el.removeClass( 'editor-overlay-ve-initializing' );\n\t\t\treturn data && data.visualeditor;\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis.targetInit();\n\t\t} else {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$anonTalkWarning = this.createAnonTalkWarning();\n\t\t\tthis.$el.append( [ this.$anonTalkWarning, this.$anonWarning ] );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t}\n\n\t\tthis.emit( 'editor-loaded' );\n\t},\n\t/**\n\t * Initialize the target after it has been made visible\n\t */\n\ttargetInit: function () {\n\t\t// Note this.target will not be set if an error occurred and/or destroyTarget was called.\n\t\tif ( this.target ) {\n\t\t\tthis.target.afterSurfaceReady();\n\t\t\tthis.scrollToLeadParagraph();\n\t\t}\n\t},\n\t/**\n\t * Scroll so that the lead paragraph in edit mode shows at the same place on the screen\n\t * as the lead paragraph in read mode.\n\t *\n\t * Their normal position is different because of (most importantly) the lead paragraph\n\t * transformation to move it before the infobox, and also invisible templates and slugs\n\t * caused by the presence of hatnote templates (both only shown in edit mode).\n\t */\n\tscrollToLeadParagraph: function () {\n\t\tvar editLead, editLeadView, readLead, offset, initialCursorOffset,\n\t\t\tcurrentPageHTMLParser = this.options.currentPageHTMLParser,\n\t\t\tfakeScroll = this.options.fakeScroll,\n\t\t\t$window = $( window ),\n\t\t\tsection = this.target.section,\n\t\t\tsurface = this.target.getSurface(),\n\t\t\tmode = surface.getMode();\n\n\t\tif ( ( section === null || section === '0' ) && mode === 'visual' ) {\n\t\t\teditLead = identifyLeadParagraph( surface.getView().$attachedRootNode );\n\t\t\tif ( currentPageHTMLParser.getLeadSectionElement() ) {\n\t\t\t\treadLead = identifyLeadParagraph( currentPageHTMLParser.getLeadSectionElement() );\n\t\t\t}\n\n\t\t\tif ( editLead && readLead ) {\n\t\t\t\toffset = $( editLead ).offset().top - ( $( readLead ).offset().top - fakeScroll );\n\t\t\t\t// Set a model range to match\n\t\t\t\teditLeadView = $( editLead ).data( 'view' );\n\t\t\t\tif ( editLeadView ) {\n\t\t\t\t\tsurface.getModel().setLinearSelection(\n\t\t\t\t\t\tnew ve.Range( editLeadView.getModel().getRange().start )\n\t\t\t\t\t);\n\t\t\t\t\tinitialCursorOffset =\n\t\t\t\t\t\tsurface.getView().getSelection().getSelectionBoundingRect().top;\n\t\t\t\t\t// Ensure the surface is tall enough to scroll the cursor into view\n\t\t\t\t\tsurface.$element.css( 'min-height', $window.height() + initialCursorOffset - surface.padding.top );\n\t\t\t\t}\n\t\t\t\t$window.scrollTop( offset );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t}, cancel );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\tself.$el.find( '.overlay-content' ).show();\n\t\tthis.targetInit();\n\t},\n\t/**\n\t * Reveal the editing interface.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\tnewOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tsetPreferredEditor( 'SourceEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.target.getSurface().setReadOnly( true );\n\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tnewOverlay = new SourceEditorOverlay( options, dataPromise );\n\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\tself.switching = true;\n\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\tself.switching = false;\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","const\n\tDrawer = require( '../mobile.startup/Drawer' ),\n\tBlockMessageDetails = require( './BlockMessageDetails' );\n\n/**\n * @typedef {Object} BlockMessageOptions\n * @property {number} blockId representing the block\n * @property {boolean} partial is this a partial block?\n * @property {Object} creator\n * @property {string} creator.name of the blocker\n * @property {string} creator.url associated with the block\n * @property {string} reason for block\n * @property {string} [duration] of block e.g. \"1 week\"\n * @property {string} [expiry] of block, wrapped in parentheses\n *  e.g. \"(1st September 2019)\"\n */\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n *\n * @param {BlockMessageOptions} props\n * @return {Drawer}\n */\nmodule.exports = function blockMessageDrawer( props ) {\n\tconst blockDrawer = new Drawer( {\n\t\tclassName: 'drawer block-message',\n\t\tonBeforeHide: function ( drawer ) {\n\t\t\tdrawer.$el.remove();\n\t\t},\n\t\tonShow: function () {\n\t\t\tconst $drawer = blockDrawer.$el.find( '.drawer.block-message' ),\n\t\t\t\tdrawerTop = $drawer.offset().top - 100,\n\t\t\t\tcreatorTop = blockDrawer.$el.find( '.block-message-creator' ).offset().top - 100,\n\t\t\t\tbuttonsTop = blockDrawer.$el.find( '.block-message-buttons' ).offset().top - 100,\n\t\t\t\t$seeMore = blockDrawer.$el.find( '.block-message-see-more' ),\n\t\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\t\t$drawer.css( 'top', drawerTop + ( buttonsTop - creatorTop ) );\n\t\t\t$seeMore.on(\n\t\t\t\t'click',\n\t\t\t\tfunction () {\n\t\t\t\t\tconst $container = blockDrawer.$el.find( '.block-message-container' );\n\t\t\t\t\t$drawer.css( 'top', 0 );\n\t\t\t\t\t$container.css( 'overflow-y', 'auto' );\n\t\t\t\t\t$container.css( 'height', buttonsTop - $container.offset().top );\n\t\t\t\t\t$seeMore.hide();\n\n\t\t\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.reasonShown', 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.shown', 1 );\n\t\t\t}\n\t\t},\n\t\tchildren: [\n\t\t\t( new BlockMessageDetails( props ) ).$el\n\t\t]\n\t} );\n\treturn blockDrawer;\n};\n","/* global $ */\n/**\n * Find first paragraph that has text content, i.e. paragraphs that are not empty.\n * Keep in sync with MoveLeadParagraphTransform::identifyLeadParagraph().\n *\n * @param {jQuery} $body Where to search for paragraphs\n * @return {Node|null} The lead paragraph\n */\nmodule.exports = function identifyLeadParagraph( $body ) {\n\t// Keep in sync with MoveLeadParagraphTransform::isNotEmptyNode()\n\tfunction isNotEmptyNode( node ) {\n\t\t// Ignore VE whitespace characters\n\t\treturn !/^[\\s↵➞]*$/.test( node.textContent );\n\t}\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNonLeadParagraph()\n\tfunction isNonLeadParagraph( node ) {\n\t\tnode = node.cloneNode( true );\n\t\tvar $node = $( node );\n\t\t// The paragraph itself can be an invisible template (T293834)\n\t\tif ( $node.hasClass( 've-ce-focusableNode-invisible' ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t// Ignore non-content nodes, TemplateStyles and coordinates\n\t\t$node.find( '.ve-ce-branchNode-inlineSlug, .ve-ce-focusableNode-invisible, style, span#coordinates' ).remove();\n\t\tif ( isNotEmptyNode( node ) ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar $paragraphs = $body.children( 'p' );\n\tfor ( var i = 0; i < $paragraphs.length; i++ ) {\n\t\tvar p = $paragraphs[ i ];\n\t\tif ( !isNonLeadParagraph( p ) ) {\n\t\t\treturn p;\n\t\t}\n\t}\n\treturn null;\n};\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n","var util = require( '../mobile.startup/util' );\n\n/**\n * @param {string} blockinfo\n * @return {Object}\n */\nmodule.exports = function parseBlockInfo( blockinfo ) {\n\tconst blockInfo = {\n\t\tpartial: blockinfo.blockpartial || false,\n\t\tnoCreateAccount: blockinfo.blocknocreate || false,\n\t\tanonOnly: blockinfo.blockanononly === undefined ? true : blockinfo.blockanononly,\n\t\tcreator: {\n\t\t\tname: blockinfo.blockedby,\n\t\t\turl: null\n\t\t},\n\t\texpiry: null,\n\t\tduration: null,\n\t\treason: '',\n\t\tblockId: blockinfo.blockid\n\t};\n\n\t// Workaround to parse a message parameter for mw.message, see T96885\n\tfunction jqueryMsgParse( wikitext ) {\n\t\t// eslint-disable-next-line new-cap\n\t\tconst parser = new mw.jqueryMsg.parser();\n\t\ttry {\n\t\t\tconst ast = parser.wikiTextToAst( wikitext );\n\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t} catch ( e ) {\n\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t// can't parse templates.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// URL only useful if block creator is a local user\n\tif ( blockinfo.blockedbyid === 0 ) {\n\t\tblockInfo.creator.url = '';\n\t} else {\n\t\tblockInfo.creator.url = mw.Title.makeTitle(\n\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\tblockInfo.creator.name\n\t\t).getUrl();\n\t}\n\n\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( blockinfo.blockexpiry ) === -1 ) {\n\t\tblockInfo.expiry = mw.message( 'parentheses', blockinfo.blockexpiryformatted ).escaped();\n\t\tblockInfo.duration = blockinfo.blockexpiryrelative;\n\t}\n\n\tconst reason = blockinfo.blockreason;\n\tif ( reason ) {\n\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\tblockInfo.parsedReason = ( new mw.Api() ).get( {\n\t\t\taction: 'parse',\n\t\t\tformatversion: 2,\n\t\t\ttext: reason,\n\t\t\tcontentmodel: 'wikitext'\n\t\t} ).then( function ( result ) {\n\t\t\treturn result.parse.text;\n\t\t} ).catch( function () {\n\t\t\treturn jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} );\n\t} else {\n\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\tblockInfo.parsedReason = util.Deferred().resolve( blockInfo.reason ).promise();\n\t}\n\n\treturn blockInfo;\n};\n","/**\n * Build a save failure message from the API response\n *\n * @param {Object} data API response\n * @return {string} message HTML text describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\t// In most cases, return the error message from the API directly.\n\t// Handle a few exceptions where it is unsuitable for end-users\n\t// (some error messages are seemingly intended for tool developers).\n\n\tvar code = data && data.errors && data.errors[0] && data.errors[0].code;\n\n\tif ( code === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t}\n\n\tif ( code === 'readonly' ) {\n\t\treturn data.errors[0].html + '<br>' + data.errors[0].data.readonlyreason;\n\t}\n\n\tif ( data.errors && data.errors[0] ) {\n\t\treturn data.errors[0].html;\n\t}\n\n\t// This probably indicates a connection problem and a \"fake\" response\n\t// generated by mediawiki.Api. TODO Give a better error message here.\n\treturn '';\n};\n","/**\n * Store the user's preferred editor\n *\n * @param {string} editor 'VisualEditor' or 'SourceEditor'\n */\nmodule.exports = function setPreferredEditor( editor ) {\n\tif ( mw.user.isNamed() ) {\n\t\tnew mw.Api().saveOption( 'mobile-editor', editor ).then( function () {\n\t\t\tmw.user.options.set( 'mobile-editor', editor );\n\t\t} );\n\t} else {\n\t\tmw.storage.set( 'preferredEditor', editor );\n\t}\n};\n","var\n\tView = require( './View' ),\n\tutil = require( './util' ),\n\tmfExtend = require( './mfExtend' );\n\n/**\n * @class MessageBox\n * @extends View\n */\nfunction MessageBox() {\n\tView.apply( this, arguments );\n}\n\nmfExtend( MessageBox, View, {\n\t/**\n\t * @inheritdoc\n\t * @memberof MessageBox\n\t * @instance\n\t */\n\tisTemplateMode: true,\n\t/**\n\t * @memberof MessageBox\n\t * @instance\n\t * @mixes View#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} [defaults.heading] heading to show along with message (text)\n\t * @property {string} defaults.msg message to show (html)\n\t * @property {string} defaults.className either mw-message-box-error,\n\t *   mw-message-box-notice or mw-message-box-warning\n\t */\n\tdefaults: {},\n\t/**\n\t * @memberof MessageBox\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"{{className}} mw-message-box\">\n\t{{#heading}}<h2>{{heading}}</h2>{{/heading}}\n\t{{{msg}}}\n</div>\n\t` )\n} );\n\nmodule.exports = MessageBox;\n"],"sourceRoot":""}