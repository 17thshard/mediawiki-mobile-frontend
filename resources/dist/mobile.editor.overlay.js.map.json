{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.editor.overlay/BlockMessageDetails.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorGateway.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/EditorOverlayBase.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/SourceEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/VisualEditorOverlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/blockMessageDrawer.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/identifyLeadParagraph.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/mobile.editor.overlay.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/parseBlockInfo.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/saveFailureMessage.js","webpack://mfModules.[name]/./src/mobile.editor.overlay/setPreferredEditor.js"],"names":["Button","require","View","Icon","util","BlockMessageDetails","createDetailsAnchorHref","blockId","render","mw","getUrl","wpTarget","createDetailsAnchorLabel","msg","createTitle","msgKey","user","isAnon","this","partial","createBody","anonOnly","noCreateAccount","seeMoreLink","reasonHeader","creatorHeader","options","get","expiryHeader","cta","config","progressive","wiki","label","href","Title","quiet","tagName","additionalClassNames","track","events","click","drawer","$el","find","prepend","getButtonConfig","icon","parsedReason","then","htmlReason","html","template","module","exports","actionParams","EditorGateway","api","title","sectionId","oldId","preload","preloadparams","editintro","content","undefined","fromModified","hasChanged","prototype","getBlockInfo","pageObj","blockedError","actions","edit","Array","isArray","some","error","indexOf","code","data","blockinfo","getContent","self","resolve","Deferred","text","notices","prop","rvprop","inprop","inpreloadcustom","inpreloadparams","ineditintrocustom","titles","intestactions","intestactionsautocreate","intestactionsdetail","rvstartid","rvsection","resp","reject","query","pages","missing","preloadcontent","preloadisdefault","revision","revisions","timestamp","originalContent","wouldautocreate","setContent","save","apiOptions","result","action","errorformat","errorlang","errorsuselocal","formatversion","summary","captchaid","captchaId","captchaword","captchaWord","basetimestamp","starttimestamp","section","postWithToken","newrevid","tempusercreatedredirect","abortPreview","_pending","abort","getPreview","sectionLine","extend","sectionpreview","disableeditsection","pst","mobileformat","useskin","disabletoc","acquireTempUserName","post","parse","sections","anchor","line","id","promise","Overlay","parseBlockInfo","headers","icons","IconButton","mfExtend","blockMessageDrawer","MessageBox","mwUser","EditVeTool","toolGroup","classes","super","call","EditorOverlayBase","params","onBeforeExit","bind","className","isBorderBox","isNewPage","placeholder","summaryRequestMsg","overlayManager","OO","inheritClass","ui","Tool","static","name","group","onSelect","onUpdateState","defaults","hasToolbar","continueMsg","closeMsg","summaryMsg","captchaMsg","captchaTryAgainMsg","switchMsg","confirmMsg","licenseMsg","log","editor_interface","editor","logFeatureUse","confirmSave","window","confirm","onSaveComplete","newRevId","redirectUrl","saved","showSaveCompleteMsg","revision_id","setTimeout","location","hash","loader","fireHook","onSaveFailure","errors","captcha","message","type","badtoken","assertanonfailed","assertuserfailed","assertnameduserfailed","spamblacklist","pagedeleted","editconflict","reportError","errorNotice","heading","$errorNoticeContainer","hideErrorNotice","empty","onStageChanges","showHidden","scrollTo","onSaveBegin","confirmAborted","preRender","formHeader","editSwitcher","editingMsg","readOnly","weight","disabled","cancel","saveHeader","previewingMsg","savingHeader","postRender","apply","show","allowCloseWindow","confirmCloseWindow","test","namespace","hook","fire","onClickBack","onClickSubmit","onClickContinue","onClickAnonymous","exit","switching","windowManager","getWindowManager","addWindows","widgets","AbandonEditDialog","openWindow","closed","mechanism","onExit","target","edited","getParamValue","reload","release","createAnonWarning","$actions","$","addClass","contLangMessages","__non_webpack_require__","gateway","$anonWarning","append","returnto","returnTo","warning","queryParams","signupParams","signupQueryParams","anonymousEditorActions","block","map","createAnonTalkWarning","clone","getOptionsForSwitch","switched","currentPageHTMLParser","fakeScroll","titleObj","contentLang","contentDir","getLoadingPromise","dataPromise","showEditNotices","editNotices","Object","keys","filter","key","storageKey","storage","set","length","using","$container","forEach","$notice","alert","handleCaptcha","details","$input","captchaShown","val","attr","mime","detach","url","question","Section","saveFailureMessage","fakeToolbar","setPreferredEditor","VisualEditorOverlay","currentPage","SourceEditorOverlay","isFirefox","navigator","userAgent","isVEVisualAvailable","templatePartials","arguments","_resizeEditor","onInputWikitextEditor","_hidePreview","switchToolbar","toolFactory","ToolFactory","toolGroupFactory","ToolGroupFactory","register","libs","ve","MWEditModeVisualTool","MWEditModeSourceTool","Toolbar","on","mode","_switchToVisualEditor","setup","include","$element","emit","spinner","hideSpinner","$preview","$content","one","docEl","document","documentElement","scrollTop","blockScroll","addEventListener","removeEventListener","_loadContent","hide","$anonTalkWarning","$anonHiddenButtons","hideSpinnerAndShowPreview","getDocument","showSpinner","mainpage","parsedText","parsedSectionLine","parseHTML","el","removeClass","container","$scrollContainer","Element","getClosestScrollableContainer","css","height","wikitext","feature","targetLoader","addPlugin","loadModules","newOverlay","requestPageData","targetName","modified","replaceCurrent","remove","URL","searchParams","search","fireHookOnPageReload","router","identifyLeadParagraph","getSingleton","surfaceReady","appendChild","origDataPromise","getPrefixedDb","sessionStore","init","MobileArticleTarget","trackingName","modes","push","isVESourceAvailable","targetFactory","create","defaultMode","once","getSurface","getModel","firstLoad","getDefaultMode","targetInit","load","visualeditor","editHeader","destroyTarget","destroy","showAnonWarning","afterSurfaceReady","scrollToLeadParagraph","editLead","editLeadView","readLead","offset","initialCursorOffset","$window","surface","getMode","getView","$attachedRootNode","getLeadSectionElement","top","setLinearSelection","Range","getRange","start","getSelection","getSelectionBoundingRect","padding","overlay","switchToEditor","switchToSourceEditor","setReadOnly","navigateTo","path","useReplaceState","hasBeenModified","Drawer","props","blockDrawer","onBeforeHide","onShow","$drawer","drawerTop","creatorTop","buttonsTop","$seeMore","children","$body","isNonLeadParagraph","node","cloneNode","$node","hasClass","textContent","isNotEmptyNode","$paragraphs","i","p","m","define","blockInfo","blockpartial","blocknocreate","blockanononly","creator","blockedby","expiry","duration","reason","blockid","jqueryMsgParse","parser","jqueryMsg","Parser","ast","wikiTextToAst","emitter","e","blockedbyid","makeTitle","blockexpiry","blockexpiryformatted","escaped","blockexpiryrelative","blockreason","escape","Api","contentmodel","catch","readonlyreason","isNamed","saveOption"],"mappings":"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","file":"mobile.editor.overlay.js","sourcesContent":["'use strict';\nconst Button = require( '../mobile.startup/Button' ),\n\tView = require( '../mobile.startup/View' ),\n\tIcon = require( '../mobile.startup/Icon' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * @extends View\n */\nclass BlockMessageDetails extends View {\n\t/** @inheritdoc */\n\tget isTemplateMode() {\n\t\treturn true;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget defaults() {\n\t\treturn {\n\t\t\tcreateDetailsAnchorHref: function () {\n\t\t\t\treturn function ( blockId, render ) {\n\t\t\t\t\treturn mw.util.getUrl( 'Special:BlockList', { wpTarget: '#' + render( blockId ) } );\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateDetailsAnchorLabel: function () {\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-help' );\n\t\t\t},\n\t\t\tcreateTitle: function () {\n\t\t\t\tlet msgKey = 'mobile-frontend-editor-blocked-drawer-title';\n\t\t\t\tif ( mw.user.isAnon() ) {\n\t\t\t\t\tmsgKey += '-ip';\n\t\t\t\t}\n\t\t\t\tif ( this.partial ) {\n\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-title-ip-partial\n\t\t\t\treturn mw.msg( msgKey );\n\t\t\t},\n\t\t\tcreateBody: function () {\n\t\t\t\tlet msgKey = '';\n\t\t\t\tif ( mw.user.isAnon() && this.anonOnly ) {\n\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body';\n\t\t\t\t\tif ( this.noCreateAccount ) {\n\t\t\t\t\t\tmsgKey += '-login';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmsgKey += '-login-createaccount';\n\t\t\t\t\t}\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey += '-partial';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( this.partial ) {\n\t\t\t\t\t\tmsgKey = 'mobile-frontend-editor-blocked-drawer-body-partial';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// The following messages can be passed here:\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-partial\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount\n\t\t\t\t// * mobile-frontend-editor-blocked-drawer-body-login-createaccount-partial\n\t\t\t\treturn msgKey ? mw.msg( msgKey ) : msgKey;\n\t\t\t},\n\t\t\tseeMoreLink: mw.msg( 'mobile-frontend-editor-blocked-drawer-body-link' ),\n\t\t\treasonHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-reason-header' ),\n\t\t\tcreatorHeader: function () {\n\t\t\t\t// The gender is the subject (the blockee) not the object (the blocker).\n\t\t\t\treturn mw.msg( 'mobile-frontend-editor-blocked-drawer-creator-header',\n\t\t\t\t\tmw.user.options.get( 'gender' ) );\n\t\t\t},\n\t\t\texpiryHeader: mw.msg( 'mobile-frontend-editor-blocked-drawer-expiry-header' )\n\t\t};\n\t}\n\t/**\n\t * Configure the call to action depending on the type of block.\n\t *\n\t * @return {Object} Configuration options\n\t */\n\tgetButtonConfig() {\n\t\tlet cta = true;\n\t\tconst config = {\n\t\t\t\tprogressive: true\n\t\t\t},\n\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\tif ( mw.user.isAnon() && this.options.anonOnly ) {\n\t\t\t// The user can avoid the block by logging in\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-login' );\n\t\t\tconfig.href = new mw.Title( 'Special:UserLogin' ).getUrl();\n\t\t} else if ( this.options.partial ) {\n\t\t\t// The user can avoid the block by editing a different page\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-randompage' );\n\t\t\tconfig.href = new mw.Title( 'Special:Random' ).getUrl();\n\t\t\tconfig.quiet = true;\n\t\t} else {\n\t\t\t// The user cannot avoid the block\n\t\t\tconfig.tagName = 'button';\n\t\t\tconfig.label = mw.msg( 'mobile-frontend-editor-blocked-drawer-action-ok' );\n\t\t\tconfig.additionalClassNames = 'cancel';\n\t\t\tcta = false;\n\t\t}\n\n\t\tif ( cta && mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaShown', 1 );\n\t\t\tconfig.events = {\n\t\t\t\tclick: function () {\n\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.ctaClicked', 1 );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn config;\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tpostRender() {\n\t\tconst drawer = this;\n\t\tthis.$el.find( '.block-message-buttons' ).prepend(\n\t\t\tnew Button( this.getButtonConfig() ).$el\n\t\t);\n\t\tthis.$el.find( '.block-message-icon' ).prepend(\n\t\t\t( new Icon( {\n\t\t\t\ticon: 'block-destructive',\n\t\t\t\tadditionalClassNames: 'mw-ui-icon-flush-top'\n\t\t\t} ) ).$el\n\t\t);\n\t\tthis.options.parsedReason.then( function ( htmlReason ) {\n\t\t\tdrawer.$el.find( '.block-message-reason div' ).html( htmlReason );\n\t\t} );\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tget template() {\n\t\treturn util.template( `\n<div class=\"block-message block-message-container\">\n  <div class=\"block-message-icon\"></div>\n  <div class=\"block-message-info\">\n    <div class=\"block-message-item block-message-title\">\n      <h5>{{ createTitle }}</h5>\n    </div>\n    <div class=\"block-message-data\">\n      <div class=\"block-message-item\">\n        <p>\n          {{ createBody }}\n          <a class =\"block-message-see-more\" href=\"#\">{{ seeMoreLink }}</a>\n        </p>\n      </div>\n      <div class=\"block-message-item block-message-creator\">\n        {{#creator.name}}\n          <p>\n            {{ creatorHeader }}\n            <strong>\n              {{#creator.url}}\n                <a href=\"{{ creator.url }}\">{{ creator.name }}</a>\n              {{/creator.url}}\n              {{^creator.url}}\n                {{ creator.name }}\n              {{/creator.url}}\n            </strong>\n          </p>\n        {{/creator.name}}\n      </div>\n      {{#duration}}\n        <div class=\"block-message-item\">\n          <p>\n            {{ expiryHeader }}\n            <strong>{{ duration }}</strong>\n          </p>\n        </div>\n      {{/duration}}\n      {{#blockId}}\n        <div class=\"block-message-item\">\n          <a href=\"{{#createDetailsAnchorHref}}{{ blockId }}{{/createDetailsAnchorHref}}\">\n            {{ createDetailsAnchorLabel }}\n          </a>\n        </div>\n      {{/blockId}}\n    </div>\n  </div>\n  {{#reason}}\n    <div class=\"block-message-item block-message-reason\">\n      <h5>{{ reasonHeader }}</h5>\n      <div><p>{{{ reason }}}</p></div>\n    </div>\n  {{/reason}}\n  <div class=\"block-message-buttons\">\n  </div>\n</div>` );\n\t}\n}\n\nmodule.exports = BlockMessageDetails;\n","var util = require( '../mobile.startup/util' ),\n\tactionParams = require( '../mobile.startup/actionParams' );\n\n/**\n * API that helps save and retrieve page content\n *\n * @class EditorGateway\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api an Api to use.\n * @param {string} options.title the title to edit\n * @param {string|null} options.sectionId the id of the section to operate edits on.\n * @param {number} [options.oldId] revision to operate on. If absent defaults to latest.\n * @param {boolean} [options.fromModified] whether the page was loaded in a modified state\n * @param {string} [options.preload] the name of a page to preload into the editor\n * @param {Array} [options.preloadparams] parameters to prefill into the preload content\n * @param {string} [options.editintro] edit intro to add to notices\n */\nfunction EditorGateway( options ) {\n\tthis.api = options.api;\n\tthis.title = options.title;\n\tthis.sectionId = options.sectionId;\n\tthis.oldId = options.oldId;\n\tthis.preload = options.preload;\n\tthis.preloadparams = options.preloadparams;\n\tthis.editintro = options.editintro;\n\tthis.content = undefined;\n\tthis.fromModified = options.fromModified;\n\tthis.hasChanged = options.fromModified;\n}\n\nEditorGateway.prototype = {\n\n\t/**\n\t * Get the block (if there is one) from the result.\n\t *\n\t * @memberof EditorGateway\n\t * @param {Object} pageObj Page object\n\t * @return {Object|null}\n\t */\n\tgetBlockInfo: function ( pageObj ) {\n\t\tvar blockedError;\n\n\t\tif ( pageObj.actions &&\n\t\t\tpageObj.actions.edit &&\n\t\t\tArray.isArray( pageObj.actions.edit )\n\t\t) {\n\t\t\tpageObj.actions.edit.some( function ( error ) {\n\t\t\t\tif ( [ 'blocked', 'autoblocked' ].indexOf( error.code ) !== -1 ) {\n\t\t\t\t\tblockedError = error;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t} );\n\n\t\t\tif ( blockedError && blockedError.data && blockedError.data.blockinfo ) {\n\t\t\t\treturn blockedError.data.blockinfo;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\t/**\n\t * Get the content of a page.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetContent: function () {\n\t\tvar options,\n\t\t\tself = this;\n\n\t\tfunction resolve() {\n\t\t\treturn util.Deferred().resolve( {\n\t\t\t\ttext: self.content || '',\n\t\t\t\tblockinfo: self.blockinfo,\n\t\t\t\tnotices: self.notices\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.content !== undefined ) {\n\t\t\treturn resolve();\n\t\t} else {\n\t\t\toptions = actionParams( {\n\t\t\t\tprop: [ 'revisions', 'info' ],\n\t\t\t\trvprop: [ 'content', 'timestamp' ],\n\t\t\t\tinprop: [ 'preloadcontent', 'editintro' ],\n\t\t\t\tinpreloadcustom: self.preload,\n\t\t\t\tinpreloadparams: self.preloadparams,\n\t\t\t\tineditintrocustom: self.editintro,\n\t\t\t\ttitles: self.title,\n\t\t\t\t// get block information for this user\n\t\t\t\tintestactions: 'edit',\n\t\t\t\t// …and test whether this edit will auto-create an account\n\t\t\t\tintestactionsautocreate: true,\n\t\t\t\tintestactionsdetail: 'full'\n\t\t\t} );\n\t\t\t// Load text of old revision if desired\n\t\t\tif ( this.oldId ) {\n\t\t\t\toptions.rvstartid = this.oldId;\n\t\t\t}\n\t\t\t// See T52136 - passing rvsection will fail with non wikitext\n\t\t\tif ( this.sectionId ) {\n\t\t\t\toptions.rvsection = this.sectionId;\n\t\t\t}\n\t\t\treturn this.api.get( options ).then( function ( resp ) {\n\t\t\t\tif ( resp.error ) {\n\t\t\t\t\treturn util.Deferred().reject( resp.error.code );\n\t\t\t\t}\n\n\t\t\t\tvar pageObj = resp.query.pages[0];\n\t\t\t\t// page might not exist and caller might not have known.\n\t\t\t\tif ( pageObj.missing !== undefined ) {\n\t\t\t\t\tif ( pageObj.preloadcontent ) {\n\t\t\t\t\t\tself.content = pageObj.preloadcontent.content;\n\t\t\t\t\t\tself.hasChanged = !pageObj.preloadisdefault;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.content = '';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar revision = pageObj.revisions[0];\n\t\t\t\t\tself.content = revision.content;\n\t\t\t\t\tself.timestamp = revision.timestamp;\n\t\t\t\t}\n\n\t\t\t\t// save content a second time to be able to check for changes\n\t\t\t\tself.originalContent = self.content;\n\t\t\t\tself.blockinfo = self.getBlockInfo( pageObj );\n\t\t\t\tself.wouldautocreate = pageObj.wouldautocreate && pageObj.wouldautocreate.edit;\n\t\t\t\tself.notices = pageObj.editintro;\n\n\t\t\t\treturn resolve();\n\t\t\t} );\n\t\t}\n\t},\n\n\t/**\n\t * Mark content as modified and set changes to be submitted when #save\n\t * is invoked.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {string} content New section content.\n\t */\n\tsetContent: function ( content ) {\n\t\tif ( this.originalContent !== content || this.fromModified ) {\n\t\t\tthis.hasChanged = true;\n\t\t} else {\n\t\t\tthis.hasChanged = false;\n\t\t}\n\t\tthis.content = content;\n\t},\n\n\t/**\n\t * Save the new content of the section, previously set using #setContent.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options Configuration options\n\t * @param {string} [options.summary] Optional summary for the edit.\n\t * @param {string} [options.captchaId] If CAPTCHA was requested, ID of the\n\t * captcha.\n\t * @param {string} [options.captchaWord] If CAPTCHA was requested, term\n\t * displayed in the CAPTCHA.\n\t * @return {jQuery.Deferred} On failure callback is passed an object with\n\t * `type` and `details` properties. `type` is a string describing the type\n\t * of error, `details` can be any object (usually error message).\n\t */\n\tsave: function ( options ) {\n\t\tvar self = this,\n\t\t\tresult = util.Deferred();\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Save content. Make an API request.\n\t\t *\n\t\t * @return {jQuery.Deferred}\n\t\t */\n\t\tfunction saveContent() {\n\t\t\tvar apiOptions = {\n\t\t\t\taction: 'edit',\n\t\t\t\terrorformat: 'html',\n\t\t\t\terrorlang: mw.config.get( 'wgUserLanguage' ),\n\t\t\t\terrorsuselocal: 1,\n\t\t\t\tformatversion: 2,\n\t\t\t\ttitle: self.title,\n\t\t\t\tsummary: options.summary,\n\t\t\t\tcaptchaid: options.captchaId,\n\t\t\t\tcaptchaword: options.captchaWord,\n\t\t\t\tbasetimestamp: self.timestamp,\n\t\t\t\tstarttimestamp: self.timestamp\n\t\t\t};\n\n\t\t\tif ( self.content !== undefined ) {\n\t\t\t\tapiOptions.text = self.content;\n\t\t\t}\n\n\t\t\tif ( self.sectionId ) {\n\t\t\t\tapiOptions.section = self.sectionId;\n\t\t\t}\n\n\t\t\t// TODO: When `wouldautocreate` is true, we should also set up:\n\t\t\t// - apiOptions.returntofragment to be the URL fragment to link to the section\n\t\t\t//   (but we don't know what it is; `sectionId` here is the number)\n\t\t\t// - apiOptions.returntoquery to be 'redirect=no' if we're saving a redirect\n\t\t\t//   (but we have can't figure that out, unless we parse the wikitext)\n\n\t\t\tself.api.postWithToken( 'csrf', apiOptions ).then( function ( data ) {\n\t\t\t\tif ( data && data.edit && data.edit.result === 'Success' ) {\n\t\t\t\t\tself.hasChanged = false;\n\t\t\t\t\tresult.resolve( data.edit.newrevid, data.edit.tempusercreatedredirect );\n\t\t\t\t} else {\n\t\t\t\t\tresult.reject( data );\n\t\t\t\t}\n\t\t\t}, function ( code, data ) {\n\t\t\t\tresult.reject( data );\n\t\t\t} );\n\t\t\treturn result;\n\t\t}\n\n\t\treturn saveContent();\n\t},\n\n\t/**\n\t * Abort any pending previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t */\n\tabortPreview: function () {\n\t\tif ( this._pending ) {\n\t\t\tthis._pending.abort();\n\t\t}\n\t},\n\n\t/**\n\t * Get page preview from the API and abort any existing previews.\n\t *\n\t * @memberof EditorGateway\n\t * @instance\n\t * @param {Object} options API query parameters\n\t * @return {jQuery.Deferred}\n\t */\n\tgetPreview: function ( options ) {\n\t\tvar\n\t\t\tsectionLine = '',\n\t\t\tsectionId = '',\n\t\t\tself = this;\n\n\t\tutil.extend( options, {\n\t\t\taction: 'parse',\n\t\t\t// Enable section preview mode to avoid errors (T51218)\n\t\t\tsectionpreview: true,\n\t\t\t// Hide section edit links\n\t\t\tdisableeditsection: true,\n\t\t\t// needed for pre-save transform to work (T55692)\n\t\t\tpst: true,\n\t\t\t// Output mobile HTML (T56243)\n\t\t\tmobileformat: true,\n\t\t\tuseskin: mw.config.get( 'skin' ),\n\t\t\tdisabletoc: true,\n\t\t\ttitle: this.title,\n\t\t\tprop: [ 'text', 'sections' ]\n\t\t} );\n\n\t\tthis.abortPreview();\n\t\t// Acquire a temporary user username before previewing, so that signatures and\n\t\t// user-related magic words display the temp user instead of IP user in the preview. (T331397)\n\t\tvar promise = mw.user.acquireTempUserName().then( function () {\n\t\t\tself._pending = self.api.post( options );\n\t\t\treturn self._pending;\n\t\t} );\n\n\t\treturn promise.then( function ( resp ) {\n\t\t\tif ( resp && resp.parse && resp.parse.text ) {\n\t\t\t\t// When editing section 0 or the whole page, there is no section name, so skip\n\t\t\t\tif ( self.sectionId && self.sectionId !== '0' &&\n\t\t\t\t\tresp.parse.sections !== undefined &&\n\t\t\t\t\tresp.parse.sections[0] !== undefined\n\t\t\t\t) {\n\t\t\t\t\tif ( resp.parse.sections[0].anchor !== undefined ) {\n\t\t\t\t\t\tsectionId = resp.parse.sections[0].anchor;\n\t\t\t\t\t}\n\t\t\t\t\tif ( resp.parse.sections[0].line !== undefined ) {\n\t\t\t\t\t\tsectionLine = resp.parse.sections[0].line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\ttext: resp.parse.text['*'],\n\t\t\t\t\tid: sectionId,\n\t\t\t\t\tline: sectionLine\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn util.Deferred().reject();\n\t\t\t}\n\t\t} ).promise( {\n\t\t\tabort: function () { self._pending.abort(); }\n\t\t} );\n\t}\n};\n\nmodule.exports = EditorGateway;\n","/* global $ */\nvar Overlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tparseBlockInfo = require( './parseBlockInfo' ),\n\theaders = require( '../mobile.startup/headers' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tButton = require( '../mobile.startup/Button' ),\n\tIconButton = require( '../mobile.startup/IconButton' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tblockMessageDrawer = require( './blockMessageDrawer' ),\n\tMessageBox = require( '../mobile.startup/MessageBox' ),\n\tmwUser = mw.user;\n\n/**\n * 'Edit' button\n *\n * @param {OO.ui.ToolGroup} toolGroup\n * @param {Object} config\n */\nfunction EditVeTool( toolGroup, config ) {\n\tconfig = config || {};\n\tconfig.classes = [ 'visual-editor' ];\n\tEditVeTool.super.call( this, toolGroup, config );\n}\nOO.inheritClass( EditVeTool, OO.ui.Tool );\n\nEditVeTool.static.name = 'editVe';\nEditVeTool.static.icon = 'edit';\nEditVeTool.static.group = 'editorSwitcher';\nEditVeTool.static.title = mw.msg( 'mobile-frontend-editor-switch-visual-editor' );\n/**\n * click handler\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onSelect = function () {\n\t// will be overridden later\n};\n/**\n * Toolbar update state handler.\n *\n * @memberof EditVeTool\n * @instance\n */\nEditVeTool.prototype.onUpdateState = function () {\n\t// do nothing\n};\n\n/**\n * Base class for SourceEditorOverlay and VisualEditorOverlay\n *\n * @class EditorOverlayBase\n * @extends Overlay\n * @uses IconButton\n * @uses user\n * @param {Object} params Configuration options\n * @param {boolean} params.editSwitcher whether possible to switch mode in header\n * @param {boolean} params.hasToolbar whether the editor has a toolbar\n */\nfunction EditorOverlayBase( params ) {\n\tvar\n\t\toptions = util.extend(\n\t\t\ttrue,\n\t\t\t{\n\t\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\t\tclassName: 'overlay editor-overlay',\n\t\t\t\tisBorderBox: false\n\t\t\t},\n\t\t\tparams,\n\t\t\t{\n\t\t\t\tevents: util.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\t'click .back': 'onClickBack',\n\t\t\t\t\t\t'click .continue': 'onClickContinue',\n\t\t\t\t\t\t'click .submit': 'onClickSubmit',\n\t\t\t\t\t\t'click .anonymous': 'onClickAnonymous'\n\t\t\t\t\t},\n\t\t\t\t\tparams.events\n\t\t\t\t)\n\t\t\t}\n\t\t);\n\n\tif ( options.isNewPage ) {\n\t\toptions.placeholder = mw.msg( 'mobile-frontend-editor-placeholder-new-page', mwUser );\n\t}\n\t// change the message to request a summary when not in article namespace\n\tif ( mw.config.get( 'wgNamespaceNumber' ) !== 0 ) {\n\t\toptions.summaryRequestMsg = mw.msg( 'mobile-frontend-editor-summary' );\n\t}\n\tthis.isNewPage = options.isNewPage;\n\tthis.sectionId = options.sectionId;\n\tthis.overlayManager = options.overlayManager;\n\n\tOverlay.call( this, options );\n}\n\nmfExtend( EditorOverlayBase, Overlay, {\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {OverlayManager} defaults.overlayManager instance\n\t * @property {mw.Api} defaults.api to interact with\n\t * @property {boolean} defaults.hasToolbar Whether the editor has a toolbar or not. When\n\t *  disabled a header will be show instead.\n\t * @property {string} defaults.continueMsg Caption for the next button on edit form\n\t * which takes you to the screen that shows a preview and license information.\n\t * @property {string} defaults.closeMsg Caption for a button that takes you back to editing\n\t * from edit preview screen.\n\t * @property {string} defaults.summaryRequestMsg Header above edit summary input field\n\t * asking the user to summarize the changes they made to the page.\n\t * @property {string} defaults.summaryMsg A placeholder with examples for the summary input\n\t * field asking user what they changed.\n\t * @property {string} defaults.placeholder Placeholder text for empty sections.\n\t * @property {string} defaults.captchaMsg Placeholder for captcha input field.\n\t * @property {string} defaults.captchaTryAgainMsg A message shown when user enters\n\t * wrong CAPTCHA and a new one is displayed.\n\t * @property {string} defaults.switchMsg Label for button that allows the user\n\t * to switch between two different editing interfaces.\n\t * @property {string} defaults.licenseMsg Text and link of the license,\n\t * under which this contribution will be released to inform the user.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\thasToolbar: false,\n\t\tcontinueMsg: mw.msg( 'mobile-frontend-editor-continue' ),\n\t\tcloseMsg: mw.msg( 'mobile-frontend-editor-keep-editing' ),\n\t\tsummaryRequestMsg: mw.msg( 'mobile-frontend-editor-summary-request' ),\n\t\tsummaryMsg: mw.msg( 'mobile-frontend-editor-summary-placeholder' ),\n\t\tplaceholder: mw.msg( 'mobile-frontend-editor-placeholder' ),\n\t\tcaptchaMsg: mw.msg( 'mobile-frontend-account-create-captcha-placeholder' ),\n\t\tcaptchaTryAgainMsg: mw.msg( 'mobile-frontend-editor-captcha-try-again' ),\n\t\tswitchMsg: mw.msg( 'mobile-frontend-editor-switch-editor' ),\n\t\tconfirmMsg: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\tlicenseMsg: undefined\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"overlay-header-container header-container position-fixed\"></div>\n\n<div class=\"overlay-content\">\n\t<div class=\"panels\">\n\t\t<div class=\"save-panel panel hideable hidden\">\n\t\t\t<div id=\"error-notice-container\"></div>\n\t\t\t<h2 class=\"summary-request\">{{{summaryRequestMsg}}}</h2>\n\t\t\t<textarea rows=\"2\" class=\"mw-ui-input summary\" placeholder=\"{{summaryMsg}}\"></textarea>\n\t\t\t{{#licenseMsg}}<div class=\"license\">{{{licenseMsg}}}</div>{{/licenseMsg}}\n\t\t</div>\n\t\t<div class=\"captcha-panel panel hideable hidden\">\n\t\t\t<div class=\"captcha-box\">\n\t\t\t\t<img id=\"image\" src=\"\">\n\t\t\t\t<div id=\"question\"></div>\n\t\t\t\t<input class=\"captcha-word mw-ui-input\" placeholder=\"{{captchaMsg}}\" />\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t{{>content}}\n</div>\n<div class=\"overlay-footer-container position-fixed\">\n\t{{>footer}}\n</div>\n\t` ),\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tsectionId: '',\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:EditAttemptStep\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlog: function ( data ) {\n\t\tmw.track( 'editAttemptStep', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\t/**\n\t * Logs an event to http://meta.wikimedia.org/wiki/Schema:VisualEditorFeatureUse\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data\n\t */\n\tlogFeatureUse: function ( data ) {\n\t\tmw.track( 'visualEditorFeatureUse', util.extend( data, {\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\teditor_interface: this.editor\n\t\t} ) );\n\t},\n\n\t/**\n\t * If this is a new article, require confirmation before saving.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {boolean} The user confirmed saving\n\t */\n\tconfirmSave: function () {\n\t\tif ( this.isNewPage &&\n\t\t\t// TODO: Replace with an OOUI dialog\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\t!window.confirm( mw.msg( 'mobile-frontend-editor-new-page-confirm', mwUser ) )\n\t\t) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\t/**\n\t * Executed when page save is complete. Updates urls and shows toast message.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null edit.\n\t * @param {string} [redirectUrl] URL to redirect to, if different than the current URL.\n\t */\n\tonSaveComplete: function ( newRevId, redirectUrl ) {\n\t\tvar\n\t\t\tself = this;\n\n\t\tthis.saved = true;\n\n\t\tif ( newRevId ) {\n\t\t\tvar action;\n\t\t\tif ( self.isNewPage ) {\n\t\t\t\taction = 'created';\n\t\t\t} else if ( self.options.oldId ) {\n\t\t\t\taction = 'restored';\n\t\t\t} else {\n\t\t\t\taction = 'saved';\n\t\t\t}\n\t\t\tself.showSaveCompleteMsg( action );\n\t\t}\n\n\t\t// Ensure we don't lose this event when logging\n\t\tthis.log( {\n\t\t\taction: 'saveSuccess',\n\t\t\t// eslint-disable-next-line camelcase\n\t\t\trevision_id: newRevId\n\t\t} );\n\t\tsetTimeout( function () {\n\t\t\t// Wait for any other teardown navigation to happen (e.g. router.back())\n\t\t\t// before setting our final location.\n\t\t\tif ( redirectUrl ) {\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.href = redirectUrl;\n\t\t\t} else if ( self.sectionId ) {\n\t\t\t\t// Ideally we'd want to do this via replaceState (see T189173)\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#' + self.sectionId;\n\t\t\t} else {\n\t\t\t\t// Cancel the hash fragment\n\t\t\t\t// otherwise clicking back after a save will take you back to the editor.\n\t\t\t\t// We avoid calling the hide method of the overlay here as this can be asynchronous\n\t\t\t\t// and may conflict with the window.reload call below.\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.hash = '#';\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Show a save-complete message to the user\n\t *\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {string} action One of 'saved', 'created', 'restored'\n\t */\n\tshowSaveCompleteMsg: function ( action ) {\n\t\tmw.loader.require( 'mediawiki.action.view.postEdit' ).fireHook( action );\n\t},\n\t/**\n\t * Executed when page save fails. Handles logging the error. Subclasses\n\t * should display error messages as appropriate.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} data API response\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar code = data && data.errors && data.errors[0] && data.errors[0].code,\n\t\t\t// Compare to ve.init.mw.ArticleTargetEvents.js in VisualEditor.\n\t\t\ttypeMap = {\n\t\t\t\tbadtoken: 'userBadToken',\n\t\t\t\tassertanonfailed: 'userNewUser',\n\t\t\t\tassertuserfailed: 'userNewUser',\n\t\t\t\tassertnameduserfailed: 'userNewUser',\n\t\t\t\t'abusefilter-disallowed': 'extensionAbuseFilter',\n\t\t\t\t'abusefilter-warning': 'extensionAbuseFilter',\n\t\t\t\tcaptcha: 'extensionCaptcha',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// This is blocked on T254649\n\t\t\t\tspamblacklist: 'extensionSpamBlacklist',\n\t\t\t\t// FIXME: This language is non-inclusive and we would love to change it,\n\t\t\t\t// but this relates to an error code provided by software.\n\t\t\t\t// Removal of this line is blocked on T254650.\n\t\t\t\t'titleblacklist-forbidden': 'extensionTitleBlacklist',\n\t\t\t\tpagedeleted: 'editPageDeleted',\n\t\t\t\teditconflict: 'editConflict'\n\t\t\t};\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tcode = 'captcha';\n\t\t}\n\n\t\tthis.log( {\n\t\t\taction: 'saveFailure',\n\t\t\tmessage: code,\n\t\t\ttype: typeMap[code] || 'responseUnknown'\n\t\t} );\n\t},\n\t/**\n\t * Report load errors back to the user. Silently record the error using EventLogging.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {string} text Text (HTML) of message to display to user\n\t */\n\treportError: function ( text ) {\n\t\tvar errorNotice = new MessageBox( {\n\t\t\tclassName: 'mw-message-box-error',\n\t\t\tmsg: text,\n\t\t\theading: mw.msg( 'mobile-frontend-editor-error' )\n\t\t} );\n\t\tthis.$errorNoticeContainer.html( errorNotice.$el );\n\t},\n\thideErrorNotice: function () {\n\t\tthis.$errorNoticeContainer.empty();\n\t},\n\t/**\n\t * Prepares the penultimate screen before saving.\n\t * Expects to be overridden by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\tthis.hideErrorNotice();\n\t\tthis.log( {\n\t\t\taction: 'saveIntent'\n\t\t} );\n\t\t// Scroll to the top of the page, so that the summary input is visible\n\t\t// (even if overlay was scrolled down when editing) and weird iOS header\n\t\t// problems are avoided (header position not updating to the top of the\n\t\t// screen, instead staying lower until a subsequent scroll event).\n\t\twindow.scrollTo( 0, 1 );\n\t},\n\t/**\n\t * Executed when the editor clicks the save button. Expects to be overridden by child\n\t * class. Checks if the save needs to be confirmed.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tthis.confirmAborted = false;\n\t\tthis.hideErrorNotice();\n\t\t// Ask for confirmation in some cases\n\t\tif ( !this.confirmSave() ) {\n\t\t\tthis.confirmAborted = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.log( {\n\t\t\taction: 'saveAttempt'\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tconst options = this.options;\n\n\t\tthis.options.headers = [\n\t\t\theaders.formHeader(\n\t\t\t\tutil.template( `\n{{^hasToolbar}}\n<div class=\"overlay-title\">\n\t<h2>{{{editingMsg}}}</h2>\n</div>\n{{/hasToolbar}}\n{{#hasToolbar}}<div class=\"toolbar\"></div>{{/hasToolbar}}\n{{#editSwitcher}}\n\t<div class=\"switcher-container\">\n\t</div>\n{{/editSwitcher}}\n\t\t\t\t` ).render( {\n\t\t\t\t\thasToolbar: options.hasToolbar,\n\t\t\t\t\teditSwitcher: options.editSwitcher,\n\t\t\t\t\teditingMsg: options.editingMsg\n\t\t\t\t} ),\n\t\t\t\toptions.readOnly ? [] : [\n\t\t\t\t\tnew IconButton( {\n\t\t\t\t\t\ttagName: 'button',\n\t\t\t\t\t\taction: 'progressive',\n\t\t\t\t\t\tweight: 'primary',\n\t\t\t\t\t\ticon: 'next-invert',\n\t\t\t\t\t\tadditionalClassNames: 'continue',\n\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\ttitle: options.continueMsg\n\t\t\t\t\t} )\n\t\t\t\t],\n\t\t\t\ticons.cancel(),\n\t\t\t\t'initial-header'\n\t\t\t),\n\t\t\theaders.saveHeader( options.previewingMsg, 'save-header hidden' ),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-editor-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$errorNoticeContainer = this.$el.find( '#error-notice-container' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\tshow: function () {\n\t\tvar self = this;\n\t\tthis.allowCloseWindow = mw.confirmCloseWindow( {\n\t\t\t// Returns true if content has changed\n\t\t\ttest: function () {\n\t\t\t\t// Check if content has changed\n\t\t\t\treturn self.hasChanged();\n\t\t\t},\n\n\t\t\t// Message to show the user, if content has changed\n\t\t\tmessage: mw.msg( 'mobile-frontend-editor-cancel-confirm' ),\n\t\t\t// Event namespace\n\t\t\tnamespace: 'editwarning'\n\t\t} );\n\n\t\tthis.saved = false;\n\t\tOverlay.prototype.show.call( this );\n\n\t\t// Inform other interested code that the editor has loaded\n\t\tmw.hook( 'mobileFrontend.editorOpened' ).fire( this.editor );\n\t},\n\t/**\n\t * Back button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickBack: function () {},\n\t/**\n\t * Submit button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickSubmit: function () {\n\t\tthis.onSaveBegin();\n\t},\n\t/**\n\t * Continue button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickContinue: function () {\n\t\tthis.onStageChanges();\n\t},\n\t/**\n\t * \"Edit without logging in\" button click handler\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\tonClickAnonymous: function () {},\n\t/**\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Function} exit Callback to exit the overlay\n\t * @param {Function} cancel Callback to cancel exiting the overlay\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar self = this;\n\t\tif ( this.hasChanged() && !this.switching ) {\n\t\t\tif ( !this.windowManager ) {\n\t\t\t\tthis.windowManager = OO.ui.getWindowManager();\n\t\t\t\tthis.windowManager.addWindows( [ new mw.widgets.AbandonEditDialog() ] );\n\t\t\t}\n\t\t\tthis.windowManager.openWindow( 'abandonedit' )\n\t\t\t\t.closed.then( function ( data ) {\n\t\t\t\t\tif ( data && data.action === 'discard' ) {\n\t\t\t\t\t\t// log abandonment\n\t\t\t\t\t\tself.log( {\n\t\t\t\t\t\t\taction: 'abort',\n\t\t\t\t\t\t\tmechanism: 'cancel',\n\t\t\t\t\t\t\ttype: 'abandon'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tself.onExit();\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\tcancel();\n\t\t\treturn;\n\t\t}\n\t\tif ( !this.switching && !this.saved ) {\n\t\t\t// log leaving without changes\n\t\t\tthis.log( {\n\t\t\t\taction: 'abort',\n\t\t\t\tmechanism: 'cancel',\n\t\t\t\t// if this is VE, hasChanged will be false because the Surface has\n\t\t\t\t// already been destroyed (which is good because it stops us\n\t\t\t\t// double-showing the abandon changes dialog above)... but we can\n\t\t\t\t// test whether there *were* changes for logging purposes by\n\t\t\t\t// examining the target:\n\t\t\t\ttype: ( this.target && this.target.edited ) ? 'abandon' : 'nochange'\n\t\t\t} );\n\t\t}\n\t\tthis.onExit();\n\t\texit();\n\t\tif ( mw.config.get( 'wgAction' ) === 'edit' ) {\n\t\t\t// We got into the overlay via directly visiting an action=edit\n\t\t\t// URL, which has been taken over. As such, depending on\n\t\t\t// how we got here, the normal overlay process isn't going to\n\t\t\t// produce the correct result.\n\t\t\tsetTimeout( function () {\n\t\t\t\t// This needs to happen after the overlay-hide has completed\n\t\t\t\t// so we have access to the \"real\" URL, and `exit`\n\t\t\t\t// unfortunately doesn't expose a promise for this. There's\n\t\t\t\t// several setTimeouts within the hide, so we're just going\n\t\t\t\t// to use a long-enough setTimeout of our own to skip those.\n\t\t\t\tif ( !mw.util.getParamValue( 'veaction' ) && !mw.util.getParamValue( 'action' ) ) {\n\t\t\t\t\t// Use reload if possible, to emulate having gone back\n\t\t\t\t\tlocation.reload();\n\t\t\t\t} else {\n\t\t\t\t\tlocation.href = mw.util.getUrl();\n\t\t\t\t}\n\t\t\t}, 100 );\n\t\t}\n\t},\n\tonExit: function () {\n\t\t// May not be set if overlay has not been previously shown\n\t\tif ( this.allowCloseWindow ) {\n\t\t\tthis.allowCloseWindow.release();\n\t\t}\n\t\tmw.hook( 'mobileFrontend.editorClosed' ).fire();\n\t},\n\t/**\n\t * Sets additional values used for anonymous editing warning.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} options\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonWarning: function ( options ) {\n\t\tvar $actions = $( '<div>' ).addClass( 'actions' ),\n\t\t\t// Use MediaWiki ResourceLoader require(), not Webpack require()\n\t\t\tcontLangMessages = (\n\t\t\t\t// eslint-disable-next-line camelcase\n\t\t\t\ttypeof __non_webpack_require__ !== 'undefined' ?\n\t\t\t\t\t// eslint-disable-next-line no-undef\n\t\t\t\t\t__non_webpack_require__( './contLangMessages.json' ) :\n\t\t\t\t\t{}\n\t\t\t),\n\t\t\tmsg = this.gateway.wouldautocreate ?\n\t\t\t\t'mobile-frontend-editor-autocreatewarning' :\n\t\t\t\t'mobile-frontend-editor-anonwarning',\n\t\t\t$anonWarning = $( '<div>' ).addClass( 'anonwarning content' ).append(\n\t\t\t\tnew MessageBox( {\n\t\t\t\t\tclassName: 'mw-message-box-notice anon-msg',\n\t\t\t\t\t// eslint-disable-next-line mediawiki/msg-doc\n\t\t\t\t\tmsg: mw.message( msg, contLangMessages[ 'tempuser-helppage' ] ).parse()\n\t\t\t\t} ).$el,\n\t\t\t\t$actions\n\t\t\t),\n\t\t\tparams = util.extend( {\n\t\t\t\treturnto: options.returnTo || (\n\t\t\t\t\t// use wgPageName as this includes the namespace if outside Main\n\t\t\t\t\tmw.config.get( 'wgPageName' ) + '#/editor/' + ( options.sectionId || 'all' )\n\t\t\t\t),\n\t\t\t\twarning: 'mobile-frontend-edit-login-action'\n\t\t\t}, options.queryParams ),\n\t\t\tsignupParams = util.extend( {\n\t\t\t\ttype: 'signup',\n\t\t\t\twarning: 'mobile-frontend-edit-signup-action'\n\t\t\t}, options.signupQueryParams ),\n\t\t\tanonymousEditorActions = [\n\t\t\t\tnew Button( {\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-editor-anon' ),\n\t\t\t\t\tblock: true,\n\t\t\t\t\tadditionalClassNames: 'anonymous progressive',\n\t\t\t\t\tprogressive: true\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', params ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-login' )\n\t\t\t\t} ),\n\t\t\t\tnew Button( {\n\t\t\t\t\tblock: true,\n\t\t\t\t\thref: mw.util.getUrl( 'Special:UserLogin', util.extend( params, signupParams ) ),\n\t\t\t\t\tlabel: mw.msg( 'mobile-frontend-watchlist-cta-button-signup' )\n\t\t\t\t} )\n\t\t\t];\n\n\t\t$actions.append(\n\t\t\tanonymousEditorActions.map( function ( action ) {\n\t\t\t\treturn action.$el;\n\t\t\t} )\n\t\t);\n\n\t\treturn $anonWarning;\n\t},\n\t/**\n\t * Creates and returns a copy of the anon talk message warning\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Element}\n\t */\n\tcreateAnonTalkWarning: function () {\n\t\treturn $( '.minerva-anon-talk-message' ).clone();\n\t},\n\t/**\n\t * Get an options object not containing any defaults or editor\n\t * specific options, so that it can be used to construct a\n\t * different editor for switching.\n\t *\n\t * @return {Object} Options\n\t */\n\tgetOptionsForSwitch: function () {\n\t\t// Only preserve options that would be passed in editor.js#setupEditor\n\t\t// and skip over defaults.\n\t\treturn {\n\t\t\tswitched: true,\n\t\t\toverlayManager: this.options.overlayManager,\n\t\t\tcurrentPageHTMLParser: this.options.currentPageHTMLParser,\n\t\t\tfakeScroll: this.options.fakeScroll,\n\t\t\tapi: this.options.api,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\ttitle: this.options.title,\n\t\t\ttitleObj: this.options.titleObj,\n\t\t\tisAnon: this.options.isAnon,\n\t\t\tisNewPage: this.options.isNewPage,\n\t\t\toldId: this.options.oldId,\n\t\t\tcontentLang: this.options.contentLang,\n\t\t\tcontentDir: this.options.contentDir,\n\t\t\tsectionId: this.options.sectionId\n\t\t};\n\t},\n\n\t/**\n\t * Checks whether the state of the thing being edited as changed. Expects to be\n\t * implemented by child class.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t */\n\thasChanged: function () {},\n\t/**\n\t * Get a promise that is resolved when the editor data has loaded,\n\t * or rejected when we're refusing to load the editor because the user is blocked.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @return {jQuery.Promise}\n\t */\n\tgetLoadingPromise: function () {\n\t\treturn this.dataPromise.then( function ( result ) {\n\t\t\t// check if user is blocked\n\t\t\tif ( result && result.blockinfo ) {\n\t\t\t\tvar block = parseBlockInfo( result.blockinfo ),\n\t\t\t\t\tmessage = blockMessageDrawer( block );\n\t\t\t\treturn util.Deferred().reject( message );\n\t\t\t}\n\t\t\treturn result;\n\t\t} );\n\t},\n\tshowEditNotices: function () {\n\t\tif ( !mw.config.get( 'wgMFShowEditNotices' ) || mw.config.get( 'wgMFEditNoticesFeatureConflict' ) ) {\n\t\t\treturn;\n\t\t}\n\t\tthis.getLoadingPromise().then( function ( data ) {\n\t\t\tif ( data.notices ) {\n\t\t\t\tvar editNotices = Object.keys( data.notices ).filter( function ( key ) {\n\t\t\t\t\tif ( key.indexOf( 'editnotice' ) !== 0 ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// The contents of an edit notice is unlikely to change in the 24 hour\n\t\t\t\t\t// expiry window, so just record that a notice with this key has been shown.\n\t\t\t\t\t// If a cheap hashing function was available in core (or the API provided\n\t\t\t\t\t// as hash) it could be used here instead.\n\t\t\t\t\tvar storageKey = 'mf-editnotices/' + mw.config.get( 'wgPageName' ) + '#' + key;\n\t\t\t\t\tif ( mw.storage.get( storageKey ) ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tmw.storage.set( storageKey, '1', 24 * 60 * 60 );\n\t\t\t\t\treturn true;\n\t\t\t\t} );\n\n\t\t\t\tif ( editNotices.length ) {\n\t\t\t\t\tmw.loader.using( 'oojs-ui-windows' ).then( function () {\n\t\t\t\t\t\tvar $container = $( '<div>' ).addClass( 'editor-overlay-editNotices' );\n\t\t\t\t\t\teditNotices.forEach( function ( key ) {\n\t\t\t\t\t\t\tvar $notice = $( '<div>' ).append( data.notices[ key ] );\n\t\t\t\t\t\t\t$notice.addClass( 'editor-overlay-editNotice' );\n\t\t\t\t\t\t\t$container.append( $notice );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tOO.ui.alert( $container );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Handles a failed save due to a CAPTCHA provided by ConfirmEdit extension.\n\t *\n\t * @memberof EditorOverlayBase\n\t * @instance\n\t * @param {Object} details Details returned from the api.\n\t */\n\thandleCaptcha: function ( details ) {\n\t\tvar self = this,\n\t\t\t$input = this.$el.find( '.captcha-word' );\n\n\t\tif ( this.captchaShown ) {\n\t\t\t$input.val( '' );\n\t\t\t$input.attr( 'placeholder', this.options.captchaTryAgainMsg );\n\t\t\tsetTimeout( function () {\n\t\t\t\t$input.attr( 'placeholder', self.options.captchaMsg );\n\t\t\t}, 2000 );\n\t\t}\n\n\t\t// handle different mime types different\n\t\tif ( details.mime.indexOf( 'image/' ) === 0 ) {\n\t\t\t// image based CAPTCHA's like provided by FancyCaptcha, ReCaptcha or similar\n\t\t\tthis.$el.find( '.captcha-panel#question' ).detach();\n\t\t\tthis.$el.find( '.captcha-panel img' ).attr( 'src', details.url );\n\t\t} else {\n\t\t\t// not image based CAPTCHA.\n\t\t\tthis.$el.find( '.captcha-panel #image' ).detach();\n\t\t\tif ( details.mime.indexOf( 'text/html' ) === 0 ) {\n\t\t\t\t// handle mime type of HTML as HTML content (display as-is).\n\t\t\t\t// QuestyCaptcha now have default MIME type \"text/html\": see T147606\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).html( details.question );\n\t\t\t} else {\n\t\t\t\t// handle mime types\n\t\t\t\t// (other than image based ones and HTML based ones)\n\t\t\t\t// as plain text by default.\n\t\t\t\t// e.g. MathCaptcha (solve a math formula) or\n\t\t\t\t// SimpleCaptcha (simple math formula)\n\t\t\t\tthis.$el.find( '.captcha-panel #question' ).text( details.question );\n\t\t\t}\n\t\t}\n\n\t\tthis.showHidden( '.save-header, .captcha-panel' );\n\t\tthis.captchaShown = true;\n\t}\n} );\n\nmodule.exports = EditorOverlayBase;\n","var EditorOverlayBase = require( './EditorOverlayBase' ),\n\tutil = require( '../mobile.startup/util' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tSection = require( '../mobile.startup/Section' ),\n\tsaveFailureMessage = require( './saveFailureMessage' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' ),\n\tcurrentPage = require( '../mobile.startup/currentPage' );\n\n/**\n * Overlay that shows an editor\n *\n * @class SourceEditorOverlay\n * @uses Section\n * @uses EditorGateway\n * @uses VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n */\nfunction SourceEditorOverlay( options, dataPromise ) {\n\tthis.isFirefox = /firefox/i.test( window.navigator.userAgent );\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId,\n\t\tfromModified: !!dataPromise,\n\t\tpreload: options.preload,\n\t\tpreloadparams: options.preloadparams,\n\t\teditintro: options.editintro\n\t} );\n\tthis.readOnly = !!options.oldId; // If old revision, readOnly mode\n\tthis.dataPromise = dataPromise || this.gateway.getContent();\n\tthis.currentPage = currentPage();\n\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\toptions.editSwitcher = true;\n\t}\n\tif ( this.readOnly ) {\n\t\toptions.readOnly = true;\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-viewing-source-page', options.title );\n\t} else {\n\t\toptions.editingMsg = mw.msg( 'mobile-frontend-editor-editing-page', options.title );\n\t}\n\toptions.previewingMsg = mw.msg( 'mobile-frontend-editor-previewing-page', options.title );\n\tEditorOverlayBase.call(\n\t\tthis,\n\t\tutil.extend( true,\n\t\t\t{ events: { 'input .wikitext-editor': 'onInputWikitextEditor' } },\n\t\t\toptions\n\t\t)\n\t);\n}\n\nmfExtend( SourceEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div lang=\"{{contentLang}}\" dir=\"{{contentDir}}\" class=\"editor-container content\">\n\t<textarea class=\"wikitext-editor\" id=\"wikitext-editor\" cols=\"40\" rows=\"10\" placeholder=\"{{placeholder}}\"></textarea>\n\t<div class=\"preview\"></div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\teditor: 'wikitext',\n\t/**\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tsectionLine: '',\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\t\t// Ensure we do this after showing the overlay, otherwise it doesn't work.\n\t\tthis._resizeEditor();\n\t},\n\t/**\n\t * Wikitext Editor input handler\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonInputWikitextEditor: function () {\n\t\tthis.gateway.setContent( this.$el.find( '.wikitext-editor' ).val() );\n\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis._hidePreview();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar self = this;\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\t\tmw.loader.using( 'ext.visualEditor.switching' ).then( function () {\n\t\t\t\tvar switchToolbar,\n\t\t\t\t\ttoolFactory = new OO.ui.ToolFactory(),\n\t\t\t\t\ttoolGroupFactory = new OO.ui.ToolGroupFactory();\n\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeVisualTool );\n\t\t\t\ttoolFactory.register( mw.libs.ve.MWEditModeSourceTool );\n\t\t\t\tswitchToolbar = new OO.ui.Toolbar( toolFactory, toolGroupFactory, {\n\t\t\t\t\tclasses: [ 'editor-switcher' ]\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.on( 'switchEditor', function ( mode ) {\n\t\t\t\t\tif ( mode === 'visual' ) {\n\t\t\t\t\t\tif ( !self.gateway.hasChanged ) {\n\t\t\t\t\t\t\tself._switchToVisualEditor();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Pass wikitext if there are changes.\n\t\t\t\t\t\t\tself._switchToVisualEditor( self.gateway.content );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tswitchToolbar.setup( [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'editMode',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ticon: 'edit',\n\t\t\t\t\t\ttitle: mw.msg( 'visualeditor-mweditmode-tooltip' ),\n\t\t\t\t\t\tinclude: [ 'editModeVisual', 'editModeSource' ]\n\t\t\t\t\t}\n\t\t\t\t] );\n\n\t\t\t\tself.$el.find( '.switcher-container' ).html( switchToolbar.$element );\n\t\t\t\tswitchToolbar.emit( 'updateState' );\n\t\t\t} );\n\t\t}\n\n\t\tEditorOverlayBase.prototype.postRender.apply( this );\n\n\t\t// This spinner is still used when displaying save/preview panel\n\t\tthis.$el.find( '.overlay-content' ).append( icons.spinner().$el );\n\t\tthis.hideSpinner();\n\n\t\tthis.$preview = this.$el.find( '.preview' );\n\t\tthis.$content = this.$el.find( '.wikitext-editor' );\n\t\t// The following classes can be used here:\n\t\t// * mw-editfont-monospace\n\t\t// * mw-editfont-sans-serif\n\t\t// * mw-editfont-serif\n\t\tthis.$content.addClass( 'mw-editfont-' + mw.user.options.get( 'editfont' ) );\n\n\t\t// make license links open in separate tabs\n\t\tthis.$el.find( '.license a' ).attr( 'target', '_blank' );\n\n\t\t// If in readOnly mode, make textarea readonly\n\t\tif ( this.readOnly ) {\n\t\t\tthis.$content.prop( 'readonly', true );\n\t\t}\n\n\t\tthis.$content\n\t\t\t.on( 'input', this._resizeEditor.bind( this ) )\n\t\t\t.one( 'input', function () {\n\t\t\t\tself.log( { action: 'firstChange' } );\n\t\t\t} );\n\n\t\tif ( this.isFirefox ) {\n\t\t\tthis.$content.on( 'mousedown', function () {\n\t\t\t\t// Support: Firefox Mobile\n\t\t\t\t// Firefox scrolls back to the top of the page *every time*\n\t\t\t\t// you tap on the textarea. This makes things slightly\n\t\t\t\t// more usable by restoring your scroll offset every time\n\t\t\t\t// the page scrolls for the next 1000ms.\n\t\t\t\t// The page will still flicker every time the user touches\n\t\t\t\t// to place the cursor, but this is better than completely\n\t\t\t\t// losing your scroll offset. (T214880)\n\t\t\t\tvar docEl = document.documentElement,\n\t\t\t\t\tscrollTop = docEl.scrollTop;\n\t\t\t\tfunction blockScroll() {\n\t\t\t\t\tdocEl.scrollTop = scrollTop;\n\t\t\t\t}\n\t\t\t\twindow.addEventListener( 'scroll', blockScroll );\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\twindow.removeEventListener( 'scroll', blockScroll );\n\t\t\t\t}, 1000 );\n\t\t\t} );\n\t\t}\n\n\t\tthis._loadContent();\n\t},\n\n\t/**\n\t * Handles click on \"Edit without login\" in anonymous editing warning.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\tonClickAnonymous: function () {\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\t// reenable \"Next\" button\n\t\tthis.$anonHiddenButtons.show();\n\t\tthis.$content.show();\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Prepares the preview interface and reveals the save screen of the overlay\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonStageChanges: function () {\n\t\tvar self = this,\n\t\t\tparams = {\n\t\t\t\ttext: this.getContent()\n\t\t\t};\n\n\t\tthis.scrollTop = util.getDocument().find( 'body' ).scrollTop();\n\t\tthis.$content.hide();\n\t\tthis.showSpinner();\n\n\t\tif ( mw.config.get( 'wgIsMainPage' ) ) {\n\t\t\tparams.mainpage = 1; // Setting it to 0 will have the same effect\n\t\t}\n\n\t\tfunction hideSpinnerAndShowPreview() {\n\t\t\tself.hideSpinner();\n\t\t\tself.$preview.show();\n\t\t\tmw.hook( 'wikipage.content' ).fire( self.$preview );\n\t\t}\n\n\t\tthis.gateway.getPreview( params ).then( function ( result ) {\n\t\t\tvar parsedText = result.text,\n\t\t\t\tparsedSectionLine = result.line;\n\n\t\t\tself.sectionId = result.id;\n\t\t\t// On desktop edit summaries strip tags. Mimic this behavior on mobile devices\n\t\t\tself.sectionLine = self.parseHTML( '<div>' ).html( parsedSectionLine ).text();\n\t\t\tnew Section( {\n\t\t\t\tel: self.$preview,\n\t\t\t\ttext: parsedText\n\t\t\t} ).$el.find( 'a' ).on( 'click', false );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t}, function () {\n\t\t\tself.$preview.addClass(\n\t\t\t\t'mw-message-box mw-message-box-error'\n\t\t\t).text( mw.msg( 'mobile-frontend-editor-error-preview' ) );\n\n\t\t\thideSpinnerAndShowPreview();\n\t\t} );\n\n\t\tEditorOverlayBase.prototype.onStageChanges.apply( this, arguments );\n\t},\n\n\t/**\n\t * Hides the preview and reverts back to initial screen.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_hidePreview: function () {\n\t\tthis.gateway.abortPreview();\n\t\tthis.hideSpinner();\n\t\tthis.$preview.removeClass(\n\t\t\t'mw-message-box-error'\n\t\t).hide();\n\t\tthis.$content.show();\n\t\twindow.scrollTo( 0, this.scrollTop );\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\n\t/**\n\t * Resize the editor textarea, maintaining scroll position in iOS\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\t_resizeEditor: function () {\n\t\tvar scrollTop, container, $scrollContainer;\n\n\t\tif ( !this.$scrollContainer ) {\n\t\t\tcontainer = OO.ui.Element.static\n\t\t\t\t.getClosestScrollableContainer( this.$content[ 0 ] );\n\t\t\t// The scroll container will be either within the view\n\t\t\t// or the document element itself.\n\t\t\t$scrollContainer = this.$el.find( container ).length ?\n\t\t\t\tthis.$el.find( container ) : util.getDocument();\n\t\t\tthis.$scrollContainer = $scrollContainer;\n\t\t\tthis.$content.css( 'padding-bottom', this.$scrollContainer.height() * 0.6 );\n\t\t} else {\n\t\t\t$scrollContainer = this.$scrollContainer;\n\t\t}\n\n\t\t// Only do this if scroll container exists\n\t\tif ( this.$content.prop( 'scrollHeight' ) && $scrollContainer.length ) {\n\t\t\tscrollTop = $scrollContainer.scrollTop();\n\t\t\tthis.$content\n\t\t\t\t.css( 'height', 'auto' )\n\t\t\t\t// can't reuse prop( 'scrollHeight' ) because we need the current value\n\t\t\t\t.css( 'height', ( this.$content.prop( 'scrollHeight' ) + 2 ) + 'px' );\n\t\t\t$scrollContainer.scrollTop( scrollTop );\n\t\t}\n\t},\n\n\t/**\n\t * Set content to the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {string} content The content to set.\n\t */\n\tsetContent: function ( content ) {\n\t\tthis.$content\n\t\t\t.show()\n\t\t\t.val( content );\n\t\tthis._resizeEditor();\n\t},\n\n\t/**\n\t * Returns the content of the user input field.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {string}\n\t */\n\tgetContent: function () {\n\t\treturn this.$content.val();\n\t},\n\n\t/**\n\t * Requests content from the API and reveals it in UI.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t */\n\t_loadContent: function () {\n\t\tvar self = this;\n\n\t\tthis.$content.hide();\n\n\t\tthis.getLoadingPromise()\n\t\t\t.then( function ( result ) {\n\t\t\t\tvar content = result.text;\n\n\t\t\t\tself.setContent( content );\n\n\t\t\t\t// If the loaded content is not the default content, enable the save button\n\t\t\t\tif ( self.hasChanged() ) {\n\t\t\t\t\tself.$el.find( '.continue, .submit' ).prop( 'disabled', false );\n\t\t\t\t}\n\n\t\t\t\tvar options = self.options;\n\t\t\t\tvar showAnonWarning = options.isAnon && !options.switched;\n\n\t\t\t\tif ( showAnonWarning ) {\n\t\t\t\t\tself.$anonWarning = self.createAnonWarning( options );\n\t\t\t\t\tself.$anonTalkWarning = self.createAnonTalkWarning();\n\t\t\t\t\tself.$el.find( '.editor-container' ).append( [ self.$anonTalkWarning, self.$anonWarning ] );\n\t\t\t\t\tself.$content.hide();\n\t\t\t\t\t// the user has to click login, signup or edit without login,\n\t\t\t\t\t// disable \"Next\" button on top right\n\t\t\t\t\tself.$anonHiddenButtons = self.$el.find( '.overlay-header .continue' ).hide();\n\t\t\t\t}\n\n\t\t\t\tif ( self.gateway.fromModified ) {\n\t\t\t\t\t// Trigger intial EditorGateway#setContent and update save button\n\t\t\t\t\tself.onInputWikitextEditor();\n\t\t\t\t}\n\n\t\t\t\tself.showEditNotices();\n\t\t\t} );\n\t},\n\n\t/**\n\t * Loads a {VisualEditorOverlay} and replaces the existing SourceEditorOverlay with it\n\t * based on the current option values.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @private\n\t * @param {string} [wikitext] Wikitext to pass to VE\n\t */\n\t_switchToVisualEditor: function ( wikitext ) {\n\t\tvar self = this;\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'visual-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the VisualEditor\n\t\tsetPreferredEditor( 'VisualEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.$content.prop( 'readonly', true );\n\n\t\tmw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\tmw.libs.ve.targetLoader.addPlugin( 'ext.visualEditor.mobileArticleTarget' );\n\t\t\treturn mw.libs.ve.targetLoader.loadModules( 'visual' );\n\t\t} ).then(\n\t\t\tfunction () {\n\t\t\t\tvar newOverlay, options = self.getOptionsForSwitch();\n\t\t\t\toptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\tif ( wikitext ) {\n\t\t\t\t\toptions.dataPromise = mw.libs.ve.targetLoader.requestPageData( 'visual', mw.config.get( 'wgRelevantPageName' ), {\n\t\t\t\t\t\tsection: options.sectionId,\n\t\t\t\t\t\toldId: options.oldId || mw.config.get( 'wgRevisionId' ),\n\t\t\t\t\t\ttargetName: 'mobile',\n\t\t\t\t\t\tmodified: true,\n\t\t\t\t\t\twikitext: wikitext\n\t\t\t\t\t} );\n\t\t\t\t} else {\n\t\t\t\t\tdelete options.dataPromise;\n\t\t\t\t}\n\t\t\t\tnewOverlay = new VisualEditorOverlay( options );\n\t\t\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\t\t\tself.switching = true;\n\t\t\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\t\t\tself.switching = false;\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfunction () {\n\t\t\t\tself.$el.removeClass( 'switching' );\n\t\t\t\tself.$el.find( '.overlay-header-container' ).show();\n\t\t\t\tself.$el.find( '.ve-mobile-fakeToolbar-container' ).remove();\n\t\t\t\tself.$content.prop( 'readonly', false );\n\t\t\t\t// FIXME: We should show an error notification, but right now toast\n\t\t\t\t// notifications are not dismissible when shown within the editor.\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Executed when the editor clicks the save/publish button. Handles logging and submitting\n\t * the save action to the editor API.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveBegin: function () {\n\t\tvar self = this,\n\t\t\toptions = {\n\t\t\t\tsummary: this.$el.find( '.summary' ).val()\n\t\t\t};\n\n\t\tif ( self.sectionLine !== '' ) {\n\t\t\toptions.summary = '/* ' + self.sectionLine + ' */' + options.summary;\n\t\t}\n\t\tEditorOverlayBase.prototype.onSaveBegin.apply( this, arguments );\n\t\tif ( this.confirmAborted ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( this.captchaId ) {\n\t\t\toptions.captchaId = this.captchaId;\n\t\t\toptions.captchaWord = this.$el.find( '.captcha-word' ).val();\n\t\t}\n\n\t\tthis.showHidden( '.saving-header' );\n\n\t\tthis.gateway.save( options )\n\t\t\t.then( function ( newRevId, redirectUrl ) {\n\t\t\t\tvar title = self.options.title;\n\t\t\t\t// Special case behaviour of main page\n\t\t\t\tif ( mw.config.get( 'wgIsMainPage' ) && !redirectUrl ) {\n\t\t\t\t\t// FIXME: Blocked on T189173\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( title );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.onSaveComplete( newRevId, redirectUrl );\n\t\t\t}, function ( data ) {\n\t\t\t\tself.onSaveFailure( data );\n\t\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @param {number|null} newRevId ID of the newly created revision, or null if it was a null edit.\n\t * @param {string} [redirectUrl] URL to redirect to, if different than the current URL.\n\t */\n\tonSaveComplete: function ( newRevId, redirectUrl ) {\n\t\tEditorOverlayBase.prototype.onSaveComplete.apply( this, arguments );\n\n\t\t// The parent class changes the location hash in a setTimeout, so wait\n\t\t// for that to happen before reloading.\n\t\tsetTimeout( function () {\n\t\t\tif ( redirectUrl ) {\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.href = redirectUrl;\n\t\t\t} else if ( newRevId ) {\n\t\t\t\t// Set a notify parameter similar to venotify in VisualEditor.\n\t\t\t\tvar url = new URL( location.href );\n\t\t\t\turl.searchParams.set( 'mfnotify', this.isNewPage ? 'created' : 'saved' );\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.search = url.search;\n\t\t\t} else {\n\t\t\t\t// Null edit; do not add notify parameter.\n\t\t\t\t// Note the \"#\" may be in the URL.\n\t\t\t\t// If so, using window.location alone will not reload the page\n\t\t\t\t// we need to forcefully refresh\n\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tshowSaveCompleteMsg: function ( action ) {\n\t\tmw.loader.require( 'mediawiki.action.view.postEdit' ).fireHookOnPageReload( action );\n\t},\n\n\t/**\n\t * Executed when page save fails. Handles error display and bookkeeping,\n\t * passes logging duties to the parent.\n\t *\n\t * @inheritdoc\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t */\n\tonSaveFailure: function ( data ) {\n\t\tvar msg, noRetry;\n\n\t\tif ( data.edit && data.edit.captcha ) {\n\t\t\tthis.captchaId = data.edit.captcha.id;\n\t\t\tthis.handleCaptcha( data.edit.captcha );\n\t\t} else {\n\t\t\tmsg = saveFailureMessage( data );\n\t\t\tthis.reportError( msg );\n\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\n\t\t\t// Some errors may be temporary, but for others we know for sure that the save will\n\t\t\t// never succeed, so don't confuse the user by giving them the option to retry.\n\t\t\tnoRetry = data.errors && data.errors.some( function ( error ) {\n\t\t\t\treturn error.code === 'abusefilter-disallowed';\n\t\t\t} );\n\n\t\t\tif ( noRetry ) {\n\t\t\t\t// disable continue and save buttons, reenabled when user changes content\n\t\t\t\tthis.$el.find( '.continue, .submit' ).prop( 'disabled', true );\n\t\t\t}\n\t\t}\n\n\t\tEditorOverlayBase.prototype.onSaveFailure.apply( this, arguments );\n\t},\n\n\t/**\n\t * Checks whether the existing content has changed.\n\t *\n\t * @memberof SourceEditorOverlay\n\t * @instance\n\t * @return {boolean}\n\t */\n\thasChanged: function () {\n\t\treturn this.gateway.hasChanged;\n\t}\n} );\n\nmodule.exports = SourceEditorOverlay;\n","/* global ve, $ */\nvar EditorOverlayBase = require( './EditorOverlayBase' ),\n\tEditorGateway = require( './EditorGateway' ),\n\tfakeToolbar = require( '../mobile.init/fakeToolbar' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tidentifyLeadParagraph = require( './identifyLeadParagraph' ),\n\tsetPreferredEditor = require( './setPreferredEditor' ),\n\tutil = require( '../mobile.startup/util' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\toverlayManager = OverlayManager.getSingleton(),\n\tcurrentPage = require( '../mobile.startup/currentPage' );\n\n/**\n * Overlay for VisualEditor view\n *\n * @class VisualEditorOverlay\n * @extends EditorOverlayBase\n *\n * @param {Object} options Configuration options\n * @param {SourceEditorOverlay} options.SourceEditorOverlay Class to use for standard\n *  Wikitext editor. It must be passed in explicitly to avoid a cyclic\n *  dependency between VisualEditorOverlay and SourceEditorOverlay\n */\nfunction VisualEditorOverlay( options ) {\n\tvar surfaceReady = util.Deferred();\n\n\tEditorOverlayBase.call( this,\n\t\tutil.extend( {\n\t\t\teditSwitcher: false,\n\t\t\thasToolbar: true,\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tisBorderBox: false,\n\t\t\tclassName: 'overlay editor-overlay editor-overlay-ve'\n\t\t}, options )\n\t);\n\tthis.SourceEditorOverlay = options.SourceEditorOverlay;\n\tthis.isNewPage = options.isNewPage;\n\tthis.fromModified = options.dataPromise && options.switched;\n\n\t// VE surfaces must be attached to the DOM while initializing, and measurable\n\tthis.$el.addClass( 'editor-overlay-ve-initializing' );\n\toverlayManager.container.appendChild( this.$el[ 0 ] );\n\n\t// Gateway present for a few utility purposes; the VE articletarget\n\t// handles the actual API calls separately\n\tthis.gateway = new EditorGateway( {\n\t\tapi: options.api,\n\t\ttitle: options.title,\n\t\tsectionId: options.sectionId,\n\t\toldId: options.oldId\n\t} );\n\n\tthis.origDataPromise = this.options.dataPromise || mw.libs.ve.targetLoader.requestPageData(\n\t\t'visual',\n\t\toptions.titleObj.getPrefixedDb(),\n\t\t{\n\t\t\tsessionStore: true,\n\t\t\tsection: options.sectionId || null,\n\t\t\toldId: options.oldId || undefined,\n\t\t\ttargetName: ve.init.mw.MobileArticleTarget.static.trackingName,\n\t\t\tpreload: options.preload,\n\t\t\tpreloadparams: options.preloadparams,\n\t\t\teditintro: options.editintro\n\t\t}\n\t);\n\n\tvar modes = [];\n\tthis.currentPage = currentPage();\n\tif ( this.currentPage.isVEVisualAvailable() ) {\n\t\tmodes.push( 'visual' );\n\t}\n\tif ( this.currentPage.isVESourceAvailable() ) {\n\t\tmodes.push( 'source' );\n\t}\n\n\tthis.target = ve.init.mw.targetFactory.create( 'article', this, {\n\t\t$element: this.$el,\n\t\t// string or null, but not undefined\n\t\tsection: this.options.sectionId || null,\n\t\tmodes: modes,\n\t\t// If source is passed in without being in modes, it'll just fall back to visual\n\t\tdefaultMode: this.options.mode === 'source' ? 'source' : 'visual'\n\t} );\n\tthis.target.once( 'surfaceReady', function () {\n\t\tsurfaceReady.resolve();\n\n\t\tthis.target.getSurface().getModel().getDocument().once( 'transact', function () {\n\t\t\tthis.log( { action: 'firstChange' } );\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n\tvar firstLoad = true;\n\tthis.target.on( 'surfaceReady', function () {\n\t\tsetPreferredEditor( this.target.getDefaultMode() === 'source' ? 'SourceEditor' : 'VisualEditor' );\n\t\t// On first surfaceReady we wait for any dialogs to be closed before running targetInit.\n\t\t// On subsequent surfaceReady's (i.e. edit mode switch) we can initialize immediately.\n\t\tif ( !firstLoad ) {\n\t\t\tthis.targetInit();\n\t\t}\n\t\tfirstLoad = false;\n\t}.bind( this ) );\n\n\tthis.target.load( this.origDataPromise );\n\n\t// Overlay is only shown after this is resolved. It must be resolved\n\t// with the API response regardless of what we are waiting for.\n\tthis.dataPromise = this.origDataPromise.then( function ( data ) {\n\t\tthis.gateway.wouldautocreate =\n\t\t\tdata && data.visualeditor && data.visualeditor.wouldautocreate;\n\n\t\treturn surfaceReady.then( function () {\n\t\t\tthis.$el.removeClass( 'editor-overlay-ve-initializing' );\n\t\t\treturn data && data.visualeditor;\n\t\t}.bind( this ) );\n\t}.bind( this ) );\n}\n\nmfExtend( VisualEditorOverlay, EditorOverlayBase, {\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, EditorOverlayBase.prototype.templatePartials, {\n\t\teditHeader: util.template( `\n<div class=\"overlay-header header initial-header hideable hidden\">\n\t<div class=\"toolbar\"></div>\n</div>\n\t\t` ),\n\t\tcontent: util.template( `\n<div class=\"surface\" lang=\"{{contentLang}}\" dir=\"{{contentDir}}\">\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\teditor: 'visualeditor',\n\t/**\n\t * Destroy the existing VisualEditor target.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tdestroyTarget: function () {\n\t\tif ( this.target ) {\n\t\t\tthis.target.destroy();\n\t\t\tthis.target = null;\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tvar\n\t\t\toptions = this.options,\n\t\t\tshowAnonWarning = options.isAnon && !options.switched;\n\n\t\tEditorOverlayBase.prototype.show.apply( this, arguments );\n\n\t\t// log edit attempt\n\t\tthis.log( { action: 'ready' } );\n\t\tthis.log( { action: 'loaded' } );\n\n\t\tif ( !showAnonWarning ) {\n\t\t\tthis.targetInit();\n\t\t} else {\n\t\t\tthis.$anonWarning = this.createAnonWarning( this.options );\n\t\t\tthis.$anonTalkWarning = this.createAnonTalkWarning();\n\t\t\tthis.$el.append( [ this.$anonTalkWarning, this.$anonWarning ] );\n\t\t\tthis.$el.find( '.overlay-content' ).hide();\n\t\t}\n\n\t\tthis.emit( 'editor-loaded' );\n\t},\n\t/**\n\t * Initialize the target after it has been made visible\n\t */\n\ttargetInit: function () {\n\t\t// Note this.target will not be set if an error occurred and/or destroyTarget was called.\n\t\tif ( this.target ) {\n\t\t\tthis.target.afterSurfaceReady();\n\t\t\tthis.scrollToLeadParagraph();\n\t\t\tthis.showEditNotices();\n\t\t}\n\t},\n\t/**\n\t * Scroll so that the lead paragraph in edit mode shows at the same place on the screen\n\t * as the lead paragraph in read mode.\n\t *\n\t * Their normal position is different because of (most importantly) the lead paragraph\n\t * transformation to move it before the infobox, and also invisible templates and slugs\n\t * caused by the presence of hatnote templates (both only shown in edit mode).\n\t */\n\tscrollToLeadParagraph: function () {\n\t\tvar editLead, editLeadView, readLead, offset, initialCursorOffset,\n\t\t\tcurrentPageHTMLParser = this.options.currentPageHTMLParser,\n\t\t\tfakeScroll = this.options.fakeScroll,\n\t\t\t$window = $( window ),\n\t\t\tsection = this.target.section,\n\t\t\tsurface = this.target.getSurface(),\n\t\t\tmode = surface.getMode();\n\n\t\tif ( ( section === null || section === '0' ) && mode === 'visual' ) {\n\t\t\teditLead = identifyLeadParagraph( surface.getView().$attachedRootNode );\n\t\t\tif ( currentPageHTMLParser.getLeadSectionElement() ) {\n\t\t\t\treadLead = identifyLeadParagraph( currentPageHTMLParser.getLeadSectionElement() );\n\t\t\t}\n\n\t\t\tif ( editLead && readLead ) {\n\t\t\t\toffset = $( editLead ).offset().top - ( $( readLead ).offset().top - fakeScroll );\n\t\t\t\t// Set a model range to match\n\t\t\t\teditLeadView = $( editLead ).data( 'view' );\n\t\t\t\tif ( editLeadView ) {\n\t\t\t\t\tsurface.getModel().setLinearSelection(\n\t\t\t\t\t\tnew ve.Range( editLeadView.getModel().getRange().start )\n\t\t\t\t\t);\n\t\t\t\t\tinitialCursorOffset =\n\t\t\t\t\t\tsurface.getView().getSelection().getSelectionBoundingRect().top;\n\t\t\t\t\t// Ensure the surface is tall enough to scroll the cursor into view\n\t\t\t\t\tsurface.$element.css( 'min-height', $window.height() + initialCursorOffset - surface.padding.top );\n\t\t\t\t}\n\t\t\t\t$window.scrollTop( offset );\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar overlay = this;\n\t\tEditorOverlayBase.prototype.onBeforeExit.call( this, function () {\n\t\t\t// If this function is called, the parent method has decided that we should exit\n\t\t\texit();\n\t\t\t// VE-specific cleanup\n\t\t\toverlay.destroyTarget();\n\t\t}, cancel );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickBack: function () {\n\t\tEditorOverlayBase.prototype.onClickBack.apply( this, arguments );\n\t\tthis.switchToEditor();\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tonClickAnonymous: function () {\n\t\tvar self = this;\n\t\tthis.$anonWarning.hide();\n\t\tthis.$anonTalkWarning.hide();\n\t\tself.$el.find( '.overlay-content' ).show();\n\t\tthis.targetInit();\n\t},\n\t/**\n\t * Reveal the editing interface.\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\tswitchToEditor: function () {\n\t\tthis.showHidden( '.initial-header' );\n\t},\n\t/**\n\t * Loads an {SourceEditorOverlay} and replaces the existing {VisualEditorOverlay}\n\t *\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t * @param {jQuery.Promise} [dataPromise] Optional promise for loading content\n\t */\n\tswitchToSourceEditor: function ( dataPromise ) {\n\t\tvar self = this,\n\t\t\tSourceEditorOverlay = this.SourceEditorOverlay,\n\t\t\tnewOverlay,\n\t\t\toptions = this.getOptionsForSwitch();\n\t\tthis.log( {\n\t\t\taction: 'abort',\n\t\t\ttype: 'switchnochange',\n\t\t\tmechanism: 'navigate'\n\t\t} );\n\t\tthis.logFeatureUse( {\n\t\t\tfeature: 'editor-switch',\n\t\t\taction: 'source-mobile'\n\t\t} );\n\n\t\t// Save a user setting indicating that this user prefers using the SourceEditor\n\t\tsetPreferredEditor( 'SourceEditor' );\n\n\t\tthis.$el.addClass( 'switching' );\n\t\tthis.$el.find( '.overlay-header-container' ).hide();\n\t\tthis.$el.append( fakeToolbar() );\n\t\tthis.target.getSurface().setReadOnly( true );\n\n\t\tif ( dataPromise ) {\n\t\t\t// If switching with edits we can't stay in section editing, as a VE edit\n\t\t\t// can always affect the whole document (e.g. references)\n\t\t\toptions.sectionId = null;\n\t\t\trouter.navigateTo( document.title, {\n\t\t\t\tpath: '#/editor/all',\n\t\t\t\tuseReplaceState: true\n\t\t\t} );\n\t\t}\n\t\tnewOverlay = new SourceEditorOverlay( options, dataPromise );\n\t\tnewOverlay.getLoadingPromise().then( function () {\n\t\t\tself.switching = true;\n\t\t\tself.overlayManager.replaceCurrent( newOverlay );\n\t\t\tself.switching = false;\n\t\t} );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof VisualEditorOverlay\n\t * @instance\n\t */\n\thasChanged: function () {\n\t\tif ( this.saved ) {\n\t\t\t// If we just saved, there's not really any changes, and the\n\t\t\t// target is going to be destroyed in one tick\n\t\t\treturn false;\n\t\t}\n\t\treturn this.fromModified || (\n\t\t\tthis.target &&\n\t\t\tthis.target.getSurface() &&\n\t\t\tthis.target.getSurface().getModel().hasBeenModified()\n\t\t);\n\t}\n} );\n\nmodule.exports = VisualEditorOverlay;\n","const\n\tDrawer = require( '../mobile.startup/Drawer' ),\n\tBlockMessageDetails = require( './BlockMessageDetails' );\n\n/**\n * @typedef {Object} BlockMessageOptions\n * @property {number} blockId representing the block\n * @property {boolean} partial is this a partial block?\n * @property {Object} creator\n * @property {string} creator.name of the blocker\n * @property {string} creator.url associated with the block\n * @property {string} reason for block\n * @property {string} [duration] of block e.g. \"1 week\"\n * @property {string} [expiry] of block, wrapped in parentheses\n *  e.g. \"(1st September 2019)\"\n */\n\n/**\n * This creates the drawer at the bottom of the screen that appears when a\n * blocked user tries to edit.\n *\n * @param {BlockMessageOptions} props\n * @return {Drawer}\n */\nmodule.exports = function blockMessageDrawer( props ) {\n\tconst blockDrawer = new Drawer( {\n\t\tclassName: 'drawer block-message',\n\t\tonBeforeHide: function ( drawer ) {\n\t\t\tdrawer.$el.remove();\n\t\t},\n\t\tonShow: function () {\n\t\t\tconst $drawer = blockDrawer.$el.find( '.drawer.block-message' ),\n\t\t\t\tdrawerTop = $drawer.offset().top - 100,\n\t\t\t\tcreatorTop = blockDrawer.$el.find( '.block-message-creator' ).offset().top - 100,\n\t\t\t\tbuttonsTop = blockDrawer.$el.find( '.block-message-buttons' ).offset().top - 100,\n\t\t\t\t$seeMore = blockDrawer.$el.find( '.block-message-see-more' ),\n\t\t\t\twiki = mw.config.get( 'wgDBname' );\n\n\t\t\t$drawer.css( 'top', drawerTop + ( buttonsTop - creatorTop ) );\n\t\t\t$seeMore.on(\n\t\t\t\t'click',\n\t\t\t\tfunction () {\n\t\t\t\t\tconst $container = blockDrawer.$el.find( '.block-message-container' );\n\t\t\t\t\t$drawer.css( 'top', 0 );\n\t\t\t\t\t$container.css( 'overflow-y', 'auto' );\n\t\t\t\t\t$container.css( 'height', buttonsTop - $container.offset().top );\n\t\t\t\t\t$seeMore.hide();\n\n\t\t\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.reasonShown', 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif ( mw.config.get( 'wgMFTrackBlockNotices' ) ) {\n\t\t\t\tmw.track( 'counter.MediaWiki.BlockNotices.' + wiki + '.MobileFrontend.shown', 1 );\n\t\t\t}\n\t\t},\n\t\tchildren: [\n\t\t\t( new BlockMessageDetails( props ) ).$el\n\t\t]\n\t} );\n\treturn blockDrawer;\n};\n","/* global $ */\n/**\n * Find first paragraph that has text content, i.e. paragraphs that are not empty.\n * Keep in sync with MoveLeadParagraphTransform::identifyLeadParagraph().\n *\n * @param {jQuery} $body Where to search for paragraphs\n * @return {Node|null} The lead paragraph\n */\nmodule.exports = function identifyLeadParagraph( $body ) {\n\t// Keep in sync with MoveLeadParagraphTransform::isNotEmptyNode()\n\tfunction isNotEmptyNode( node ) {\n\t\t// Ignore VE whitespace characters\n\t\treturn !/^[\\s↵➞]*$/.test( node.textContent );\n\t}\n\n\t// Keep in sync with MoveLeadParagraphTransform::isNonLeadParagraph()\n\tfunction isNonLeadParagraph( node ) {\n\t\tnode = node.cloneNode( true );\n\t\tvar $node = $( node );\n\t\t// The paragraph itself can be an invisible template (T293834)\n\t\tif ( $node.hasClass( 've-ce-focusableNode-invisible' ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t// Ignore non-content nodes, TemplateStyles and coordinates\n\t\t$node.find( '.ve-ce-branchNode-inlineSlug, .ve-ce-focusableNode-invisible, style, span#coordinates' ).remove();\n\t\tif ( isNotEmptyNode( node ) ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tvar $paragraphs = $body.children( 'p' );\n\tfor ( var i = 0; i < $paragraphs.length; i++ ) {\n\t\tvar p = $paragraphs[ i ];\n\t\tif ( !isNonLeadParagraph( p ) ) {\n\t\t\treturn p;\n\t\t}\n\t}\n\treturn null;\n};\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tSourceEditorOverlay = require( './SourceEditorOverlay' ),\n\tVisualEditorOverlay = require( './VisualEditorOverlay' );\n\n// Exposed for MobileFrontend mobile.init usage.\nm.define( 'mobile.editor.overlay/SourceEditorOverlay', SourceEditorOverlay );\nm.define( 'mobile.editor.overlay/VisualEditorOverlay', VisualEditorOverlay );\n","var util = require( '../mobile.startup/util' );\n\n/**\n * @param {string} blockinfo\n * @return {Object}\n */\nmodule.exports = function parseBlockInfo( blockinfo ) {\n\tconst blockInfo = {\n\t\tpartial: blockinfo.blockpartial || false,\n\t\tnoCreateAccount: blockinfo.blocknocreate || false,\n\t\tanonOnly: blockinfo.blockanononly === undefined ? true : blockinfo.blockanononly,\n\t\tcreator: {\n\t\t\tname: blockinfo.blockedby,\n\t\t\turl: null\n\t\t},\n\t\texpiry: null,\n\t\tduration: null,\n\t\treason: '',\n\t\tblockId: blockinfo.blockid\n\t};\n\n\t// Workaround to parse a message parameter for mw.message, see T96885\n\tfunction jqueryMsgParse( wikitext ) {\n\t\tconst parser = new mw.jqueryMsg.Parser();\n\t\ttry {\n\t\t\tconst ast = parser.wikiTextToAst( wikitext );\n\t\t\treturn parser.emitter.emit( ast ).html();\n\t\t} catch ( e ) {\n\t\t\t// Ignore error as it's probably the parser error. Usually this is because we\n\t\t\t// can't parse templates.\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// URL only useful if block creator is a local user\n\tif ( blockinfo.blockedbyid === 0 ) {\n\t\tblockInfo.creator.url = '';\n\t} else {\n\t\tblockInfo.creator.url = mw.Title.makeTitle(\n\t\t\tmw.config.get( 'wgNamespaceIds' ).user,\n\t\t\tblockInfo.creator.name\n\t\t).getUrl();\n\t}\n\n\tif ( [ 'infinite', 'indefinite', 'infinity', 'never' ].indexOf( blockinfo.blockexpiry ) === -1 ) {\n\t\tblockInfo.expiry = mw.message( 'parentheses', blockinfo.blockexpiryformatted ).escaped();\n\t\tblockInfo.duration = blockinfo.blockexpiryrelative;\n\t}\n\n\tconst reason = blockinfo.blockreason;\n\tif ( reason ) {\n\t\tblockInfo.reason = jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\tblockInfo.parsedReason = ( new mw.Api() ).get( {\n\t\t\taction: 'parse',\n\t\t\tformatversion: 2,\n\t\t\ttext: reason,\n\t\t\tcontentmodel: 'wikitext'\n\t\t} ).then( function ( result ) {\n\t\t\treturn result.parse.text;\n\t\t} ).catch( function () {\n\t\t\treturn jqueryMsgParse( reason ) || mw.html.escape( reason );\n\t\t} );\n\t} else {\n\t\tblockInfo.reason = mw.message( 'mobile-frontend-editor-generic-block-reason' ).escaped();\n\t\tblockInfo.parsedReason = util.Deferred().resolve( blockInfo.reason ).promise();\n\t}\n\n\treturn blockInfo;\n};\n","/**\n * Build a save failure message from the API response\n *\n * @param {Object} data API response\n * @return {string} message HTML text describing the failure for display to the user\n */\nmodule.exports = function saveFailureMessage( data ) {\n\t// In most cases, return the error message from the API directly.\n\t// Handle a few exceptions where it is unsuitable for end-users\n\t// (some error messages are seemingly intended for tool developers).\n\n\tvar code = data && data.errors && data.errors[0] && data.errors[0].code;\n\n\tif ( code === 'editconflict' ) {\n\t\treturn mw.msg( 'mobile-frontend-editor-error-conflict' );\n\t}\n\n\tif ( code === 'readonly' ) {\n\t\treturn data.errors[0].html + '<br>' + data.errors[0].data.readonlyreason;\n\t}\n\n\tif ( data.errors && data.errors[0] ) {\n\t\treturn data.errors[0].html;\n\t}\n\n\t// This probably indicates a connection problem and a \"fake\" response\n\t// generated by mediawiki.Api. TODO Give a better error message here.\n\treturn '';\n};\n","/**\n * Store the user's preferred editor\n *\n * @param {string} editor 'VisualEditor' or 'SourceEditor'\n */\nmodule.exports = function setPreferredEditor( editor ) {\n\tif ( mw.user.isNamed() ) {\n\t\tnew mw.Api().saveOption( 'mobile-editor', editor ).then( function () {\n\t\t\tmw.user.options.set( 'mobile-editor', editor );\n\t\t} );\n\t} else {\n\t\tmw.storage.set( 'preferredEditor', editor );\n\t}\n};\n"],"sourceRoot":""}