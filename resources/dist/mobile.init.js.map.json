{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.init/editor.js","webpack://mfModules.[name]/./src/mobile.init/editorLoadingOverlay.js","webpack://mfModules.[name]/./src/mobile.init/lazyLoadedImages.js","webpack://mfModules.[name]/./src/mobile.init/mobile.init.js","webpack://mfModules.[name]/./src/mobile.init/toggling.js"],"names":["M","require","util","editorLoadingOverlay","OverlayManager","$editTab","$","user","mw","CtaDrawer","veConfig","config","get","editorPath","onEditLinkClick","elem","ev","router","section","length","getParamValue","href","navigate","preventDefault","setupEditor","page","skin","currentPageHTMLParser","uri","fragment","editorOverride","overlayManager","getSingleton","isNewPage","id","on","this","hook","add","$content","find","sectionId","animationDelayDeferred","abortableDataPromise","loadingOverlay","overlayPromise","scrollTop","window","pageYOffset","$contentText","url","URL","location","editorOptions","fakeScroll","api","Api","licenseMsg","getLicenseMsg","title","titleObj","isAnon","oldId","contentLang","attr","contentDir","preload","searchParams","preloadparams","Uri","toString","arrayParams","query","editintro","initMechanism","logInit","editor","track","action","type","mechanism","integration","editor_interface","shouldLoadVisualEditor","preferredEditor","options","storage","getPreferredEditor","isVisualAvailable","loadSourceEditor","fire","loader","using","then","isWikiText","undefined","Deferred","$page","$sectionTop","enableVisualSectionEditing","document","body","addClass","closest","prop","getBoundingClientRect","top","css","transform","setTimeout","resolve","abort","removeClass","mode","dataPromise","libs","ve","targetLoader","requestPageData","getPrefixedDb","sessionStore","targetName","addPlugin","loadModules","VisualEditorOverlay","SourceEditorOverlay","Promise","all","overlay","getLoadingPromise","overlayData","stack","replaceCurrent","error","apiResponse","back","show","appendChild","$el","notify","getErrorMessage","msg","i","editUri","e","getPath","history","pushState","veaction","replaceState","init","currentPage","isReadOnly","editRestrictions","hide","hideSectionEditIcons","Array","isArray","drawer","showLoginDrawer","content","signupQueryParams","warning","route","checkRoute","bindEditLinksLoginDrawer","$link","bindEditLinksSorryToast","message","parseDom","module","exports","inNamespace","fakeToolbar","Overlay","afterShow","afterHide","$fakeToolbar","className","noHeader","isBorderBox","onBeforeExit","exit","prototype","call","appendTo","lazyImageLoader","$container","imagePlaceholders","queryPlaceholders","addEventListener","loadImages","observer","IntersectionObserver","entries","forEach","entry","placeholder","target","isIntersecting","loadImage","unobserve","rootMargin","threshold","observe","placeholderClass","indexOf","USER_FONT_SIZE_REGULAR","USER_FONT_SIZES","toggling","lazyLoadedImages","$window","getWindow","Skin","eventBus","apply2","fn1","fn2","apply","arguments","updateFontSize","userFontSize","fontSize","fontClass","documentElement","classList","remove","debounce","emit","throttle","has","delete","console","log","Toggler","$contentContainer","prefix","removeAttr","mfTempOpenSection"],"mappings":"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","file":"mobile.init.js","sourcesContent":["/* global $ */\nvar M = require( '../mobile.startup/moduleLoaderSingleton' ),\n\tutil = require( '../mobile.startup/util' ),\n\teditorLoadingOverlay = require( './editorLoadingOverlay' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\t// #ca-edit, .mw-editsection are standard MediaWiki elements\n\t// .edit-link comes from MobileFrontend user page creation CTA\n\t// Links in content are handled separately to allow reloading the content (T324686)\n\t$editTab = $( '#ca-edit' ),\n\tEDITSECTION_SELECTOR = '.mw-editsection a, .edit-link',\n\tuser = mw.user,\n\tCtaDrawer = require( '../mobile.startup/CtaDrawer' ),\n\tveConfig = mw.config.get( 'wgVisualEditorConfig' ),\n\teditorPath = /^\\/editor\\/(\\d+|T-\\d+|all)$/;\n\n/**\n * Event handler for edit link clicks. Will prevent default link\n * behaviour and will not allow propagation\n *\n * @method\n * @ignore\n * @param {HTMLElement} elem\n * @param {jQuery.Event} ev\n * @param {Router} router\n */\nfunction onEditLinkClick( elem, ev, router ) {\n\tvar section;\n\tif ( $( EDITSECTION_SELECTOR ).length === 0 ) {\n\t\t// If section edit links are not available, the only edit link\n\t\t// should allow editing the whole page (T232170)\n\t\tsection = 'all';\n\t} else {\n\t\tsection = mw.util.getParamValue( 'section', elem.href ) || 'all';\n\t}\n\t// Don't do anything for section edit links for different pages (transcluded)\n\tif ( mw.config.get( 'wgPageName' ) !== mw.util.getParamValue( 'title', elem.href ) ) {\n\t\treturn;\n\t}\n\trouter.navigate( '#/editor/' + section );\n\t// DO NOT USE stopPropagation or you'll break click tracking in WikimediaEvents\n\t// You DO NOT NEED to\n\t// prevent folding section when clicking Edit by stopping propagation\n\t// as this is a concern of the Toggler class and taken care of by inspecting\n\t// !ev.target.href (see Toggler.js)\n\t// avoid navigating to ?action=edit\n\tev.preventDefault();\n}\n\n/**\n * Retrieve the user's preferred editor setting. If none is set, return the default\n * editor for this wiki.\n *\n * @method\n * @ignore\n * @return {string} Either 'VisualEditor' or 'SourceEditor'\n */\nfunction getPreferredEditor() {\n\tconst preferredEditor = mw.user.options.get( 'mobile-editor' ) || mw.storage.get( 'preferredEditor' );\n\tif ( preferredEditor ) {\n\t\treturn preferredEditor;\n\t}\n\tconst defaultEditor = mw.config.get( 'wgMFDefaultEditor' );\n\tswitch ( defaultEditor ) {\n\t\tcase 'source':\n\t\t\treturn 'SourceEditor';\n\t\tcase 'visual':\n\t\t\treturn 'VisualEditor';\n\t\tcase 'preference':\n\t\t\t// First check if the user has actually used the desktop editor.\n\t\t\t// This is done hackily by checking if they have the preference\n\t\t\t// set to suppress the welcome dialog or user education popups. (T261423)\n\t\t\tif ( mw.user.options.get( 'visualeditor-hidebetawelcome' ) || mw.user.options.get( 'visualeditor-hideusered' ) ) {\n\t\t\t\treturn mw.user.options.get( 'visualeditor-editor' ) === 'visualeditor' ? 'VisualEditor' : 'SourceEditor';\n\t\t\t} else {\n\t\t\t\t// We don't know what their preference is.\n\t\t\t\t// For now, continue to give them the source editor.\n\t\t\t\treturn 'SourceEditor';\n\t\t\t}\n\t}\n\t// In the event of misconfiguration, fall back to source\n\treturn 'SourceEditor';\n}\n\n/**\n * Initialize the edit button so that it launches the editor interface when clicked.\n *\n * @method\n * @ignore\n * @param {Page} page The page to edit.\n * @param {Skin} skin\n * @param {PageHTMLParser} currentPageHTMLParser\n * @param {Router} router\n */\nfunction setupEditor( page, skin, currentPageHTMLParser, router ) {\n\tvar uri, fragment, editorOverride,\n\t\toverlayManager = OverlayManager.getSingleton(),\n\t\tisNewPage = page.id === 0;\n\n\t$editTab.on( 'click', function ( ev ) {\n\t\tonEditLinkClick( this, ev, overlayManager.router );\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tonEditLinkClick( this, ev, overlayManager.router );\n\t\t} );\n\t} );\n\n\toverlayManager.add( editorPath, function ( sectionId ) {\n\t\tvar\n\t\t\tscrollTop = window.pageYOffset,\n\t\t\t$contentText = $( '#mw-content-text' ),\n\t\t\turl = new URL( location.href ),\n\t\t\teditorOptions = {\n\t\t\t\toverlayManager: overlayManager,\n\t\t\t\tcurrentPageHTMLParser: currentPageHTMLParser,\n\t\t\t\tfakeScroll: 0,\n\t\t\t\tapi: new mw.Api(),\n\t\t\t\tlicenseMsg: skin.getLicenseMsg(),\n\t\t\t\ttitle: page.title,\n\t\t\t\ttitleObj: page.titleObj,\n\t\t\t\tisAnon: user.isAnon(),\n\t\t\t\tisNewPage: isNewPage,\n\t\t\t\toldId: mw.util.getParamValue( 'oldid' ),\n\t\t\t\tcontentLang: $contentText.attr( 'lang' ),\n\t\t\t\tcontentDir: $contentText.attr( 'dir' ),\n\t\t\t\t// Arrange preload content if we're on a page with those URL parameters\n\t\t\t\tpreload: url.searchParams.get( 'preload' ),\n\t\t\t\t// Handle numbered array parameters like MediaWiki's PHP code does (T231382)\n\t\t\t\t// eslint-disable-next-line max-len\n\t\t\t\tpreloadparams: new mw.Uri( url.toString(), { arrayParams: true } ).query.preloadparams,\n\t\t\t\teditintro: url.searchParams.get( 'editintro' )\n\t\t\t},\n\t\t\tanimationDelayDeferred, abortableDataPromise, loadingOverlay, overlayPromise,\n\t\t\tinitMechanism = mw.util.getParamValue( 'redlink' ) ? 'new' : 'click';\n\n\t\tif ( sectionId !== 'all' ) {\n\t\t\teditorOptions.sectionId = page.isWikiText() ? sectionId : undefined;\n\t\t}\n\n\t\tfunction showLoading() {\n\t\t\tvar $page, $content, $sectionTop, fakeScroll, enableVisualSectionEditing;\n\n\t\t\t$( document.body ).addClass( 've-loading' );\n\n\t\t\t$page = $( '#mw-mf-page-center' );\n\t\t\t$content = $( '#content' );\n\t\t\tif ( sectionId === '0' || sectionId === 'all' ) {\n\t\t\t\t$sectionTop = $( '#bodyContent' );\n\t\t\t} else {\n\t\t\t\t$sectionTop = $( '[data-section=\"' + sectionId + '\"]' )\n\t\t\t\t\t.closest( 'h1, h2, h3, h4, h5, h6' );\n\t\t\t\t// When loading on action=edit URLs, there is no page content\n\t\t\t\tif ( !$sectionTop.length ) {\n\t\t\t\t\t$sectionTop = $( '#bodyContent' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Pretend that we didn't just scroll the page to the top.\n\t\t\t$page.prop( 'scrollTop', scrollTop );\n\t\t\t// Then, pretend that we're scrolling to the position of the clicked heading.\n\t\t\tfakeScroll = $sectionTop[0].getBoundingClientRect().top;\n\t\t\t// Adjust for height of the toolbar.\n\t\t\tfakeScroll -= 48;\n\t\t\tif ( shouldLoadVisualEditor() ) {\n\t\t\t\tenableVisualSectionEditing = veConfig.enableVisualSectionEditing === true ||\n\t\t\t\t\t// === ve.init.mw.MobileArticleTarget.static.trackingName\n\t\t\t\t\tveConfig.enableVisualSectionEditing === 'mobile';\n\t\t\t\tif ( sectionId === '0' || sectionId === 'all' || enableVisualSectionEditing ) {\n\t\t\t\t\t// Adjust for surface padding. Only needed if we're at the beginning of the doc.\n\t\t\t\t\tfakeScroll -= 16;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( sectionId === '0' || sectionId === 'all' ) {\n\t\t\t\t\tfakeScroll -= 16;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$content.css( {\n\t\t\t\t// Use transform instead of scroll for smoother animation (via CSS transitions).\n\t\t\t\ttransform: 'translate( 0, ' + -fakeScroll + 'px )',\n\t\t\t\t// If the clicked heading is near the end of the page, we might need to insert\n\t\t\t\t// some extra space to allow us to scroll \"beyond the end\" of the page.\n\t\t\t\t'padding-bottom': '+=' + fakeScroll,\n\t\t\t\t'margin-bottom': '-=' + fakeScroll\n\t\t\t} );\n\t\t\teditorOptions.fakeScroll = fakeScroll;\n\t\t\tsetTimeout( animationDelayDeferred.resolve, 500 );\n\t\t}\n\n\t\tfunction clearLoading() {\n\t\t\tif ( abortableDataPromise && abortableDataPromise.abort ) {\n\t\t\t\tabortableDataPromise.abort();\n\t\t\t}\n\n\t\t\t$( '#content' ).css( {\n\t\t\t\ttransform: '',\n\t\t\t\t'padding-bottom': '',\n\t\t\t\t'margin-bottom': ''\n\t\t\t} );\n\n\t\t\t$( document.body ).removeClass( 've-loading' );\n\t\t}\n\n\t\t/**\n\t\t * Log init event to edit schema.\n\t\t * Need to log this from outside the Overlay object because that module\n\t\t * won't have loaded yet.\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @param {string} editor name e.g. wikitext or visualeditor\n\t\t * @method\n\t\t */\n\t\tfunction logInit( editor ) {\n\t\t\tmw.track( 'editAttemptStep', {\n\t\t\t\taction: 'init',\n\t\t\t\ttype: 'section',\n\t\t\t\tmechanism: initMechanism,\n\t\t\t\tintegration: 'page',\n\t\t\t\t/* eslint-disable camelcase */\n\t\t\t\teditor_interface: editor\n\t\t\t\t/* eslint-enable camelcase */\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Check whether VisualEditor should be loaded\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {bool}\n\t\t */\n\t\tfunction shouldLoadVisualEditor() {\n\t\t\tvar preferredEditor = getPreferredEditor();\n\n\t\t\treturn page.isVisualAvailable() &&\n\t\t\t\t(\n\t\t\t\t\t// If the user prefers the VisualEditor or the user has no preference and\n\t\t\t\t\t// the VisualEditor is the default editor for this wiki\n\t\t\t\t\tpreferredEditor === 'VisualEditor' ||\n\t\t\t\t\t// We've loaded it via the URL for this request\n\t\t\t\t\teditorOverride === 'VisualEditor'\n\t\t\t\t) &&\n\n\t\t\t\teditorOverride !== 'SourceEditor';\n\t\t}\n\n\t\t/**\n\t\t * Load source editor\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {jQuery.Promise} Promise resolved with the editor overlay\n\t\t */\n\t\tfunction loadSourceEditor() {\n\t\t\tlogInit( 'wikitext' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\treturn mw.loader.using( 'mobile.editor.overlay' ).then( function () {\n\t\t\t\tvar SourceEditorOverlay = M.require( 'mobile.editor.overlay/SourceEditorOverlay' );\n\t\t\t\treturn new SourceEditorOverlay( editorOptions );\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Load visual editor. If it fails to load for any reason, load the source editor instead.\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {jQuery.Promise} Promise resolved with the editor overlay\n\t\t */\n\t\tfunction loadVisualEditorMaybe() {\n\t\t\tlogInit( 'visualeditor' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\teditorOptions.mode = 'visual';\n\t\t\teditorOptions.dataPromise = mw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\t\tabortableDataPromise = mw.libs.ve.targetLoader.requestPageData(\n\t\t\t\t\teditorOptions.mode,\n\t\t\t\t\teditorOptions.titleObj.getPrefixedDb(),\n\t\t\t\t\t{\n\t\t\t\t\t\tsessionStore: true,\n\t\t\t\t\t\tsection: editorOptions.sectionId === undefined ?\n\t\t\t\t\t\t\tnull : editorOptions.sectionId,\n\t\t\t\t\t\toldId: editorOptions.oldId || undefined,\n\t\t\t\t\t\tpreload: editorOptions.preload,\n\t\t\t\t\t\tpreloadparams: editorOptions.preloadparams,\n\t\t\t\t\t\teditintro: editorOptions.editintro,\n\t\t\t\t\t\t// Should be ve.init.mw.MobileArticleTarget.static.trackingName,\n\t\t\t\t\t\t// but the class hasn't loaded yet.\n\t\t\t\t\t\ttargetName: 'mobile'\n\t\t\t\t\t} );\n\t\t\t\treturn abortableDataPromise;\n\t\t\t} );\n\n\t\t\treturn mw.loader.using( 'ext.visualEditor.targetLoader' )\n\t\t\t\t.then( function () {\n\t\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'ext.visualEditor.mobileArticleTarget' );\n\t\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.overlay' );\n\t\t\t\t\treturn mw.libs.ve.targetLoader.loadModules( editorOptions.mode );\n\t\t\t\t} )\n\t\t\t\t.then( function () {\n\t\t\t\t\tvar VisualEditorOverlay = M.require( 'mobile.editor.overlay/VisualEditorOverlay' ),\n\t\t\t\t\t\tSourceEditorOverlay = M.require( 'mobile.editor.overlay/SourceEditorOverlay' );\n\t\t\t\t\teditorOptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\t\treturn new VisualEditorOverlay( editorOptions );\n\t\t\t\t}, function () {\n\t\t\t\t\treturn loadSourceEditor();\n\t\t\t\t} );\n\t\t}\n\n\t\tanimationDelayDeferred = util.Deferred();\n\n\t\t// showLoading() has to run after the overlay has opened, which disables page scrolling.\n\t\t// clearLoading() has to run after the loading overlay is hidden in any way\n\t\t// (either when loading is aborted, or when the editor overlay is shown instead).\n\t\tloadingOverlay = editorLoadingOverlay( showLoading, clearLoading );\n\n\t\tif ( shouldLoadVisualEditor() ) {\n\t\t\toverlayPromise = loadVisualEditorMaybe();\n\t\t} else {\n\t\t\toverlayPromise = loadSourceEditor();\n\t\t}\n\n\t\t// Wait for the scroll animation to finish before we show the editor overlay\n\t\tutil.Promise.all( [ overlayPromise, animationDelayDeferred ] ).then( function ( overlay ) {\n\t\t\t// Wait for the data to load before we show the editor overlay\n\t\t\toverlay.getLoadingPromise().then( function () {\n\t\t\t\t// Make sure the user did not close the loading overlay while we were waiting\n\t\t\t\tvar overlayData = overlayManager.stack[0];\n\t\t\t\tif ( !overlayData || overlayData.overlay !== loadingOverlay ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Show the editor!\n\t\t\t\toverlayManager.replaceCurrent( overlay );\n\t\t\t}, function ( error, apiResponse ) {\n\t\t\t\t// Could not load the editor.\n\t\t\t\toverlayManager.router.back();\n\t\t\t\tif ( error.show ) {\n\t\t\t\t\t// Probably a blockMessageDrawer returned because the user is blocked.\n\t\t\t\t\tdocument.body.appendChild( error.$el[ 0 ] );\n\t\t\t\t\terror.show();\n\t\t\t\t} else if ( apiResponse ) {\n\t\t\t\t\tmw.notify( editorOptions.api.getErrorMessage( apiResponse ) );\n\t\t\t\t} else {\n\t\t\t\t\tmw.notify( mw.msg( 'mobile-frontend-editor-error-loading' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn loadingOverlay;\n\t} );\n\n\t$( '#ca-edit a' ).prop( 'href', function ( i, href ) {\n\t\ttry {\n\t\t\tvar editUri = new mw.Uri( href );\n\t\t\t// By default the editor opens section 0 (lead section), rather than the whole article.\n\t\t\t// This might be changed in the future (T210659).\n\t\t\teditUri.query.section = '0';\n\t\t\treturn editUri.toString();\n\t\t} catch ( e ) {\n\t\t\t// T106244 - the href couldn't be parsed likely due to invalid UTF-8\n\t\t\treturn href;\n\t\t}\n\t} );\n\n\t// We use wgAction instead of getParamValue('action') as the former can be\n\t// overridden by hooks to stop the editor loading automatically.\n\tif ( !router.getPath() && ( mw.util.getParamValue( 'veaction' ) || mw.config.get( 'wgAction' ) === 'edit' ) ) {\n\t\tif ( mw.util.getParamValue( 'veaction' ) === 'edit' ) {\n\t\t\teditorOverride = 'VisualEditor';\n\t\t} else if ( mw.util.getParamValue( 'veaction' ) === 'editsource' ) {\n\t\t\teditorOverride = 'SourceEditor';\n\t\t}\n\t\t// else: action=edit, for which we allow the default to take effect\n\t\tfragment = '#/editor/' + ( mw.util.getParamValue( 'section' ) || ( mw.config.get( 'wgAction' ) === 'edit' ? 'all' : '0' ) );\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\tif ( window.history && history.pushState ) {\n\t\t\turi = mw.Uri();\n\t\t\tdelete uri.query.action;\n\t\t\tdelete uri.query.veaction;\n\t\t\tdelete uri.query.section;\n\t\t\t// Note: replaceState rather than pushState, because we're\n\t\t\t// just reformatting the URL to the equivalent-meaning for the\n\t\t\t// mobile site.\n\t\t\thistory.replaceState( null, document.title, uri.toString() + fragment );\n\t\t} else {\n\t\t\trouter.navigate( fragment );\n\t\t}\n\t}\n}\n\n/**\n * Hide any section id icons in the page. This will not hide the edit icon in the page action\n * menu.\n *\n * @method\n * @ignore\n * @param {PageHTMLParser} currentPageHTMLParser\n */\nfunction hideSectionEditIcons( currentPageHTMLParser ) {\n\tcurrentPageHTMLParser.$el.find( '.mw-editsection' ).hide();\n}\n\n/**\n * Show a drawer with log in / sign up buttons.\n *\n * @method\n * @ignore\n * @param {Router} router\n */\nfunction bindEditLinksLoginDrawer( router ) {\n\tvar drawer;\n\tfunction showLoginDrawer() {\n\t\tif ( !drawer ) {\n\t\t\tdrawer = new CtaDrawer( {\n\t\t\t\tcontent: mw.msg( 'mobile-frontend-editor-disabled-anon' ),\n\t\t\t\tsignupQueryParams: {\n\t\t\t\t\twarning: 'mobile-frontend-watchlist-signup-action'\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdocument.body.appendChild( drawer.$el[ 0 ] );\n\t\t}\n\t\tdrawer.show();\n\t}\n\t$editTab.on( 'click', function ( ev ) {\n\t\tshowLoginDrawer();\n\t\tev.preventDefault();\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tshowLoginDrawer();\n\t\t\tev.preventDefault();\n\t\t} );\n\t} );\n\trouter.route( editorPath, function () {\n\t\tshowLoginDrawer();\n\t} );\n\trouter.checkRoute();\n}\n\n/**\n * Setup the editor if the user can edit the page otherwise show a sorry toast.\n *\n * @method\n * @ignore\n * @param {Page} currentPage\n * @param {PageHTMLParser} currentPageHTMLParser\n * @param {Skin} skin\n * @param {Router} router\n */\nfunction init( currentPage, currentPageHTMLParser, skin, router ) {\n\tvar isReadOnly, isEditable, editErrorMessage, editRestrictions;\n\t// see: https://www.mediawiki.org/wiki/Manual:Interface/JavaScript#Page-specific\n\tisReadOnly = mw.config.get( 'wgMinervaReadOnly' );\n\tisEditable = !isReadOnly && mw.config.get( 'wgIsProbablyEditable' );\n\n\tif ( isEditable ) {\n\t\t// Edit button updated in setupEditor.\n\t\tsetupEditor( currentPage, skin, currentPageHTMLParser, router );\n\t} else {\n\t\thideSectionEditIcons( currentPageHTMLParser );\n\t\teditRestrictions = mw.config.get( 'wgRestrictionEdit' );\n\t\tif ( mw.user.isAnon() && Array.isArray( editRestrictions ) && !editRestrictions.length ) {\n\t\t\tbindEditLinksLoginDrawer( router );\n\t\t} else {\n\t\t\tvar $link = $( '<a>' ).attr( 'href', '/wiki/' + mw.config.get( 'wgPageName' ) + '?action=edit' );\n\t\t\teditErrorMessage = isReadOnly ? mw.msg( 'apierror-readonly' ) : mw.message( 'mobile-frontend-editor-disabled', $link ).parseDom();\n\t\t\tbindEditLinksSorryToast( editErrorMessage, router );\n\t\t}\n\t}\n}\n\n/**\n * Wire up events that ensure we\n * show a toast message with sincere condolences when user navigates to\n * #/editor or clicks on an edit button\n *\n * @method\n * @ignore\n * @param {string} msg Message for sorry message\n * @param {Router} router\n */\nfunction bindEditLinksSorryToast( msg, router ) {\n\t$editTab.on( 'click', function ( ev ) {\n\t\tmw.notify( msg );\n\t\tev.preventDefault();\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tmw.notify( msg );\n\t\t\tev.preventDefault();\n\t\t} );\n\t} );\n\trouter.route( editorPath, function () {\n\t\tmw.notify( msg );\n\t} );\n\trouter.checkRoute();\n}\n\nmodule.exports = function ( currentPage, currentPageHTMLParser, skin ) {\n\tvar router = mw.loader.require( 'mediawiki.router' );\n\n\tif ( currentPage.inNamespace( 'file' ) && currentPage.id === 0 ) {\n\t\t// Is a new file page (enable upload image only) T60311\n\t\tbindEditLinksSorryToast( mw.msg( 'mobile-frontend-editor-uploadenable' ), router );\n\t} else {\n\t\t// Edit button is currently hidden. A call to init() will update it as needed.\n\t\tinit( currentPage, currentPageHTMLParser, skin, router );\n\t}\n};\n","var\n\tfakeToolbar = require( './fakeToolbar' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Like loadingOverlay(), but with a fake editor toolbar instead of the spinner.\n *\n * @param {Function} afterShow Callback which runs after overlay is shown\n * @param {Function} afterHide Callback which runs after overlay is hidden\n * @return {Overlay}\n */\nfunction editorLoadingOverlay( afterShow, afterHide ) {\n\tvar\n\t\t$fakeToolbar = fakeToolbar(),\n\t\toverlay = new Overlay( {\n\t\t\tclassName: 'overlay overlay-loading',\n\t\t\tnoHeader: true,\n\t\t\tisBorderBox: false,\n\t\t\tonBeforeExit: function ( exit ) {\n\t\t\t\texit();\n\t\t\t\tafterHide();\n\t\t\t}\n\t\t} );\n\n\toverlay.show = function () {\n\t\tOverlay.prototype.show.call( this );\n\t\tafterShow();\n\t};\n\n\t$fakeToolbar.appendTo( overlay.$el.find( '.overlay-content' ) );\n\n\t// Animate the toolbar sliding into place.\n\t$fakeToolbar.addClass( 'toolbar-hidden' );\n\tsetTimeout( function () {\n\t\t$fakeToolbar.addClass( 'toolbar-shown' );\n\t\tsetTimeout( function () {\n\t\t\t$fakeToolbar.addClass( 'toolbar-shown-done' );\n\t\t}, 250 );\n\t} );\n\n\treturn overlay;\n}\n\nmodule.exports = editorLoadingOverlay;\n","/* global $ */\nconst lazyImageLoader = require( '../mobile.startup/lazyImages/lazyImageLoader' );\n\n/**\n * Initialise lazy loading images to supplement the HTML changes inside the\n * MobileFormatter.\n *\n * @param {jQuery} $container\n */\nfunction init( $container ) {\n\tconst imagePlaceholders = lazyImageLoader.queryPlaceholders( $container[ 0 ] );\n\n\t// Regardless of whether or not lazy load is turned on\n\t// We need to load in all images before print\n\twindow.addEventListener( 'beforeprint', function () {\n\t\tlazyImageLoader.loadImages( imagePlaceholders );\n\t} );\n\n\tif ( !mw.config.get( 'wgMFLazyLoadImages' ) ) {\n\t\treturn;\n\t}\n\n\tif ( 'IntersectionObserver' in window ) {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t( entries ) => {\n\t\t\t\tentries.forEach( ( entry ) => {\n\t\t\t\t\tconst placeholder = entry.target;\n\t\t\t\t\t// If intersecting load image and stop observing it to free up resources.\n\t\t\t\t\tif ( entry.isIntersecting ) {\n\t\t\t\t\t\tlazyImageLoader.loadImage( placeholder );\n\t\t\t\t\t\tobserver.unobserve( placeholder );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n\t\t\t{\n\t\t\t\t// Setup the area for observing.\n\t\t\t\t// By default the root is the viewport.\n\t\t\t\t// We want the detection area to be as tall as 150% of the viewport height,\n\t\t\t\t// allowing elements to be detected before they reach the viewport.\n\t\t\t\t// This is achieved with a 50% bottom margin.\n\t\t\t\trootMargin: '0px 0px 50% 0px',\n\t\t\t\t// The default is 0 (meaning as soon as even one pixel is visible,\n\t\t\t\t// the callback will be run), however we explicitly set this so that\n\t\t\t\t// it is clear we have made this choice in case we want to revisit later.\n\t\t\t\tthreshold: 0\n\t\t\t}\n\t\t);\n\n\t\t// observe all the placeholders\n\t\timagePlaceholders.forEach( ( placeholder ) => {\n\t\t\tobserver.observe( placeholder );\n\t\t} );\n\t} else {\n\t\t/**\n\t\t * Adds the following class to identify the tap to click images on\n\t\t * older browsers that do not support IntersectionObserver:\n\t\t * lazy-image-placeholder--tap\n\t\t */\n\t\t// eslint-disable-next-line mediawiki/class-doc\n\t\t$( imagePlaceholders ).addClass( `${lazyImageLoader.placeholderClass}--tap` );\n\n\t\t// Tap to show (see T246767)\n\t\tdocument.addEventListener( 'click', function ( ev ) {\n\t\t\tif ( imagePlaceholders.indexOf( ev.target ) > -1 ) {\n\t\t\t\tlazyImageLoader.loadImage( ev.target );\n\t\t\t}\n\t\t} );\n\t}\n}\n\nmodule.exports = function () {\n\tmw.hook( 'wikipage.content' ).add( init );\n};\n","// FIXME: make this an object with a constructor to facilitate testing\n// (see https://bugzilla.wikimedia.org/show_bug.cgi?id=44264)\n/**\n * mobileFrontend namespace\n *\n * @class mw.mobileFrontend\n * @singleton\n */\nvar skin,\n\turl,\n\t{ USER_FONT_SIZE_REGULAR, USER_FONT_SIZES } = require( '../constants' ),\n\tstorage = mw.storage,\n\ttoggling = require( './toggling' ),\n\tlazyLoadedImages = require( './lazyLoadedImages' ),\n\teditor = require( './editor' ),\n\tcurrentPage = require( '../mobile.startup/currentPage' )(),\n\tcurrentPageHTMLParser = require( '../mobile.startup/currentPageHTMLParser' )(),\n\tmfUtil = require( '../mobile.startup/util' ),\n\t$window = mfUtil.getWindow(),\n\tSkin = require( '../mobile.startup/Skin' ),\n\teventBus = require( '../mobile.startup/eventBusSingleton' );\n\nskin = Skin.getSingleton();\n\n/**\n * Given 2 functions, it returns a function that will run both with it's\n * context and parameters and return the results combined\n *\n * @private\n * @param {Function} fn1\n * @param {Function} fn2\n * @return {Function} which returns void\n */\nfunction apply2( fn1, fn2 ) {\n\treturn function () {\n\t\tfn1.apply( this, arguments );\n\t\tfn2.apply( this, arguments );\n\t};\n}\n\n/**\n * The `window`'s resize event debounced at 100 ms.\n * The `resize:throttled` event is the `window`'s\n * resize event throttled to 200 ms.\n *\n * @event resize\n */\n\n/**\n * The `window`'s scroll event debounced at 100 ms.\n * The `scroll:throttled` event is the `window`'s\n * scroll event throttled to 200 ms.\n *\n * @event scroll\n */\n\n$window\n\t.on( 'resize', apply2(\n\t\tmw.util.debounce( function () { eventBus.emit( 'resize' ); }, 100 ),\n\t\tmw.util.throttle( function () { eventBus.emit( 'resize:throttled' ); }, 200 )\n\t) )\n\t.on( 'scroll', apply2(\n\t\tmw.util.debounce( function () { eventBus.emit( 'scroll' ); }, 100 ),\n\t\tmw.util.throttle( function () { eventBus.emit( 'scroll:throttled' ); }, 200 )\n\t) );\n\n/**\n * Updates the font size based on the current value in storage\n */\nfunction updateFontSize() {\n\tconst userFontSize = storage.get( 'userFontSize', USER_FONT_SIZE_REGULAR );\n\t// The following classes are used here:\n\t// * mf-font-size-small\n\t// * mf-font-size-regular\n\t// * mf-font-size-large\n\t// * mf-font-size-x-large\n\t/* eslint-disable mediawiki/class-doc */\n\tUSER_FONT_SIZES.forEach( function ( fontSize ) {\n\t\tconst fontClass = `mf-font-size-${fontSize}`;\n\t\tif ( fontSize === userFontSize ) {\n\t\t\tdocument.documentElement.classList.add( fontClass );\n\t\t} else {\n\t\t\t// If Safari's back/forward cache is being used the previous class may be present.\n\t\t\tdocument.documentElement.classList.remove( fontClass );\n\t\t}\n\t} );\n\t/* eslint-enable mediawiki/class-doc */\n}\n\n// Hide URL flags used to pass state through reloads\n// venotify is normally handled in ve.init.mw.DesktopArticleTarget.init.js\n// but that's not loaded on mobile\n// eslint-disable-next-line no-restricted-properties\nif ( window.history && history.pushState ) {\n\t// eslint-disable-next-line no-restricted-properties\n\turl = new URL( window.location.href );\n\tif ( url.searchParams.has( 'venotify' ) || url.searchParams.has( 'mfnotify' ) ) {\n\t\turl.searchParams.delete( 'venotify' );\n\t\turl.searchParams.delete( 'mfnotify' );\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.history.replaceState( null, document.title, url.toString() );\n\t}\n}\n\n// Font must be updated on back button press as users may click\n// back after changing font.\nwindow.addEventListener( 'pageshow', function () {\n\tupdateFontSize();\n} );\n\nupdateFontSize();\n\n// Recruit volunteers through the console\n// (note console.log may not be a function so check via apply)\n/* eslint-disable no-console */\nif ( window.console && window.console.log && window.console.log.apply &&\n\t\tmw.config.get( 'wgMFEnableJSConsoleRecruitment' ) ) {\n\tconsole.log( mw.msg( 'mobile-frontend-console-recruit' ) );\n}\n/* eslint-enable no-console */\n\n// Setup editor, if supported for the current page view\nif ( mw.config.get( 'wgMFIsSupportedEditRequest' ) ) {\n\teditor( currentPage, currentPageHTMLParser, skin );\n}\n\ntoggling();\nlazyLoadedImages();\n","module.exports = function () {\n\tvar\n\t\tcurrentPage = require( '../mobile.startup/currentPage' )(),\n\t\tToggler = require( '../mobile.startup/Toggler' ),\n\t\teventBus = require( '../mobile.startup/eventBusSingleton' );\n\n\t/**\n\t * Initialises toggling code.\n\t *\n\t * @method\n\t * @param {jQuery.Object} $container to enable toggling on\n\t * @param {string} prefix a prefix to use for the id.\n\t * @param {Page} page The current page\n\t * @ignore\n\t */\n\tfunction init( $container, prefix, page ) {\n\t\t// Only handle headings in content processed by MakeSectionsTransform.\n\t\t// Remove event handler added by MakeSectionsTransform::interimTogglingSupport().\n\t\t$container.find( '.section-heading' ).removeAttr( 'onclick' );\n\t\t// Cleanup global as it is no longer needed. We check if it's undefined because\n\t\t// there is no guarantee this won't be run on other skins e.g. Vector or cached HTML.\n\t\tif ( window.mfTempOpenSection !== undefined ) {\n\t\t\tdelete window.mfTempOpenSection;\n\t\t}\n\t\t// eslint-disable-next-line no-new\n\t\tnew Toggler( {\n\t\t\t$container: $container,\n\t\t\tprefix: prefix,\n\t\t\tpage: page,\n\t\t\teventBus: eventBus\n\t\t} );\n\t}\n\n\tif (\n\t\t// Avoid this running on Watchlist.\n\t\t!currentPage.inNamespace( 'special' ) &&\n\t\tmw.config.get( 'wgAction' ) === 'view'\n\t) {\n\t\tmw.hook( 'wikipage.content' ).add( function ( $container ) {\n\t\t\tvar $contentContainer = $container.find( '.mw-parser-output' );\n\t\t\t// If there was no mw-parser-output wrapper, just use the parent.\n\t\t\tif ( $contentContainer.length === 0 ) {\n\t\t\t\t$contentContainer = $container;\n\t\t\t}\n\t\t\tinit( $contentContainer, 'content-', currentPage );\n\t\t} );\n\t}\n};\n"],"sourceRoot":""}