{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.init/BetaOptinPanel.js","webpack://mfModules.[name]/./src/mobile.init/editor.js","webpack://mfModules.[name]/./src/mobile.init/mobile.init.js"],"names":["Button","__webpack_require__","util","mfExtend","Panel","user","mw","BetaOptinPanel","props","call","this","extend","className","templatePartials","prototype","button","template","get","defaults","postUrl","undefined","editToken","tokens","text","msg","buttons","progressive","additionalClassNames","label","options","events","click .optin","onOptin","ev","$","currentTarget","closest","submit","module","exports","M","router","loader","require","overlayManager","getSingleton","$allEditLinks","popup","CtaDrawer","blacklisted","test","navigator","userAgent","contentModel","config","isEditingSupported","isSupported","veConfig","editCount","isVisualEditorEnabled","editorPath","onEditLinkClick","section","Uri","href","query","navigate","setupEditor","page","skin","uri","fragment","editorOverride","isNewPage","id","on","add","sectionId","loadingOverlay","$content","preferredEditor","storage","getPreferredEditor","editorOptions","api","Api","licenseMsg","getLicenseMsg","title","isAnon","oldId","getParamValue","contentLang","attr","contentDir","sessionId","generateRandomSessionId","visualEditorNamespaces","namespaces","initMechanism","logInit","editor","track","action","type","mechanism","editor_interface","editing_session_id","loadSourceEditor","hook","fire","loadModule","then","isWikiText","indexOf","newLoadingOverlay","appendTo","document","body","show","mode","dataPromise","using","libs","ve","targetLoader","requestPageData","sessionStore","targetName","addPlugin","loadModules","VisualEditorOverlay","EditorOverlay","hide","prop","i","toString","getPath","window","history","pushState","veaction","replaceState","init","currentPage","isReadOnly","editRestrictions","hideSectionEditIcons","Array","isArray","drawer","content","signupQueryParams","warning","preventDefault","route","checkRoute","showLoginDrawer","showSorryToast","isMissing","inNamespace","skinName","isPageContentModelEditable","PageGateway","gateway","mfUtil","$window","getWindow","$html","getDocument","context","Page","experiments","activeExperiments","Skin","eventBus","ReferencesMobileViewGateway","getCurrentPage","apply2","fn1","fn2","apply","arguments","permissions","length","push","el","replace","protection","edit","revId","isMainPage","isWatched","hasClass","sections","getSectionsFromHTML","namespaceNumber","loadCurrentPage","updateFontSize","userFontSize","addClass","referencesGateway","debounce","emit","throttle","betaoptin","experiment","betaOptinPanel","inStable","inSample","token","set","getMode","getBucket","getUrl","returnto","getLeadSectionElement","isPanelShown","displayBetaOptIn","console","log","mobileFrontend","define"],"mappings":"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","file":"mobile.init.js","sourcesContent":["var Button = require( '../mobile.startup/Button' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tPanel = require( '../mobile.startup/Panel' ),\n\tuser = mw.user;\n\n/**\n * @class BetaOptinPanel\n * @extends Panel\n * @param {Object} props\n */\nfunction BetaOptinPanel( props ) {\n\tPanel.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'panel panel-inline visible'\n\t\t}, props )\n\t);\n}\n\nmfExtend( BetaOptinPanel, Panel, {\n\t/**\n\t * @memberof BetaOptinPanel\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Panel.prototype.templatePartials, {\n\t\tbutton: Button.prototype.template\n\t} ),\n\t/**\n\t * @memberof BetaOptinPanel\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.init', 'Panel.hogan' ),\n\t/**\n\t * @memberof BetaOptinPanel\n\t * @instance\n\t */\n\tdefaults: util.extend( {}, Panel.prototype.defaults, {\n\t\tpostUrl: undefined,\n\t\teditToken: user.tokens.get( 'editToken' ),\n\t\ttext: mw.msg( 'mobile-frontend-panel-betaoptin-msg' ),\n\t\tbuttons: [\n\t\t\tnew Button( {\n\t\t\t\tprogressive: true,\n\t\t\t\tadditionalClassNames: 'optin',\n\t\t\t\tlabel: mw.msg( 'mobile-frontend-panel-ok' )\n\t\t\t} ).options,\n\t\t\tnew Button( {\n\t\t\t\tadditionalClassNames: 'cancel',\n\t\t\t\tlabel: mw.msg( 'mobile-frontend-panel-cancel' )\n\t\t\t} ).options\n\t\t]\n\t} ),\n\t/**\n\t * @memberof BetaOptinPanel\n\t * @instance\n\t */\n\tevents: util.extend( {}, Panel.prototype.events, {\n\t\t'click .optin': 'onOptin'\n\t} ),\n\t/**\n\t * Cancel event handler\n\t * @memberof BetaOptinPanel\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonOptin: function ( ev ) {\n\t\tthis.$( ev.currentTarget ).closest( 'form' ).submit();\n\t}\n} );\n\nmodule.exports = BetaOptinPanel;\n","/* global $ */\nvar M = require( '../mobile.startup/moduleLoaderSingleton' ),\n\trouter = mw.loader.require( 'mediawiki.router' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\toverlayManager = OverlayManager.getSingleton(),\n\tloader = require( '../mobile.startup/rlModuleLoader' ),\n\t// #ca-edit, .mw-editsection are standard MediaWiki elements\n\t// .edit-link comes from MobileFrontend user page creation CTA\n\t$allEditLinks = $( '#ca-edit a, .mw-editsection a, .edit-link' ),\n\tuser = mw.user,\n\tpopup = require( '../mobile.startup/toast' ),\n\tCtaDrawer = require( '../mobile.startup/CtaDrawer' ),\n\t// FIXME: Disable on IE < 10 for time being\n\tblacklisted = /MSIE \\d\\./.test( navigator.userAgent ),\n\tcontentModel = mw.config.get( 'wgPageContentModel' ),\n\tisEditingSupported = router.isSupported() && !blacklisted,\n\tveConfig = mw.config.get( 'wgVisualEditorConfig' ),\n\teditCount = mw.config.get( 'wgUserEditCount' ),\n\t// FIXME: Should we consider default site options and user prefs?\n\tisVisualEditorEnabled = veConfig,\n\teditorPath = /^\\/editor\\/(\\d+|all)$/;\n\n/**\n * Event handler for edit link clicks. Will prevent default link\n * behaviour and will not allow propagation\n * @method\n * @ignore\n * @return {boolean}\n */\nfunction onEditLinkClick() {\n\tvar section = ( new mw.Uri( this.href ) ).query.section || 'all';\n\trouter.navigate( '#/editor/' + section );\n\t// prevent folding section when clicking Edit by stopping propagation\n\treturn false;\n}\n\n/**\n * Retrieve the user's preferred editor setting. If none is set, return the default\n * editor for this wiki.\n * @method\n * @ignore\n * @return {string} Either 'VisualEditor' or 'SourceEditor'\n */\nfunction getPreferredEditor() {\n\tvar preferredEditor = mw.storage.get( 'preferredEditor' );\n\tif ( !preferredEditor ) {\n\t\t// For now, we are going to ignore which editor is set as the default for the\n\t\t// wiki and always default to the source editor. Once we decide to honor the\n\t\t// default editor setting for the wiki, we'll want to use:\n\t\t// visualEditorDefault = veConfig && veConfig.defaultUserOptions &&\n\t\t//   veConfig.defaultUserOptions.enable;\n\t\t// return visualEditorDefault ? 'VisualEditor' : 'SourceEditor';\n\t\treturn 'SourceEditor';\n\t}\n\treturn preferredEditor;\n}\n\n/**\n * Initialize the edit button so that it launches the editor interface when clicked.\n * @method\n * @ignore\n * @param {Page} page The page to edit.\n * @param {Skin} skin\n */\nfunction setupEditor( page, skin ) {\n\tvar uri, fragment, editorOverride,\n\t\tisNewPage = page.options.id === 0;\n\n\t$allEditLinks.on( 'click', onEditLinkClick );\n\toverlayManager.add( editorPath, function ( sectionId ) {\n\t\tvar\n\t\t\t$content = $( '#mw-content-text' ),\n\t\t\tpreferredEditor = getPreferredEditor(),\n\t\t\teditorOptions = {\n\t\t\t\toverlayManager: overlayManager,\n\t\t\t\tapi: new mw.Api(),\n\t\t\t\tlicenseMsg: skin.getLicenseMsg(),\n\t\t\t\ttitle: page.title,\n\t\t\t\tisAnon: user.isAnon(),\n\t\t\t\tisNewPage: isNewPage,\n\t\t\t\teditCount: editCount,\n\t\t\t\toldId: mw.util.getParamValue( 'oldid' ),\n\t\t\t\tcontentLang: $content.attr( 'lang' ),\n\t\t\t\tcontentDir: $content.attr( 'dir' ),\n\t\t\t\tsessionId: user.generateRandomSessionId()\n\t\t\t},\n\t\t\tloadingOverlay,\n\t\t\tvisualEditorNamespaces = ( veConfig && veConfig.namespaces ) || [],\n\t\t\tinitMechanism = mw.util.getParamValue( 'redlink' ) ? 'new' : 'click';\n\n\t\t/**\n\t\t * Log init event to edit schema.\n\t\t * Need to log this from outside the Overlay object because that module\n\t\t * won't have loaded yet.\n\t\t * @private\n\t\t * @ignore\n\t\t * @param {string} editor name e.g. wikitext or visualeditor\n\t\t * @method\n\t\t */\n\t\tfunction logInit( editor ) {\n\t\t\tmw.track( 'mf.schemaEditAttemptStep', {\n\t\t\t\taction: 'init',\n\t\t\t\ttype: 'section',\n\t\t\t\tmechanism: initMechanism,\n\t\t\t\t/* eslint-disable camelcase */\n\t\t\t\teditor_interface: editor,\n\t\t\t\tediting_session_id: editorOptions.sessionId\n\t\t\t\t/* eslint-enable camelcase */\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Load source editor\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {jQuery.Promise}\n\t\t */\n\t\tfunction loadSourceEditor() {\n\t\t\tlogInit( 'wikitext' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\treturn loader.loadModule( 'mobile.editor.overlay' ).then( function () {\n\t\t\t\tvar EditorOverlay = M.require( 'mobile.editor.overlay/EditorOverlay' );\n\t\t\t\treturn new EditorOverlay( editorOptions );\n\t\t\t} );\n\t\t}\n\n\t\tif ( sectionId !== 'all' ) {\n\t\t\teditorOptions.sectionId = page.isWikiText() ? +sectionId : null;\n\t\t}\n\n\t\t// Check whether VisualEditor should be loaded\n\t\tif ( isVisualEditorEnabled &&\n\n\t\t\t// Only for pages with a wikitext content model\n\t\t\tpage.isWikiText() &&\n\n\t\t\t// Only in enabled namespaces\n\t\t\tvisualEditorNamespaces.indexOf( mw.config.get( 'wgNamespaceNumber' ) ) !== -1 &&\n\n\t\t\t// Not on pages which are outputs of the Page Translation feature\n\t\t\tmw.config.get( 'wgTranslatePageTranslation' ) !== 'translation' &&\n\n\t\t\t(\n\t\t\t\t// If the user prefers the VisualEditor or the user has no preference and\n\t\t\t\t// the VisualEditor is the default editor for this wiki\n\t\t\t\tpreferredEditor === 'VisualEditor' ||\n\t\t\t\t// We've loaded it via the URL for this request\n\t\t\t\teditorOverride === 'VisualEditor'\n\t\t\t) &&\n\n\t\t\teditorOverride !== 'SourceEditor'\n\t\t) {\n\t\t\tlogInit( 'visualeditor' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\t// Display an overlay identical to loader.loadModule( ... )\n\t\t\tloadingOverlay = loader.newLoadingOverlay();\n\t\t\tloadingOverlay.appendTo( document.body );\n\t\t\tloadingOverlay.show();\n\n\t\t\teditorOptions.mode = 'visual';\n\t\t\teditorOptions.dataPromise = mw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\t\treturn mw.libs.ve.targetLoader.requestPageData(\n\t\t\t\t\teditorOptions.mode,\n\t\t\t\t\teditorOptions.title,\n\t\t\t\t\t{\n\t\t\t\t\t\tsessionStore: true,\n\t\t\t\t\t\tsection: editorOptions.sectionId || null,\n\t\t\t\t\t\toldId: editorOptions.oldId || undefined,\n\t\t\t\t\t\t// Should be ve.init.mw.MobileFrontendArticleTarget.static.trackingName,\n\t\t\t\t\t\t// but the class hasn't loaded yet.\n\t\t\t\t\t\ttargetName: 'mobile'\n\t\t\t\t\t} );\n\t\t\t} );\n\t\t\treturn mw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.ve' );\n\t\t\t\treturn mw.libs.ve.targetLoader.loadModules( editorOptions.mode );\n\t\t\t} ).then( function () {\n\t\t\t\tvar VisualEditorOverlay = M.require( 'mobile.editor.overlay/VisualEditorOverlay' ),\n\t\t\t\t\tEditorOverlay = M.require( 'mobile.editor.overlay/EditorOverlay' );\n\t\t\t\teditorOptions.EditorOverlay = EditorOverlay;\n\t\t\t\tloadingOverlay.hide();\n\t\t\t\treturn new VisualEditorOverlay( editorOptions );\n\t\t\t}, function () {\n\t\t\t\tloadingOverlay.hide();\n\t\t\t\treturn loadSourceEditor();\n\t\t\t} );\n\t\t} else {\n\t\t\treturn loadSourceEditor();\n\t\t}\n\t} );\n\n\t$( '#ca-edit a' ).prop( 'href', function ( i, href ) {\n\t\tvar uri = new mw.Uri( href );\n\t\t// By default the editor opens section 0 (lead section), rather than the whole article.\n\t\t// This might be changed in the future (T210659).\n\t\turi.query.section = 0;\n\t\treturn uri.toString();\n\t} );\n\n\tif ( !router.getPath() && ( mw.util.getParamValue( 'veaction' ) || mw.util.getParamValue( 'action' ) === 'edit' ) ) {\n\t\tif ( mw.util.getParamValue( 'veaction' ) === 'edit' ) {\n\t\t\teditorOverride = 'VisualEditor';\n\t\t} else if ( mw.util.getParamValue( 'veaction' ) === 'editsource' ) {\n\t\t\teditorOverride = 'SourceEditor';\n\t\t}\n\t\t// else: action=edit, for which we allow the default to take effect\n\t\tfragment = '#/editor/' + ( mw.util.getParamValue( 'section' ) || ( mw.util.getParamValue( 'action' ) === 'edit' && 'all' ) || '0' );\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\tif ( window.history && history.pushState ) {\n\t\t\turi = mw.Uri();\n\t\t\tdelete uri.query.action;\n\t\t\tdelete uri.query.veaction;\n\t\t\tdelete uri.query.section;\n\t\t\t// Note: replaceState rather than pushState, because we're\n\t\t\t// just reformatting the URL to the equivalent-meaning for the\n\t\t\t// mobile site.\n\t\t\thistory.replaceState( null, document.title, uri.toString() + fragment );\n\t\t} else {\n\t\t\trouter.navigate( fragment );\n\t\t}\n\t}\n}\n\n/**\n * Hide any section id icons in the page. This will not hide the edit icon in the page action\n * menu.\n * @method\n * @ignore\n * @param {Page} currentPage\n */\nfunction hideSectionEditIcons( currentPage ) {\n\tcurrentPage.$( '.mw-editsection' ).hide();\n}\n\n/**\n * Show a drawer with log in / sign up buttons.\n * @method\n * @ignore\n */\nfunction showLoginDrawer() {\n\tvar drawer = new CtaDrawer( {\n\t\tcontent: mw.msg( 'mobile-frontend-editor-disabled-anon' ),\n\t\tsignupQueryParams: {\n\t\t\twarning: 'mobile-frontend-watchlist-signup-action'\n\t\t}\n\t} );\n\t$allEditLinks.on( 'click', function ( ev ) {\n\t\tdrawer.show();\n\t\tev.preventDefault();\n\t\treturn drawer;\n\t} );\n\trouter.route( editorPath, function () {\n\t\tdrawer.show();\n\t} );\n\trouter.checkRoute();\n}\n\n/**\n * Setup the editor if the user can edit the page otherwise show a sorry toast.\n * @method\n * @ignore\n * @param {Page} currentPage\n * @param {Skin} skin\n */\nfunction init( currentPage, skin ) {\n\tvar isReadOnly, isEditable, editErrorMessage, editRestrictions;\n\t// see: https://www.mediawiki.org/wiki/Manual:Interface/JavaScript#Page-specific\n\tisReadOnly = mw.config.get( 'wgMinervaReadOnly' );\n\tisEditable = !isReadOnly && mw.config.get( 'wgIsProbablyEditable' );\n\n\tif ( isEditable ) {\n\t\t// Edit button updated in setupEditor.\n\t\tsetupEditor( currentPage, skin );\n\t} else {\n\t\thideSectionEditIcons( currentPage );\n\t\teditRestrictions = mw.config.get( 'wgRestrictionEdit' );\n\t\tif ( mw.user.isAnon() && Array.isArray( editRestrictions ) && editRestrictions.indexOf( '*' ) !== -1 ) {\n\t\t\tshowLoginDrawer();\n\t\t} else {\n\t\t\teditErrorMessage = isReadOnly ? mw.msg( 'apierror-readonly' ) : mw.msg( 'mobile-frontend-editor-disabled' );\n\t\t\tshowSorryToast( editErrorMessage );\n\t\t}\n\t}\n}\n\n/**\n * Show a toast message with sincere condolences.\n * @method\n * @ignore\n * @param {string} msg Message for sorry message\n */\nfunction showSorryToast( msg ) {\n\t$allEditLinks.on( 'click', function ( ev ) {\n\t\tpopup.show( msg );\n\t\tev.preventDefault();\n\t} );\n\trouter.route( editorPath, function () {\n\t\tpopup.show( msg );\n\t} );\n\trouter.checkRoute();\n}\n\nmodule.exports = function ( currentPage, skin ) {\n\tvar isMissing = currentPage.options.id === 0;\n\tif ( contentModel !== 'wikitext' ) {\n\t\t// Only load the wikitext editor on wikitext. Otherwise we'll rely on the fallback behaviour\n\t\t// (You can test this on MediaWiki:Common.css) ?action=edit url (T173800)\n\t\treturn;\n\t}\n\n\tif ( mw.util.getParamValue( 'undo' ) ) {\n\t\t// Our fancy editor doesn't support undo, but we can rely on the fallback.\n\t\treturn;\n\t}\n\n\tif ( !isEditingSupported ) {\n\t\t// Browser doesn't support mobile editor (or is blacklisted), use the fallback editor.\n\t\treturn;\n\t}\n\n\tif ( currentPage.inNamespace( 'file' ) && isMissing ) {\n\t\t// Is a new file page (enable upload image only) Bug 58311\n\t\tshowSorryToast( mw.msg( 'mobile-frontend-editor-uploadenable' ) );\n\t} else {\n\t\t// Edit button is currently hidden. A call to init() will update it as needed.\n\t\tinit( currentPage, skin );\n\t}\n};\n","/* global $ */\n\n// FIXME: make this an object with a constructor to facilitate testing\n// (see https://bugzilla.wikimedia.org/show_bug.cgi?id=44264)\n/**\n * mobileFrontend namespace\n * @class mw.mobileFrontend\n * @singleton\n */\nvar currentPage, skin, exports,\n\tstorage = mw.storage,\n\tskinName = mw.config.get( 'skin' ),\n\tisPageContentModelEditable = mw.config.get( 'wgMFIsPageContentModelEditable' ),\n\teditor = require( './editor' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tBetaOptinPanel = require( './BetaOptinPanel' ),\n\tgateway = new PageGateway( new mw.Api() ),\n\tutil = mw.util,\n\tmfUtil = require( '../mobile.startup/util' ),\n\t$window = mfUtil.getWindow(),\n\t$html = mfUtil.getDocument(),\n\tuser = mw.user,\n\tcontext = require( '../mobile.startup/context' ),\n\tPage = require( '../mobile.startup/Page' ),\n\texperiments = mw.experiments,\n\tactiveExperiments = mw.config.get( 'wgMFExperiments' ) || {},\n\tSkin = require( '../mobile.startup/Skin' ),\n\teventBus = require( '../mobile.startup/eventBusSingleton' ),\n\tReferencesMobileViewGateway = require( '../mobile.startup/references/ReferencesMobileViewGateway' ),\n\tpage = getCurrentPage(),\n\tskinData = {\n\t\tel: 'body',\n\t\tpage: page,\n\t\treferencesGateway: ReferencesMobileViewGateway.getSingleton(),\n\t\teventBus: eventBus\n\t};\n\nskin = new Skin( skinData );\n\n/**\n * Given 2 functions, it returns a function that will run both with it's\n * context and parameters and return the results combined\n * @private\n * @param {Function} fn1\n * @param {Function} fn2\n * @return {Function} which returns the results of [fn1, fn2]\n */\nfunction apply2( fn1, fn2 ) {\n\treturn function () {\n\t\treturn [\n\t\t\tfn1.apply( this, arguments ),\n\t\t\tfn2.apply( this, arguments )\n\t\t];\n\t};\n}\n\n/**\n * The `window`'s resize event debounced at 100 ms.\n * The `resize:throttled` event is the `window`'s\n * resize event throttled to 200 ms.\n * @event resize\n */\n\n/**\n * The `window`'s scroll event debounced at 100 ms.\n * The `scroll:throttled` event is the `window`'s\n * scroll event throttled to 200 ms.\n * @event scroll\n */\n\n$window\n\t.on( 'resize', apply2(\n\t\t$.debounce( 100, function () { eventBus.emit( 'resize' ); } ),\n\t\t$.throttle( 200, function () { eventBus.emit( 'resize:throttled' ); } )\n\t) )\n\t.on( 'scroll', apply2(\n\t\t$.debounce( 100, function () { eventBus.emit( 'scroll' ); } ),\n\t\t$.throttle( 200, function () { eventBus.emit( 'scroll:throttled' ); } )\n\t) );\n\n/**\n * Get current page view object\n * @return {Page}\n */\nfunction getCurrentPage() {\n\tif ( currentPage ) {\n\t\treturn currentPage;\n\t} else {\n\t\treturn loadCurrentPage();\n\t}\n}\n\n/**\n * Constructs an incomplete Page object representing the currently loaded page.\n *\n * @private\n * @return {Page}\n */\nfunction loadCurrentPage() {\n\tvar permissions = mw.config.get( 'wgRestrictionEdit', [] ),\n\t\t$content = $( '#content #bodyContent' );\n\tif ( permissions.length === 0 ) {\n\t\tpermissions.push( '*' );\n\t}\n\tcurrentPage = new Page( {\n\t\tel: $content,\n\t\ttitle: mw.config.get( 'wgPageName' ).replace( /_/g, ' ' ),\n\t\tprotection: {\n\t\t\tedit: permissions\n\t\t},\n\t\trevId: mw.config.get( 'wgRevisionId' ),\n\t\tisMainPage: mw.config.get( 'wgIsMainPage' ),\n\t\tisWatched: $( '#ca-watch' ).hasClass( 'watched' ),\n\t\tsections: gateway.getSectionsFromHTML( $content ),\n\t\tisMissing: mw.config.get( 'wgArticleId' ) === 0,\n\t\tid: mw.config.get( 'wgArticleId' ),\n\t\tnamespaceNumber: mw.config.get( 'wgNamespaceNumber' )\n\t} );\n\treturn currentPage;\n}\n\n/**\n * Displays a prompt to ask the user to join the mobile beta mode.\n *\n * @private\n * @param {Object} experiment sampling data\n * @param {Page} page\n */\nfunction displayBetaOptIn( experiment, page ) {\n\tvar betaOptinPanel, inStable, inSample,\n\t\ttoken = storage.get( 'mobile-betaoptin-token' );\n\n\t// local storage is supported in this case, when ~ means it was dismissed\n\tif ( token !== false && token !== '~' &&\n\t\t!page.isMainPage() && !page.inNamespace( 'special' )\n\t) {\n\t\tif ( !token ) {\n\t\t\ttoken = user.generateRandomSessionId();\n\t\t\tstorage.set( 'mobile-betaoptin-token', token );\n\t\t}\n\n\t\tinStable = context.getMode() === 'stable';\n\t\tinSample = experiments.getBucket( experiment, token ) === 'A';\n\t\tif ( inStable && ( inSample || util.getParamValue( 'debug' ) ) ) {\n\t\t\tbetaOptinPanel = new BetaOptinPanel( {\n\t\t\t\tpostUrl: util.getUrl( 'Special:MobileOptions', {\n\t\t\t\t\treturnto: page.title\n\t\t\t\t} )\n\t\t\t} );\n\n\t\t\tbetaOptinPanel\n\t\t\t\t.on( 'hide', function () {\n\t\t\t\t\tstorage.set( 'mobile-betaoptin-token', '~' );\n\t\t\t\t} ).appendTo( page.getLeadSectionElement() );\n\t\t}\n\n\t\t// let the interested parties e.g. QuickSurveys know whether the panel is shown\n\t\tmw.track( 'mobile.betaoptin', {\n\t\t\tisPanelShown: betaOptinPanel !== undefined\n\t\t} );\n\t}\n}\n\n/**\n * Updates the font size based on the current value in storage\n */\nfunction updateFontSize() {\n\t// FIXME: Ideally 'regular' would come from a shared constant\n\t// (currently not possible without using webpack)\n\tvar userFontSize = storage.get( 'userFontSize', 'regular' );\n\t$html.addClass( 'mf-font-size-' + userFontSize );\n}\n\n// Font must be updated on back button press as users may click\n// back after changing font.\n$window.on( 'pageshow', function () {\n\tupdateFontSize();\n} );\nupdateFontSize();\n\nif ( activeExperiments.betaoptin ) {\n\tdisplayBetaOptIn( activeExperiments.betaoptin, getCurrentPage() );\n}\n\n// Recruit volunteers through the console\n// (note console.log may not be a function so check via apply)\n/* eslint-disable no-console */\nif ( window.console && window.console.log && window.console.log.apply &&\n\t\tmw.config.get( 'wgMFEnableJSConsoleRecruitment' ) ) {\n\tconsole.log( mw.msg( 'mobile-frontend-console-recruit' ) );\n}\n/* eslint-enable no-console */\n\n// setup editor\nif ( !page.inNamespace( 'special' ) && isPageContentModelEditable ) {\n\t// TODO: Mobile editor doesn't work well with other skins yet (it looks horribly broken\n\t// without some styles that are only defined by Minerva).\n\tif ( skinName === 'minerva' ) {\n\t\teditor( page, skin );\n\t}\n}\n\nexports = {\n\tgetCurrentPage: getCurrentPage\n};\n\n// Make getCurrentPage available to mobile.editor and Minerva modules\nmfUtil.extend( mw.mobileFrontend, exports );\n// expose to Minerva (skins.minerva.scripts)\nmw.mobileFrontend.define( 'mobile.init/skin', skin ); // resource-modules-disable-line\nmodule.exports = exports;\n"],"sourceRoot":""}