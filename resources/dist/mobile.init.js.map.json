{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.init/editor.js","webpack://mfModules.[name]/./src/mobile.init/editorLoadingOverlay.js","webpack://mfModules.[name]/./src/mobile.init/lazyLoadedImages.js","webpack://mfModules.[name]/./src/mobile.init/mobile.init.js","webpack://mfModules.[name]/./src/mobile.init/toggling.js"],"names":["M","require","util","editorLoadingOverlay","OverlayManager","$editTab","$","user","mw","CtaDrawer","veConfig","config","get","editorPath","onEditLinkClick","elem","ev","router","section","length","getParamValue","href","navigate","preventDefault","getPreferredEditor","preferredEditor","options","storage","init","currentPage","currentPageHTMLParser","skin","isReadOnly","editRestrictions","page","uri","fragment","editorOverride","overlayManager","getSingleton","isNewPage","id","on","this","hook","add","$content","find","sectionId","animationDelayDeferred","abortableDataPromise","loadingOverlay","overlayPromise","scrollTop","window","pageYOffset","$contentText","url","URL","location","editorOptions","fakeScroll","api","Api","licenseMsg","getLicenseMsg","title","titleObj","isAnon","oldId","contentLang","attr","contentDir","preload","searchParams","preloadparams","Uri","toString","arrayParams","query","editintro","initMechanism","logInit","editor","track","action","type","mechanism","integration","editor_interface","shouldLoadVisualEditor","isVESourceAvailable","isVEVisualAvailable","loadSourceEditor","fire","loader","using","then","isWikiText","undefined","Deferred","$page","$sectionTop","enableVisualSectionEditing","document","body","addClass","closest","prop","getBoundingClientRect","top","css","transform","setTimeout","resolve","abort","removeClass","mode","dataPromise","libs","ve","targetLoader","requestPageData","getPrefixedDb","sessionStore","targetName","addPlugin","loadModules","VisualEditorOverlay","SourceEditorOverlay","Promise","all","overlay","getLoadingPromise","overlayData","stack","replaceCurrent","error","apiResponse","back","show","appendChild","$el","notify","getErrorMessage","msg","i","editUri","e","getPath","history","pushState","veaction","replaceState","setupEditor","hide","hideSectionEditIcons","Array","isArray","drawer","showLoginDrawer","content","signupQueryParams","warning","route","checkRoute","bindEditLinksLoginDrawer","$link","bindEditLinksSorryToast","message","parseDom","module","exports","inNamespace","fakeToolbar","Overlay","afterShow","afterHide","$fakeToolbar","className","noHeader","isBorderBox","onBeforeExit","exit","prototype","call","appendTo","lazyImageLoader","$container","imagePlaceholders","queryPlaceholders","addEventListener","loadImages","observer","IntersectionObserver","entries","forEach","entry","placeholder","target","isIntersecting","loadImage","unobserve","rootMargin","threshold","observe","placeholderClass","indexOf","USER_FONT_SIZE_REGULAR","USER_FONT_SIZES","toggling","lazyLoadedImages","$window","getWindow","Skin","eventBus","apply2","fn1","fn2","apply","arguments","updateFontSize","userFontSize","fontSize","fontClass","documentElement","classList","remove","debounce","emit","throttle","has","delete","console","log","Toggler","$contentContainer","prefix","removeAttr","mfTempOpenSection"],"mappings":"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","file":"mobile.init.js","sourcesContent":["/* global $ */\nvar M = require( '../mobile.startup/moduleLoaderSingleton' ),\n\tutil = require( '../mobile.startup/util' ),\n\teditorLoadingOverlay = require( './editorLoadingOverlay' ),\n\tOverlayManager = require( '../mobile.startup/OverlayManager' ),\n\t// #ca-edit, .mw-editsection are standard MediaWiki elements\n\t// .edit-link comes from MobileFrontend user page creation CTA\n\t// Links in content are handled separately to allow reloading the content (T324686)\n\t$editTab = $( '#ca-edit' ),\n\tEDITSECTION_SELECTOR = '.mw-editsection a, .edit-link',\n\tuser = mw.user,\n\tCtaDrawer = require( '../mobile.startup/CtaDrawer' ),\n\tveConfig = mw.config.get( 'wgVisualEditorConfig' ),\n\teditorPath = /^\\/editor\\/(\\d+|T-\\d+|all)$/;\n\n/**\n * Event handler for edit link clicks. Will prevent default link\n * behaviour and will not allow propagation\n *\n * @method\n * @ignore\n * @param {HTMLElement} elem\n * @param {jQuery.Event} ev\n * @param {Router} router\n */\nfunction onEditLinkClick( elem, ev, router ) {\n\tvar section;\n\tif ( $( EDITSECTION_SELECTOR ).length === 0 ) {\n\t\t// If section edit links are not available, the only edit link\n\t\t// should allow editing the whole page (T232170)\n\t\tsection = 'all';\n\t} else {\n\t\tsection = mw.util.getParamValue( 'section', elem.href ) || 'all';\n\t}\n\t// Don't do anything for section edit links for different pages (transcluded)\n\tif ( mw.config.get( 'wgPageName' ) !== mw.util.getParamValue( 'title', elem.href ) ) {\n\t\treturn;\n\t}\n\trouter.navigate( '#/editor/' + section );\n\t// DO NOT USE stopPropagation or you'll break click tracking in WikimediaEvents\n\t// You DO NOT NEED to\n\t// prevent folding section when clicking Edit by stopping propagation\n\t// as this is a concern of the Toggler class and taken care of by inspecting\n\t// !ev.target.href (see Toggler.js)\n\t// avoid navigating to ?action=edit\n\tev.preventDefault();\n}\n\n/**\n * Retrieve the user's preferred editor setting. If none is set, return the default\n * editor for this wiki.\n *\n * @method\n * @ignore\n * @return {string} Either 'VisualEditor' or 'SourceEditor'\n */\nfunction getPreferredEditor() {\n\tconst preferredEditor = mw.user.options.get( 'mobile-editor' ) || mw.storage.get( 'preferredEditor' );\n\tif ( preferredEditor ) {\n\t\treturn preferredEditor;\n\t}\n\tconst defaultEditor = mw.config.get( 'wgMFDefaultEditor' );\n\tswitch ( defaultEditor ) {\n\t\tcase 'source':\n\t\t\treturn 'SourceEditor';\n\t\tcase 'visual':\n\t\t\treturn 'VisualEditor';\n\t\tcase 'preference':\n\t\t\t// First check if the user has actually used the desktop editor.\n\t\t\t// This is done hackily by checking if they have the preference\n\t\t\t// set to suppress the welcome dialog or user education popups. (T261423)\n\t\t\tif ( mw.user.options.get( 'visualeditor-hidebetawelcome' ) || mw.user.options.get( 'visualeditor-hideusered' ) ) {\n\t\t\t\treturn mw.user.options.get( 'visualeditor-editor' ) === 'visualeditor' ? 'VisualEditor' : 'SourceEditor';\n\t\t\t} else {\n\t\t\t\t// We don't know what their preference is.\n\t\t\t\t// For now, continue to give them the source editor.\n\t\t\t\treturn 'SourceEditor';\n\t\t\t}\n\t}\n\t// In the event of misconfiguration, fall back to source\n\treturn 'SourceEditor';\n}\n\n/**\n * Initialize the edit button so that it launches the editor interface when clicked.\n *\n * @method\n * @ignore\n * @param {Page} page The page to edit.\n * @param {Skin} skin\n * @param {PageHTMLParser} currentPageHTMLParser\n * @param {Router} router\n */\nfunction setupEditor( page, skin, currentPageHTMLParser, router ) {\n\tvar uri, fragment, editorOverride,\n\t\toverlayManager = OverlayManager.getSingleton(),\n\t\tisNewPage = page.id === 0;\n\n\t$editTab.on( 'click', function ( ev ) {\n\t\tonEditLinkClick( this, ev, overlayManager.router );\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tonEditLinkClick( this, ev, overlayManager.router );\n\t\t} );\n\t} );\n\n\toverlayManager.add( editorPath, function ( sectionId ) {\n\t\tvar\n\t\t\tscrollTop = window.pageYOffset,\n\t\t\t$contentText = $( '#mw-content-text' ),\n\t\t\turl = new URL( location.href ),\n\t\t\teditorOptions = {\n\t\t\t\toverlayManager: overlayManager,\n\t\t\t\tcurrentPageHTMLParser: currentPageHTMLParser,\n\t\t\t\tfakeScroll: 0,\n\t\t\t\tapi: new mw.Api(),\n\t\t\t\tlicenseMsg: skin.getLicenseMsg(),\n\t\t\t\ttitle: page.title,\n\t\t\t\ttitleObj: page.titleObj,\n\t\t\t\tisAnon: user.isAnon(),\n\t\t\t\tisNewPage: isNewPage,\n\t\t\t\toldId: mw.util.getParamValue( 'oldid' ),\n\t\t\t\tcontentLang: $contentText.attr( 'lang' ),\n\t\t\t\tcontentDir: $contentText.attr( 'dir' ),\n\t\t\t\t// Arrange preload content if we're on a page with those URL parameters\n\t\t\t\tpreload: url.searchParams.get( 'preload' ),\n\t\t\t\t// Handle numbered array parameters like MediaWiki's PHP code does (T231382)\n\t\t\t\t// eslint-disable-next-line max-len\n\t\t\t\tpreloadparams: new mw.Uri( url.toString(), { arrayParams: true } ).query.preloadparams,\n\t\t\t\teditintro: url.searchParams.get( 'editintro' )\n\t\t\t},\n\t\t\tanimationDelayDeferred, abortableDataPromise, loadingOverlay, overlayPromise,\n\t\t\tinitMechanism = mw.util.getParamValue( 'redlink' ) ? 'new' : 'click';\n\n\t\tif ( sectionId !== 'all' ) {\n\t\t\teditorOptions.sectionId = page.isWikiText() ? sectionId : undefined;\n\t\t}\n\n\t\tfunction showLoading() {\n\t\t\tvar $page, $content, $sectionTop, fakeScroll, enableVisualSectionEditing;\n\n\t\t\t$( document.body ).addClass( 've-loading' );\n\n\t\t\t$page = $( '#mw-mf-page-center' );\n\t\t\t$content = $( '#content' );\n\t\t\tif ( sectionId === '0' || sectionId === 'all' ) {\n\t\t\t\t$sectionTop = $( '#bodyContent' );\n\t\t\t} else {\n\t\t\t\t$sectionTop = $( '[data-section=\"' + sectionId + '\"]' )\n\t\t\t\t\t.closest( 'h1, h2, h3, h4, h5, h6' );\n\t\t\t\t// When loading on action=edit URLs, there is no page content\n\t\t\t\tif ( !$sectionTop.length ) {\n\t\t\t\t\t$sectionTop = $( '#bodyContent' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Pretend that we didn't just scroll the page to the top.\n\t\t\t$page.prop( 'scrollTop', scrollTop );\n\t\t\t// Then, pretend that we're scrolling to the position of the clicked heading.\n\t\t\tfakeScroll = $sectionTop[0].getBoundingClientRect().top;\n\t\t\t// Adjust for height of the toolbar.\n\t\t\tfakeScroll -= 48;\n\t\t\tif ( shouldLoadVisualEditor() ) {\n\t\t\t\tenableVisualSectionEditing = veConfig.enableVisualSectionEditing === true ||\n\t\t\t\t\t// === ve.init.mw.MobileArticleTarget.static.trackingName\n\t\t\t\t\tveConfig.enableVisualSectionEditing === 'mobile';\n\t\t\t\tif ( sectionId === '0' || sectionId === 'all' || enableVisualSectionEditing ) {\n\t\t\t\t\t// Adjust for surface padding. Only needed if we're at the beginning of the doc.\n\t\t\t\t\tfakeScroll -= 16;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( sectionId === '0' || sectionId === 'all' ) {\n\t\t\t\t\tfakeScroll -= 16;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$content.css( {\n\t\t\t\t// Use transform instead of scroll for smoother animation (via CSS transitions).\n\t\t\t\ttransform: 'translate( 0, ' + -fakeScroll + 'px )',\n\t\t\t\t// If the clicked heading is near the end of the page, we might need to insert\n\t\t\t\t// some extra space to allow us to scroll \"beyond the end\" of the page.\n\t\t\t\t'padding-bottom': '+=' + fakeScroll,\n\t\t\t\t'margin-bottom': '-=' + fakeScroll\n\t\t\t} );\n\t\t\teditorOptions.fakeScroll = fakeScroll;\n\t\t\tsetTimeout( animationDelayDeferred.resolve, 500 );\n\t\t}\n\n\t\tfunction clearLoading() {\n\t\t\tif ( abortableDataPromise && abortableDataPromise.abort ) {\n\t\t\t\tabortableDataPromise.abort();\n\t\t\t}\n\n\t\t\t$( '#content' ).css( {\n\t\t\t\ttransform: '',\n\t\t\t\t'padding-bottom': '',\n\t\t\t\t'margin-bottom': ''\n\t\t\t} );\n\n\t\t\t$( document.body ).removeClass( 've-loading' );\n\t\t}\n\n\t\t/**\n\t\t * Log init event to edit schema.\n\t\t * Need to log this from outside the Overlay object because that module\n\t\t * won't have loaded yet.\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @param {string} editor name e.g. wikitext or visualeditor\n\t\t * @method\n\t\t */\n\t\tfunction logInit( editor ) {\n\t\t\tmw.track( 'editAttemptStep', {\n\t\t\t\taction: 'init',\n\t\t\t\ttype: 'section',\n\t\t\t\tmechanism: initMechanism,\n\t\t\t\tintegration: 'page',\n\t\t\t\t/* eslint-disable camelcase */\n\t\t\t\teditor_interface: editor\n\t\t\t\t/* eslint-enable camelcase */\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Check whether VisualEditor should be loaded\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {bool}\n\t\t */\n\t\tfunction shouldLoadVisualEditor() {\n\t\t\tvar preferredEditor = getPreferredEditor();\n\n\t\t\treturn page.isVESourceAvailable() || (\n\t\t\t\tpage.isVEVisualAvailable() &&\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\t// If the user prefers visual mode or the user has no preference and\n\t\t\t\t\t\t// the visual mode is the default editor for this wiki\n\t\t\t\t\t\tpreferredEditor === 'VisualEditor' ||\n\t\t\t\t\t\t// We've loaded it via the URL for this request\n\t\t\t\t\t\teditorOverride === 'VisualEditor'\n\t\t\t\t\t) &&\n\n\t\t\t\t\teditorOverride !== 'SourceEditor'\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Load source editor\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {jQuery.Promise} Promise resolved with the editor overlay\n\t\t */\n\t\tfunction loadSourceEditor() {\n\t\t\tlogInit( 'wikitext' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\treturn mw.loader.using( 'mobile.editor.overlay' ).then( function () {\n\t\t\t\tvar SourceEditorOverlay = M.require( 'mobile.editor.overlay/SourceEditorOverlay' );\n\t\t\t\treturn new SourceEditorOverlay( editorOptions );\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Load visual editor. If it fails to load for any reason, load the source editor instead.\n\t\t *\n\t\t * @private\n\t\t * @ignore\n\t\t * @method\n\t\t * @return {jQuery.Promise} Promise resolved with the editor overlay\n\t\t */\n\t\tfunction loadVisualEditorMaybe() {\n\t\t\tlogInit( 'visualeditor' );\n\t\t\t// Inform other interested code that we're loading the editor\n\t\t\tmw.hook( 'mobileFrontend.editorOpening' ).fire();\n\n\t\t\teditorOptions.mode = mw.config.get( 'wgMFEnableVEWikitextEditor' ) && getPreferredEditor() === 'SourceEditor' ?\n\t\t\t\t'source' :\n\t\t\t\t'visual';\n\t\t\teditorOptions.dataPromise = mw.loader.using( 'ext.visualEditor.targetLoader' ).then( function () {\n\t\t\t\tabortableDataPromise = mw.libs.ve.targetLoader.requestPageData(\n\t\t\t\t\teditorOptions.mode,\n\t\t\t\t\teditorOptions.titleObj.getPrefixedDb(),\n\t\t\t\t\t{\n\t\t\t\t\t\tsessionStore: true,\n\t\t\t\t\t\tsection: editorOptions.sectionId === undefined ?\n\t\t\t\t\t\t\tnull : editorOptions.sectionId,\n\t\t\t\t\t\toldId: editorOptions.oldId || undefined,\n\t\t\t\t\t\tpreload: editorOptions.preload,\n\t\t\t\t\t\tpreloadparams: editorOptions.preloadparams,\n\t\t\t\t\t\teditintro: editorOptions.editintro,\n\t\t\t\t\t\t// Should be ve.init.mw.MobileArticleTarget.static.trackingName,\n\t\t\t\t\t\t// but the class hasn't loaded yet.\n\t\t\t\t\t\ttargetName: 'mobile'\n\t\t\t\t\t} );\n\t\t\t\treturn abortableDataPromise;\n\t\t\t} );\n\n\t\t\treturn mw.loader.using( 'ext.visualEditor.targetLoader' )\n\t\t\t\t.then( function () {\n\t\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'ext.visualEditor.mobileArticleTarget' );\n\t\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'mobile.editor.overlay' );\n\t\t\t\t\tif ( mw.config.get( 'wgMFEnableVEWikitextEditor' ) ) {\n\t\t\t\t\t\t// Target loader only loads wikitext editor if the desktop\n\t\t\t\t\t\t// preference is set.\n\t\t\t\t\t\t// TODO: Have a cleaner API for this instead of duplicating\n\t\t\t\t\t\t// the module name here.\n\t\t\t\t\t\tmw.libs.ve.targetLoader.addPlugin( 'ext.visualEditor.mwwikitext' );\n\t\t\t\t\t}\n\t\t\t\t\treturn mw.libs.ve.targetLoader.loadModules( editorOptions.mode );\n\t\t\t\t} )\n\t\t\t\t.then( function () {\n\t\t\t\t\tvar VisualEditorOverlay = M.require( 'mobile.editor.overlay/VisualEditorOverlay' ),\n\t\t\t\t\t\tSourceEditorOverlay = M.require( 'mobile.editor.overlay/SourceEditorOverlay' );\n\t\t\t\t\teditorOptions.SourceEditorOverlay = SourceEditorOverlay;\n\t\t\t\t\treturn new VisualEditorOverlay( editorOptions );\n\t\t\t\t}, function () {\n\t\t\t\t\treturn loadSourceEditor();\n\t\t\t\t} );\n\t\t}\n\n\t\tanimationDelayDeferred = util.Deferred();\n\n\t\t// showLoading() has to run after the overlay has opened, which disables page scrolling.\n\t\t// clearLoading() has to run after the loading overlay is hidden in any way\n\t\t// (either when loading is aborted, or when the editor overlay is shown instead).\n\t\tloadingOverlay = editorLoadingOverlay( showLoading, clearLoading );\n\n\t\tif ( shouldLoadVisualEditor() ) {\n\t\t\toverlayPromise = loadVisualEditorMaybe();\n\t\t} else {\n\t\t\toverlayPromise = loadSourceEditor();\n\t\t}\n\n\t\t// Wait for the scroll animation to finish before we show the editor overlay\n\t\tutil.Promise.all( [ overlayPromise, animationDelayDeferred ] ).then( function ( overlay ) {\n\t\t\t// Wait for the data to load before we show the editor overlay\n\t\t\toverlay.getLoadingPromise().then( function () {\n\t\t\t\t// Make sure the user did not close the loading overlay while we were waiting\n\t\t\t\tvar overlayData = overlayManager.stack[0];\n\t\t\t\tif ( !overlayData || overlayData.overlay !== loadingOverlay ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Show the editor!\n\t\t\t\toverlayManager.replaceCurrent( overlay );\n\t\t\t}, function ( error, apiResponse ) {\n\t\t\t\t// Could not load the editor.\n\t\t\t\toverlayManager.router.back();\n\t\t\t\tif ( error.show ) {\n\t\t\t\t\t// Probably a blockMessageDrawer returned because the user is blocked.\n\t\t\t\t\tdocument.body.appendChild( error.$el[ 0 ] );\n\t\t\t\t\terror.show();\n\t\t\t\t} else if ( apiResponse ) {\n\t\t\t\t\tmw.notify( editorOptions.api.getErrorMessage( apiResponse ) );\n\t\t\t\t} else {\n\t\t\t\t\tmw.notify( mw.msg( 'mobile-frontend-editor-error-loading' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn loadingOverlay;\n\t} );\n\n\t$( '#ca-edit a' ).prop( 'href', function ( i, href ) {\n\t\ttry {\n\t\t\tvar editUri = new mw.Uri( href );\n\t\t\t// By default the editor opens section 0 (lead section), rather than the whole article.\n\t\t\t// This might be changed in the future (T210659).\n\t\t\teditUri.query.section = '0';\n\t\t\treturn editUri.toString();\n\t\t} catch ( e ) {\n\t\t\t// T106244 - the href couldn't be parsed likely due to invalid UTF-8\n\t\t\treturn href;\n\t\t}\n\t} );\n\n\t// We use wgAction instead of getParamValue('action') as the former can be\n\t// overridden by hooks to stop the editor loading automatically.\n\tif ( !router.getPath() && ( mw.util.getParamValue( 'veaction' ) || mw.config.get( 'wgAction' ) === 'edit' ) ) {\n\t\tif ( mw.util.getParamValue( 'veaction' ) === 'edit' ) {\n\t\t\teditorOverride = 'VisualEditor';\n\t\t} else if ( mw.util.getParamValue( 'veaction' ) === 'editsource' ) {\n\t\t\teditorOverride = 'SourceEditor';\n\t\t}\n\t\t// else: action=edit, for which we allow the default to take effect\n\t\tfragment = '#/editor/' + ( mw.util.getParamValue( 'section' ) || ( mw.config.get( 'wgAction' ) === 'edit' ? 'all' : '0' ) );\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\tif ( window.history && history.pushState ) {\n\t\t\turi = mw.Uri();\n\t\t\tdelete uri.query.action;\n\t\t\tdelete uri.query.veaction;\n\t\t\tdelete uri.query.section;\n\t\t\t// Note: replaceState rather than pushState, because we're\n\t\t\t// just reformatting the URL to the equivalent-meaning for the\n\t\t\t// mobile site.\n\t\t\thistory.replaceState( null, document.title, uri.toString() + fragment );\n\t\t} else {\n\t\t\trouter.navigate( fragment );\n\t\t}\n\t}\n}\n\n/**\n * Hide any section id icons in the page. This will not hide the edit icon in the page action\n * menu.\n *\n * @method\n * @ignore\n * @param {PageHTMLParser} currentPageHTMLParser\n */\nfunction hideSectionEditIcons( currentPageHTMLParser ) {\n\tcurrentPageHTMLParser.$el.find( '.mw-editsection' ).hide();\n}\n\n/**\n * Show a drawer with log in / sign up buttons.\n *\n * @method\n * @ignore\n * @param {Router} router\n */\nfunction bindEditLinksLoginDrawer( router ) {\n\tvar drawer;\n\tfunction showLoginDrawer() {\n\t\tif ( !drawer ) {\n\t\t\tdrawer = new CtaDrawer( {\n\t\t\t\tcontent: mw.msg( 'mobile-frontend-editor-disabled-anon' ),\n\t\t\t\tsignupQueryParams: {\n\t\t\t\t\twarning: 'mobile-frontend-watchlist-signup-action'\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdocument.body.appendChild( drawer.$el[ 0 ] );\n\t\t}\n\t\tdrawer.show();\n\t}\n\t$editTab.on( 'click', function ( ev ) {\n\t\tshowLoginDrawer();\n\t\tev.preventDefault();\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tshowLoginDrawer();\n\t\t\tev.preventDefault();\n\t\t} );\n\t} );\n\trouter.route( editorPath, function () {\n\t\tshowLoginDrawer();\n\t} );\n\trouter.checkRoute();\n}\n\n/**\n * Setup the editor if the user can edit the page otherwise show a sorry toast.\n *\n * @method\n * @ignore\n * @param {Page} currentPage\n * @param {PageHTMLParser} currentPageHTMLParser\n * @param {Skin} skin\n * @param {Router} router\n */\nfunction init( currentPage, currentPageHTMLParser, skin, router ) {\n\tvar isReadOnly, isEditable, editErrorMessage, editRestrictions;\n\t// see: https://www.mediawiki.org/wiki/Manual:Interface/JavaScript#Page-specific\n\tisReadOnly = mw.config.get( 'wgMinervaReadOnly' );\n\tisEditable = !isReadOnly && mw.config.get( 'wgIsProbablyEditable' );\n\n\tif ( isEditable ) {\n\t\t// Edit button updated in setupEditor.\n\t\tsetupEditor( currentPage, skin, currentPageHTMLParser, router );\n\t} else {\n\t\thideSectionEditIcons( currentPageHTMLParser );\n\t\teditRestrictions = mw.config.get( 'wgRestrictionEdit' );\n\t\tif ( mw.user.isAnon() && Array.isArray( editRestrictions ) && !editRestrictions.length ) {\n\t\t\tbindEditLinksLoginDrawer( router );\n\t\t} else {\n\t\t\tvar $link = $( '<a>' ).attr( 'href', '/wiki/' + mw.config.get( 'wgPageName' ) + '?action=edit' );\n\t\t\teditErrorMessage = isReadOnly ? mw.msg( 'apierror-readonly' ) : mw.message( 'mobile-frontend-editor-disabled', $link ).parseDom();\n\t\t\tbindEditLinksSorryToast( editErrorMessage, router );\n\t\t}\n\t}\n}\n\n/**\n * Wire up events that ensure we\n * show a toast message with sincere condolences when user navigates to\n * #/editor or clicks on an edit button\n *\n * @method\n * @ignore\n * @param {string} msg Message for sorry message\n * @param {Router} router\n */\nfunction bindEditLinksSorryToast( msg, router ) {\n\t$editTab.on( 'click', function ( ev ) {\n\t\tmw.notify( msg );\n\t\tev.preventDefault();\n\t} );\n\tmw.hook( 'wikipage.content' ).add( function ( $content ) {\n\t\t$content.find( EDITSECTION_SELECTOR ).on( 'click', function ( ev ) {\n\t\t\tmw.notify( msg );\n\t\t\tev.preventDefault();\n\t\t} );\n\t} );\n\trouter.route( editorPath, function () {\n\t\tmw.notify( msg );\n\t} );\n\trouter.checkRoute();\n}\n\nmodule.exports = function ( currentPage, currentPageHTMLParser, skin ) {\n\tvar router = mw.loader.require( 'mediawiki.router' );\n\n\tif ( currentPage.inNamespace( 'file' ) && currentPage.id === 0 ) {\n\t\t// Is a new file page (enable upload image only) T60311\n\t\tbindEditLinksSorryToast( mw.msg( 'mobile-frontend-editor-uploadenable' ), router );\n\t} else {\n\t\t// Edit button is currently hidden. A call to init() will update it as needed.\n\t\tinit( currentPage, currentPageHTMLParser, skin, router );\n\t}\n};\n","var\n\tfakeToolbar = require( './fakeToolbar' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Like loadingOverlay(), but with a fake editor toolbar instead of the spinner.\n *\n * @param {Function} afterShow Callback which runs after overlay is shown\n * @param {Function} afterHide Callback which runs after overlay is hidden\n * @return {Overlay}\n */\nfunction editorLoadingOverlay( afterShow, afterHide ) {\n\tvar\n\t\t$fakeToolbar = fakeToolbar(),\n\t\toverlay = new Overlay( {\n\t\t\tclassName: 'overlay overlay-loading',\n\t\t\tnoHeader: true,\n\t\t\tisBorderBox: false,\n\t\t\tonBeforeExit: function ( exit ) {\n\t\t\t\texit();\n\t\t\t\tafterHide();\n\t\t\t}\n\t\t} );\n\n\toverlay.show = function () {\n\t\tOverlay.prototype.show.call( this );\n\t\tafterShow();\n\t};\n\n\t$fakeToolbar.appendTo( overlay.$el.find( '.overlay-content' ) );\n\n\t// Animate the toolbar sliding into place.\n\t$fakeToolbar.addClass( 'toolbar-hidden' );\n\tsetTimeout( function () {\n\t\t$fakeToolbar.addClass( 'toolbar-shown' );\n\t\tsetTimeout( function () {\n\t\t\t$fakeToolbar.addClass( 'toolbar-shown-done' );\n\t\t}, 250 );\n\t} );\n\n\treturn overlay;\n}\n\nmodule.exports = editorLoadingOverlay;\n","/* global $ */\nconst lazyImageLoader = require( '../mobile.startup/lazyImages/lazyImageLoader' );\n\n/**\n * Initialise lazy loading images to supplement the HTML changes inside the\n * MobileFormatter.\n *\n * @param {jQuery} $container\n */\nfunction init( $container ) {\n\tconst imagePlaceholders = lazyImageLoader.queryPlaceholders( $container[ 0 ] );\n\n\t// Regardless of whether or not lazy load is turned on\n\t// We need to load in all images before print\n\twindow.addEventListener( 'beforeprint', function () {\n\t\tlazyImageLoader.loadImages( imagePlaceholders );\n\t} );\n\n\tif ( !mw.config.get( 'wgMFLazyLoadImages' ) ) {\n\t\treturn;\n\t}\n\n\tif ( 'IntersectionObserver' in window ) {\n\t\tconst observer = new IntersectionObserver(\n\t\t\t( entries ) => {\n\t\t\t\tentries.forEach( ( entry ) => {\n\t\t\t\t\tconst placeholder = entry.target;\n\t\t\t\t\t// If intersecting load image and stop observing it to free up resources.\n\t\t\t\t\tif ( entry.isIntersecting ) {\n\t\t\t\t\t\tlazyImageLoader.loadImage( placeholder );\n\t\t\t\t\t\tobserver.unobserve( placeholder );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\t// See https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n\t\t\t{\n\t\t\t\t// Setup the area for observing.\n\t\t\t\t// By default the root is the viewport.\n\t\t\t\t// We want the detection area to be as tall as 150% of the viewport height,\n\t\t\t\t// allowing elements to be detected before they reach the viewport.\n\t\t\t\t// This is achieved with a 50% bottom margin.\n\t\t\t\trootMargin: '0px 0px 50% 0px',\n\t\t\t\t// The default is 0 (meaning as soon as even one pixel is visible,\n\t\t\t\t// the callback will be run), however we explicitly set this so that\n\t\t\t\t// it is clear we have made this choice in case we want to revisit later.\n\t\t\t\tthreshold: 0\n\t\t\t}\n\t\t);\n\n\t\t// observe all the placeholders\n\t\timagePlaceholders.forEach( ( placeholder ) => {\n\t\t\tobserver.observe( placeholder );\n\t\t} );\n\t} else {\n\t\t/**\n\t\t * Adds the following class to identify the tap to click images on\n\t\t * older browsers that do not support IntersectionObserver:\n\t\t * lazy-image-placeholder--tap\n\t\t */\n\t\t// eslint-disable-next-line mediawiki/class-doc\n\t\t$( imagePlaceholders ).addClass( `${lazyImageLoader.placeholderClass}--tap` );\n\n\t\t// Tap to show (see T246767)\n\t\tdocument.addEventListener( 'click', function ( ev ) {\n\t\t\tif ( imagePlaceholders.indexOf( ev.target ) > -1 ) {\n\t\t\t\tlazyImageLoader.loadImage( ev.target );\n\t\t\t}\n\t\t} );\n\t}\n}\n\nmodule.exports = function () {\n\tmw.hook( 'wikipage.content' ).add( init );\n};\n","// FIXME: make this an object with a constructor to facilitate testing\n// (see https://bugzilla.wikimedia.org/show_bug.cgi?id=44264)\n/**\n * mobileFrontend namespace\n *\n * @class mw.mobileFrontend\n * @singleton\n */\nvar skin,\n\turl,\n\t{ USER_FONT_SIZE_REGULAR, USER_FONT_SIZES } = require( '../constants' ),\n\tstorage = mw.storage,\n\ttoggling = require( './toggling' ),\n\tlazyLoadedImages = require( './lazyLoadedImages' ),\n\teditor = require( './editor' ),\n\tcurrentPage = require( '../mobile.startup/currentPage' )(),\n\tcurrentPageHTMLParser = require( '../mobile.startup/currentPageHTMLParser' )(),\n\tmfUtil = require( '../mobile.startup/util' ),\n\t$window = mfUtil.getWindow(),\n\tSkin = require( '../mobile.startup/Skin' ),\n\teventBus = require( '../mobile.startup/eventBusSingleton' );\n\nskin = Skin.getSingleton();\n\n/**\n * Given 2 functions, it returns a function that will run both with it's\n * context and parameters and return the results combined\n *\n * @private\n * @param {Function} fn1\n * @param {Function} fn2\n * @return {Function} which returns void\n */\nfunction apply2( fn1, fn2 ) {\n\treturn function () {\n\t\tfn1.apply( this, arguments );\n\t\tfn2.apply( this, arguments );\n\t};\n}\n\n/**\n * The `window`'s resize event debounced at 100 ms.\n * The `resize:throttled` event is the `window`'s\n * resize event throttled to 200 ms.\n *\n * @event resize\n */\n\n/**\n * The `window`'s scroll event debounced at 100 ms.\n * The `scroll:throttled` event is the `window`'s\n * scroll event throttled to 200 ms.\n *\n * @event scroll\n */\n\n$window\n\t.on( 'resize', apply2(\n\t\tmw.util.debounce( function () { eventBus.emit( 'resize' ); }, 100 ),\n\t\tmw.util.throttle( function () { eventBus.emit( 'resize:throttled' ); }, 200 )\n\t) )\n\t.on( 'scroll', apply2(\n\t\tmw.util.debounce( function () { eventBus.emit( 'scroll' ); }, 100 ),\n\t\tmw.util.throttle( function () { eventBus.emit( 'scroll:throttled' ); }, 200 )\n\t) );\n\n/**\n * Updates the font size based on the current value in storage\n */\nfunction updateFontSize() {\n\tconst userFontSize = storage.get( 'userFontSize', USER_FONT_SIZE_REGULAR );\n\t// The following classes are used here:\n\t// * mf-font-size-small\n\t// * mf-font-size-regular\n\t// * mf-font-size-large\n\t// * mf-font-size-x-large\n\t/* eslint-disable mediawiki/class-doc */\n\tUSER_FONT_SIZES.forEach( function ( fontSize ) {\n\t\tconst fontClass = `mf-font-size-${fontSize}`;\n\t\tif ( fontSize === userFontSize ) {\n\t\t\tdocument.documentElement.classList.add( fontClass );\n\t\t} else {\n\t\t\t// If Safari's back/forward cache is being used the previous class may be present.\n\t\t\tdocument.documentElement.classList.remove( fontClass );\n\t\t}\n\t} );\n\t/* eslint-enable mediawiki/class-doc */\n}\n\n// Hide URL flags used to pass state through reloads\n// venotify is normally handled in ve.init.mw.DesktopArticleTarget.init.js\n// but that's not loaded on mobile\n// eslint-disable-next-line no-restricted-properties\nif ( window.history && history.pushState ) {\n\t// eslint-disable-next-line no-restricted-properties\n\turl = new URL( window.location.href );\n\tif ( url.searchParams.has( 'venotify' ) || url.searchParams.has( 'mfnotify' ) ) {\n\t\turl.searchParams.delete( 'venotify' );\n\t\turl.searchParams.delete( 'mfnotify' );\n\t\t// eslint-disable-next-line no-restricted-properties\n\t\twindow.history.replaceState( null, document.title, url.toString() );\n\t}\n}\n\n// Font must be updated on back button press as users may click\n// back after changing font.\nwindow.addEventListener( 'pageshow', function () {\n\tupdateFontSize();\n} );\n\nupdateFontSize();\n\n// Recruit volunteers through the console\n// (note console.log may not be a function so check via apply)\n/* eslint-disable no-console */\nif ( window.console && window.console.log && window.console.log.apply &&\n\t\tmw.config.get( 'wgMFEnableJSConsoleRecruitment' ) ) {\n\tconsole.log( mw.msg( 'mobile-frontend-console-recruit' ) );\n}\n/* eslint-enable no-console */\n\n// Setup editor, if supported for the current page view\nif ( mw.config.get( 'wgMFIsSupportedEditRequest' ) ) {\n\teditor( currentPage, currentPageHTMLParser, skin );\n}\n\ntoggling();\nlazyLoadedImages();\n","module.exports = function () {\n\tvar\n\t\tcurrentPage = require( '../mobile.startup/currentPage' )(),\n\t\tToggler = require( '../mobile.startup/Toggler' ),\n\t\teventBus = require( '../mobile.startup/eventBusSingleton' );\n\n\t/**\n\t * Initialises toggling code.\n\t *\n\t * @method\n\t * @param {jQuery.Object} $container to enable toggling on\n\t * @param {string} prefix a prefix to use for the id.\n\t * @param {Page} page The current page\n\t * @ignore\n\t */\n\tfunction init( $container, prefix, page ) {\n\t\t// Only handle headings in content processed by MakeSectionsTransform.\n\t\t// Remove event handler added by MakeSectionsTransform::interimTogglingSupport().\n\t\t$container.find( '.section-heading' ).removeAttr( 'onclick' );\n\t\t// Cleanup global as it is no longer needed. We check if it's undefined because\n\t\t// there is no guarantee this won't be run on other skins e.g. Vector or cached HTML.\n\t\tif ( window.mfTempOpenSection !== undefined ) {\n\t\t\tdelete window.mfTempOpenSection;\n\t\t}\n\t\t// eslint-disable-next-line no-new\n\t\tnew Toggler( {\n\t\t\t$container: $container,\n\t\t\tprefix: prefix,\n\t\t\tpage: page,\n\t\t\teventBus: eventBus\n\t\t} );\n\t}\n\n\tif (\n\t\t// Avoid this running on Watchlist.\n\t\t!currentPage.inNamespace( 'special' ) &&\n\t\tmw.config.get( 'wgAction' ) === 'view'\n\t) {\n\t\tmw.hook( 'wikipage.content' ).add( function ( $container ) {\n\t\t\tvar $contentContainer = $container.find( '.mw-parser-output' );\n\t\t\t// If there was no mw-parser-output wrapper, just use the parent.\n\t\t\tif ( $contentContainer.length === 0 ) {\n\t\t\t\t$contentContainer = $container;\n\t\t\t}\n\t\t\tinit( $contentContainer, 'content-', currentPage );\n\t\t} );\n\t}\n};\n"],"sourceRoot":""}