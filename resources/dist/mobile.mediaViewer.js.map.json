{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.mediaViewer/ImageGateway.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/ImageOverlay.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/LoadErrorMessage.js","webpack://mfModules.[name]/./src/mobile.mediaViewer/mobile.mediaViewer.js"],"names":["sizeBuckets","util","__webpack_require__","findSizeBucket","size","i","length","ImageGateway","options","this","_cache","api","prototype","getThumb","title","cachedThumb","$window","getWindow","imageSizeMultiplier","window","devicePixelRatio","get","action","prop","titles","formatversion","iiprop","iiurlwidth","width","iiurlheight","height","then","resp","query","pages","imageinfo","Error","_findSizeBucket","module","exports","Overlay","mfExtend","Icon","icons","Button","LoadErrorMessage","router","mw","loader","require","ImageOverlay","gateway","eventBus","call","extend","className","hasFixedHeader","hideOnExitClick","template","defaults","cancelButton","cancel","toHtmlString","detailsButton","label","msg","additionalClassNames","progressive","licenseLinkMsg","thumbnails","slideLeftButton","rotation","name","slideRightButton","events","click .image-wrapper","click .slider-button","onSlide","ev","nextThumbnail","$","target","closest","data","emit","EVENT_SLIDE","preRender","self","forEach","thumbnail","getFileName","caption","getDescription","galleryOffset","_enableArrowImages","thumbs","lastThumb","nextThumb","offset","undefined","_disableArrowImages","remove","_handleRetry","postRender","$img","removeLoader","hideSpinner","showLoadFailMsg","hasLoadError","hide","retryPath","getPath","on","bind","prependTo","addImageLoadClass","addClass","$details","apply","author","url","descriptionurl","thumbWidth","thumbwidth","thumbHeight","thumbheight","imgRatio","parseHTML","document","attr","thumburl","append","_positionImage","extmetadata","LicenseShortName","text","value","Artist","replace","prepend","adjustDetails","onToggleDetails","toggle","onExitClick","arguments","EVENT_EXIT","show","detailsHeight","windowWidth","windowHeight","windowRatio","is","outerHeight","css","View","isTemplateMode","icon","msgToUser","retryTxt","click .load-fail-msg-link a","onRetry","m","define"],"mappings":"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","file":"mobile.mediaViewer.js","sourcesContent":["var sizeBuckets = [ 320, 640, 800, 1024, 1280, 1920, 2560, 2880 ],\n\tutil = require( './../mobile.startup/util' );\n\n/**\n * Gets the first size larger than or equal to the provided size\n * @memberof ImageGateway\n * @param {number} size\n * @return {number}\n */\nfunction findSizeBucket( size ) {\n\tvar i = 0;\n\twhile ( size > sizeBuckets[i] && i < sizeBuckets.length - 1 ) {\n\t\t++i;\n\t}\n\treturn sizeBuckets[i];\n}\n\n/**\n * API for retrieving image thumbnails for a given page\n * @class ImageGateway\n *\n * @param {Object} options Configuration options\n * @property {mw.Api} options.api\n */\nfunction ImageGateway( options ) {\n\tthis._cache = {};\n\tthis.api = options.api;\n}\n/**\n * Get thumbnail via the API and cache it. Return the result from the cache if exists.\n * @param {string} title Url of image\n * @return {jQuery.Deferred} with the image info\n */\nImageGateway.prototype.getThumb = function ( title ) {\n\tvar cachedThumb = this._cache[title],\n\t\t$window = util.getWindow(),\n\t\timageSizeMultiplier = ( window.devicePixelRatio && window.devicePixelRatio > 1 ) ?\n\t\t\twindow.devicePixelRatio : 1;\n\n\tif ( !cachedThumb ) {\n\t\tthis._cache[title] = this.api.get( {\n\t\t\taction: 'query',\n\t\t\tprop: 'imageinfo',\n\t\t\ttitles: title,\n\t\t\tformatversion: 2,\n\t\t\tiiprop: [ 'url', 'extmetadata' ],\n\t\t\t// request an image devicePixelRatio times bigger than the reported screen size\n\t\t\t// for retina displays and zooming\n\t\t\tiiurlwidth: findSizeBucket( $window.width() * imageSizeMultiplier ),\n\t\t\tiiurlheight: findSizeBucket( $window.height() * imageSizeMultiplier )\n\t\t} ).then( function ( resp ) {\n\t\t\t// imageinfo is undefined for missing pages.\n\t\t\tif ( resp.query && resp.query.pages &&\n\t\t\t\tresp.query.pages[0] && resp.query.pages[0].imageinfo ) {\n\t\t\t\treturn resp.query.pages[0].imageinfo[0];\n\t\t\t}\n\t\t\tthrow new Error( 'The API failed to return any pages matching the titles.' );\n\t\t} );\n\t}\n\n\treturn this._cache[title];\n};\n\nImageGateway._findSizeBucket = findSizeBucket;\nmodule.exports = ImageGateway;\n","var Overlay = require( './../mobile.startup/Overlay' ),\n\tutil = require( './../mobile.startup/util' ),\n\tmfExtend = require( './../mobile.startup/mfExtend' ),\n\tIcon = require( './../mobile.startup/Icon' ),\n\ticons = require( './../mobile.startup/icons' ),\n\tButton = require( './../mobile.startup/Button' ),\n\tLoadErrorMessage = require( './LoadErrorMessage' ),\n\tImageGateway = require( './ImageGateway' ),\n\t// FIXME: mw.loader.require is a private function but there's no other way to get hold of\n\t// this right now using require will cause webpack to resolve it\n\t// Can be rewritten to mw.router when https://gerrit.wikimedia.org/r/#/c/mediawiki/core/+/482732 has been merged\n\trouter = mw.loader.require( 'mediawiki.router' );\n\n/**\n * Displays images in full screen overlay\n * @class ImageOverlay\n * @extends Overlay\n * @uses Icon\n * @uses ImageGateway\n * @uses LoadErrorMessage\n * @uses Router\n * @fires ImageOverlay#ImageOverlay-exit\n * @fires ImageOverlay#ImageOverlay-slide\n * @param {Object} options Configuration options\n * @param {OO.EventEmitter} options.eventBus Object used to listen for resize:throttled events\n */\nfunction ImageOverlay( options ) {\n\tthis.gateway = options.gateway || new ImageGateway( {\n\t\tapi: options.api\n\t} );\n\tthis.router = options.router || router;\n\tthis.eventBus = options.eventBus;\n\n\tOverlay.call( this,\n\t\tutil.extend( {\n\t\t\tclassName: 'overlay media-viewer'\n\t\t}, options )\n\t);\n}\n\nmfExtend( ImageOverlay, Overlay, {\n\t/**\n\t * allow pinch zooming\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\thasFixedHeader: false,\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\thideOnExitClick: false,\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.mediaViewer', 'Overlay.hogan' ),\n\n\t/**\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {mw.Api} defaults.api instance of API to use\n\t * @property {string} defaults.cancelButton HTML of the cancel button.\n\t * @property {Object} defaults.detailsButton options for details button\n\t * @property {string} defaults.licenseLinkMsg Link to license information in media viewer.\n\t * @property {Thumbnail[]} defaults.thumbnails a list of thumbnails to browse\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tcancelButton: icons.cancel( 'gray' ).toHtmlString(),\n\t\tdetailsButton: new Button( {\n\t\t\tlabel: mw.msg( 'mobile-frontend-media-details' ),\n\t\t\tadditionalClassNames: 'button',\n\t\t\tprogressive: true\n\t\t} ).options,\n\t\tlicenseLinkMsg: mw.msg( 'mobile-frontend-media-license-link' ),\n\t\tthumbnails: [],\n\t\tslideLeftButton: new Icon( {\n\t\t\trotation: 90,\n\t\t\tname: 'arrow-invert'\n\t\t} ).toHtmlString(),\n\t\tslideRightButton: new Icon( {\n\t\t\trotation: -90,\n\t\t\tname: 'arrow-invert'\n\t\t} ).toHtmlString()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tevents: util.extend( {}, Overlay.prototype.events, {\n\t\t'click .image-wrapper': 'onToggleDetails',\n\t\t// Click tracking for table of contents so we can see if people interact with it\n\t\t'click .slider-button': 'onSlide'\n\t} ),\n\t/**\n\t * Event handler for slide event\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonSlide: function ( ev ) {\n\t\tvar nextThumbnail = this.$( ev.target ).closest( '.slider-button' ).data( 'thumbnail' );\n\t\tthis.emit( ImageOverlay.EVENT_SLIDE, nextThumbnail );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tpreRender: function () {\n\t\tvar self = this;\n\t\tthis.options.thumbnails.forEach( function ( thumbnail, i ) {\n\t\t\tif ( thumbnail.getFileName() === self.options.title ) {\n\t\t\t\tself.options.caption = thumbnail.getDescription();\n\t\t\t\tself.galleryOffset = i;\n\t\t\t}\n\t\t} );\n\t},\n\t/**\n\t * Setup the next and previous images to enable the user to arrow through\n\t * all images in the set of images given in thumbs.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {Array} thumbs A set of images, which are available\n\t * @private\n\t */\n\t_enableArrowImages: function ( thumbs ) {\n\t\tvar offset = this.galleryOffset,\n\t\t\tlastThumb, nextThumb;\n\n\t\tif ( this.galleryOffset === undefined ) {\n\t\t\t// couldn't find a suitable matching thumbnail so make\n\t\t\t// next slide start at beginning and previous slide be end\n\t\t\tlastThumb = thumbs[thumbs.length - 1];\n\t\t\tnextThumb = thumbs[0];\n\t\t} else {\n\t\t\t// identify last thumbnail\n\t\t\tlastThumb = thumbs[ offset === 0 ? thumbs.length - 1 : offset - 1 ];\n\t\t\tnextThumb = thumbs[ offset === thumbs.length - 1 ? 0 : offset + 1 ];\n\t\t}\n\n\t\tthis.$( '.prev' ).data( 'thumbnail', lastThumb );\n\t\tthis.$( '.next' ).data( 'thumbnail', nextThumb );\n\t},\n\t/**\n\t * Disables the possibility to arrow through all images of the page.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_disableArrowImages: function () {\n\t\tthis.$( '.prev, .next' ).remove();\n\t},\n\n\t/**\n\t * Handler for retry event which triggers when user tries to reload overlay\n\t * after a loading error.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_handleRetry: function () {\n\t\t// A hacky way to simulate a reload of the overlay\n\t\tthis.router.emit( 'hashchange' );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tvar $img,\n\t\t\tthumbs = this.options.thumbnails || [],\n\t\t\tself = this;\n\n\t\t/**\n\t\t * Hide the spinner\n\t\t * @method\n\t\t * @ignore\n\t\t */\n\t\tfunction removeLoader() {\n\t\t\tself.hideSpinner();\n\t\t}\n\n\t\t/**\n\t\t * Display media load failure message\n\t\t * @method\n\t\t * @ignore\n\t\t */\n\t\tfunction showLoadFailMsg() {\n\t\t\tself.hasLoadError = true;\n\n\t\t\tremoveLoader();\n\t\t\t// hide broken image if present\n\t\t\tself.$( '.image img' ).hide();\n\n\t\t\t// show error message if not visible already\n\t\t\tif ( self.$( '.load-fail-msg' ).length === 0 ) {\n\t\t\t\tnew LoadErrorMessage( { retryPath: self.router.getPath() } )\n\t\t\t\t\t.on( 'retry', self._handleRetry.bind( self ) )\n\t\t\t\t\t.prependTo( self.$( '.image' ) );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Start image load transitions\n\t\t * @method\n\t\t * @ignore\n\t\t */\n\t\tfunction addImageLoadClass() {\n\t\t\t$img.addClass( 'image-loaded' );\n\t\t}\n\n\t\tif ( thumbs.length < 2 ) {\n\t\t\tthis._disableArrowImages();\n\t\t} else {\n\t\t\tthis._enableArrowImages( thumbs );\n\t\t}\n\n\t\tthis.$details = this.$( '.details' );\n\n\t\tOverlay.prototype.postRender.apply( this );\n\n\t\tthis.gateway.getThumb( self.options.title ).then( function ( data ) {\n\t\t\tvar author, url = data.descriptionurl + '#mw-jump-to-license';\n\n\t\t\tremoveLoader();\n\n\t\t\tself.thumbWidth = data.thumbwidth;\n\t\t\tself.thumbHeight = data.thumbheight;\n\t\t\tself.imgRatio = data.thumbwidth / data.thumbheight;\n\n\t\t\t// We need to explicitly specify document for context param as jQuery 3\n\t\t\t// will create a new document for the element if the context is\n\t\t\t// undefined. If element is appended to active document, event handlers\n\t\t\t// can fire in both the active document and new document which can cause\n\t\t\t// insidious bugs.\n\t\t\t// (https://api.jquery.com/jquery.parsehtml/#entry-longdesc)\n\t\t\t$img = self.parseHTML( '<img>', document );\n\n\t\t\t// Remove the loader when the image is loaded or display load fail\n\t\t\t// message on failure\n\t\t\t//\n\t\t\t// Error event handler must be attached before error occurs\n\t\t\t// (https://api.jquery.com/error/#entry-longdesc)\n\t\t\t//\n\t\t\t// For the load event, it is more unclear what happens cross-browser when\n\t\t\t// the image is loaded from cache. It seems that a .complete check is\n\t\t\t// needed if attaching the load event after setting the src.\n\t\t\t// (http://stackoverflow.com/questions/910727/jquery-event-for-images-loaded#comment10616132_1110094)\n\t\t\t//\n\t\t\t// However, perhaps .complete check is not needed if attaching load\n\t\t\t// event prior to setting the image src\n\t\t\t// (https://stackoverflow.com/questions/12354865/image-onload-event-and-browser-cache#answer-12355031)\n\t\t\t$img.on( 'load', addImageLoadClass ).on( 'error', showLoadFailMsg );\n\t\t\t$img.attr( 'src', data.thumburl ).attr( 'alt', self.options.caption );\n\t\t\tself.$( '.image' ).append( $img );\n\n\t\t\tself.$details.addClass( 'is-visible' );\n\t\t\tself._positionImage();\n\t\t\tself.$( '.details a' ).attr( 'href', url );\n\t\t\tif ( data.extmetadata ) {\n\t\t\t\t// Add license information\n\t\t\t\tif ( data.extmetadata.LicenseShortName ) {\n\t\t\t\t\tself.$( '.license a' )\n\t\t\t\t\t\t.text( data.extmetadata.LicenseShortName.value )\n\t\t\t\t\t\t.attr( 'href', url );\n\t\t\t\t}\n\t\t\t\t// Add author information\n\t\t\t\tif ( data.extmetadata.Artist ) {\n\t\t\t\t\t// Strip any tags\n\t\t\t\t\tauthor = data.extmetadata.Artist.value.replace( /<.*?>/g, '' );\n\t\t\t\t\tself.$( '.license' ).prepend( author + ' &bull; ' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.adjustDetails();\n\t\t}, function () {\n\t\t\t// retrieving image location failed so show load fail msg\n\t\t\tshowLoadFailMsg();\n\t\t} );\n\n\t\tthis.eventBus.on( 'resize:throttled', this._positionImage.bind( this ) );\n\t},\n\n\t/**\n\t * Event handler that toggles the details bar.\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tonToggleDetails: function () {\n\t\tif ( !this.hasLoadError ) {\n\t\t\tthis.$( '.cancel, .slider-button' ).toggle();\n\t\t\tthis.$details.toggle();\n\t\t\tthis._positionImage();\n\t\t}\n\t},\n\n\t/**\n\t * fixme: remove this redundant function.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @param {Event} ev\n\t */\n\tonExitClick: function ( ev ) {\n\t\tOverlay.prototype.onExitClick.apply( this, arguments );\n\t\tthis.emit( ImageOverlay.EVENT_EXIT, ev );\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tshow: function () {\n\t\tOverlay.prototype.show.apply( this, arguments );\n\t\tthis._positionImage();\n\t},\n\n\t/**\n\t * Fit the image into the window if its dimensions are bigger than the window dimensions.\n\t * Compare window width to height ratio to that of image width to height when setting\n\t * image width or height.\n\t * @memberof ImageOverlay\n\t * @instance\n\t * @private\n\t */\n\t_positionImage: function () {\n\t\tvar detailsHeight, windowWidth, windowHeight, windowRatio, $img,\n\t\t\t$window = util.getWindow();\n\n\t\tthis.adjustDetails();\n\t\t// with a hidden details box we have a little bit more space, we just need to use it\n\t\tdetailsHeight = !this.$details.is( ':visible' ) ? 0 : this.$details.outerHeight();\n\t\twindowWidth = $window.width();\n\t\twindowHeight = $window.height() - detailsHeight;\n\t\twindowRatio = windowWidth / windowHeight;\n\t\t$img = this.$( 'img' );\n\n\t\tif ( this.imgRatio > windowRatio ) {\n\t\t\tif ( windowWidth < this.thumbWidth ) {\n\t\t\t\t$img.css( {\n\t\t\t\t\twidth: windowWidth,\n\t\t\t\t\theight: 'auto'\n\t\t\t\t} );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( windowHeight < this.thumbHeight ) {\n\t\t\t\t$img.css( {\n\t\t\t\t\twidth: 'auto',\n\t\t\t\t\theight: windowHeight\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\tthis.$( '.image-wrapper' ).css( 'bottom', detailsHeight );\n\t},\n\n\t/**\n\t * Function to adjust the height of details section to not more than 50% of window height.\n\t * @memberof ImageOverlay\n\t * @instance\n\t */\n\tadjustDetails: function () {\n\t\tvar windowHeight = util.getWindow().height();\n\t\tif ( this.$( '.details' ).height() > windowHeight * 0.50 ) {\n\t\t\tthis.$( '.details' ).css( 'max-height', windowHeight * 0.50 );\n\t\t}\n\t}\n} );\n\n/**\n * fixme: remove this redundant constant.\n * @memberof ImageOverlay\n * @event\n */\nImageOverlay.EVENT_EXIT = 'ImageOverlay-exit';\n/**\n * @memberof ImageOverlay\n * @event\n */\nImageOverlay.EVENT_SLIDE = 'ImageOverlay-slide';\n\nmodule.exports = ImageOverlay;\n","var util = require( './../mobile.startup/util' ),\n\tmfExtend = require( './../mobile.startup/mfExtend' ),\n\tIcon = require( './../mobile.startup/Icon' ),\n\tView = require( './../mobile.startup/View' );\n\n/**\n * Shows the user a load failure message\n * @class LoadErrorMessage\n * @extends View\n * @fires LoadErrorMessage#retry\n *\n * @param {Object} options Configuration options\n */\nfunction LoadErrorMessage( options ) {\n\tif ( !options.retryPath ) {\n\t\tthrow new Error( '\\'retryPath\\' must be set in options param. Received: ' + options.retryPath );\n\t}\n\n\tView.apply( this, arguments );\n}\n\nmfExtend( LoadErrorMessage, View, {\n\ttemplate: mw.template.get( 'mobile.mediaViewer', 'LoadErrorMessage.hogan' ),\n\tisTemplateMode: true,\n\n\t/**\n\t\t* @inheritdoc\n\t\t* @cfg {Object} defaults Default options hash.\n\t\t* @cfg {string} defaults.icon HTML of the alert icon\n\t\t* @cfg {string} defaults.msgToUser Message shown when media load fails\n\t\t* @cfg {string} defaults.retryTxt Text of retry link\n\t\t* @memberof LoadErrorMessage\n\t\t* @instance\n\t\t*/\n\tdefaults: util.extend( {}, LoadErrorMessage.prototype.defaults, {\n\t\ticon: new Icon( {\n\t\t\tname: 'alert-invert',\n\t\t\tadditionalClassNames: 'load-fail-msg-icon'\n\t\t} ).toHtmlString(),\n\t\tmsgToUser: mw.msg( 'mobile-frontend-media-load-fail-message' ),\n\t\tretryTxt: mw.msg( 'mobile-frontend-media-load-fail-retry' )\n\t} ),\n\n\t/**\n\t * @inheritdoc\n\t * @memberof LoadErrorMessage\n\t * @instance\n\t */\n\tevents: {\n\t\t'click .load-fail-msg-link a': 'onRetry'\n\t},\n\n\t/**\n\t * @inheritdoc\n\t * @memberof LoadErrorMessage\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tthis.$( '.load-fail-msg-link a' ).attr( 'href', '#' + this.options.retryPath );\n\t},\n\n\t/**\n\t * Event handler for retry event\n\t * @param {jQuery.Event} ev\n\t * @return {boolean} Returns false to prevent default behavior for links and\n\t * stop the event from propagating\n\t * @memberof LoadErrorMessage\n\t * @instance\n\t */\n\tonRetry: function () {\n\t\t/**\n\t\t * Triggered when retry button is clicked.\n\t\t * @event LoadErrorMessage#retry\n\t\t */\n\t\tthis.emit( 'retry' );\n\n\t\treturn false;\n\t}\n} );\n\nmodule.exports = LoadErrorMessage;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tImageOverlay = require( './ImageOverlay' );\n\n// Expose for Minerva\nm.define( 'mobile.mediaViewer/ImageOverlay', ImageOverlay );\n"],"sourceRoot":""}