{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkBoard.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionAddOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/autosign.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/mobile.talk.overlays.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/talkOverlay.js"],"names":["util","__webpack_require__","mfExtend","View","PageGateway","icons","Page","TalkBoard","options","this","eventBus","pageGateway","api","call","extend","className","isTemplateMode","template","mw","get","postRender","prototype","$el","append","spinner","$spinner","$","$board","headings","_loadContent","on","bind","showSpinner","hide","show","hideSpinner","self","empty","getPage","title","then","pageData","_addContent","resp","sections","onFail","window","location","getUrl","page","getSections","explanation","length","msg","render","module","exports","Overlay","autosign","toast","Icon","TalkSectionAddOverlay","editorApi","events","input .wikitext-editor, .summary","change .wikitext-editor, .summary","click .confirm-save","currentPageTitle","_saveHit","defaults","cancelMsg","topicTitlePlaceHolder","topicContentPlaceHolder","editingMsg","waitMsg","waitIcon","name","additionalClassNames","toHtmlString","templatePartials","contentHeader","saveHeader","showHidden","$confirm","$subject","$ta","confirmMessage","val","confirm","apply","arguments","onTextInput","clearTimeout","timer","setTimeout","trim","prop","onSaveClick","isOnTalkPage","save","status","emit","invalidatePage","error","editMsg","details","heading","d","Deferred","text","removeClass","addClass","postWithToken","action","section","sectiontitle","summary","reject","type","user","popup","Button","TalkSectionOverlay","focus textarea","click .save-button","header","content","saveButton","block","progressive","label","undefined","reply","info","$saveButton","_enableComments","renderFromApi","$commentBox","isAnon","remove","$textarea","find","getSection","id","onFocusTextarea","enableSaveButton","appendtext","redirect","data","response","indexOf","code","test","m","talkOverlay","define","deprecate","Anchor","overlay","board","headerButtonsListClassName","headerButtons","href","footerAnchor"],"mappings":"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","file":"mobile.talk.overlays.js","sourcesContent":["var\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tView = require( '../mobile.startup/View' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tPage = require( '../mobile.startup/Page' );\n/**\n * Board of talk topics\n * @class TalkBoard\n * @extends View\n * @uses Page\n * @uses PageGateway\n * @param {Object} options\n * @param {Section[]} [options.headings] for rendering heading links.\n *   Api will be used if absent.\n * @param {mw.Api} options.api\n * @param {OO.EventEmitter} options.eventBus Object used to listen for\n * talk-discussion-added events\n */\nfunction TalkBoard( options ) {\n\tthis.eventBus = options.eventBus;\n\tthis.pageGateway = new PageGateway( options.api );\n\tView.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-board'\n\t\t} )\n\t);\n}\n\nmfExtend( TalkBoard, View, {\n\tisTemplateMode: true,\n\ttemplate: mw.template.get( 'mobile.talk.overlays', 'TalkBoard.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\tpostRender: function ( options ) {\n\t\tView.prototype.postRender.call( this, options );\n\t\tthis.$el.append( icons.spinner().$el );\n\t\tthis.$spinner = this.$( '.spinner' );\n\t\tthis.$board = this.$( '.board' );\n\t\tif ( !this.options.headings ) {\n\t\t\tthis._loadContent( this.options );\n\t\t}\n\t\tthis.eventBus.on( 'talk-discussion-added', this._loadContent.bind( this ) );\n\t},\n\n\t/**\n\t * Show a loading spinner\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\tshowSpinner: function () {\n\t\tthis.$board.hide();\n\t\tthis.$spinner.show();\n\t},\n\n\t/**\n\t * Hide the loading spinner\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\thideSpinner: function () {\n\t\tthis.$spinner.hide();\n\t\tthis.$board.show();\n\t},\n\n\t/**\n\t * Load content of the talk page into the overlay\n\t * @memberof TalkBoard\n\t * @instance\n\t * @param {Object} options for the overlay\n\t * @private\n\t */\n\t_loadContent: function ( options ) {\n\t\tvar self = this;\n\t\toptions = options || this.options;\n\n\t\t// show a spinner\n\t\tthis.showSpinner();\n\t\t// clear actual content, if any\n\t\tthis.$( '.topic-title-list' ).empty();\n\n\t\tthis.pageGateway.getPage( options.title ).then( function ( pageData ) {\n\t\t\tself._addContent( pageData, options );\n\t\t}, function ( resp ) {\n\t\t\t// If the API returns the error code 'missingtitle', that means the\n\t\t\t// talk page doesn't exist yet.\n\t\t\tif ( resp === 'missingtitle' ) {\n\t\t\t\t// Create an empty page for new pages\n\t\t\t\tself._addContent( {\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tsections: []\n\t\t\t\t}, options );\n\t\t\t} else {\n\t\t\t\tif ( self.options.onFail ) {\n\t\t\t\t\t// Run failure callback with current title\n\t\t\t\t\tself.options.onFail( options.title );\n\t\t\t\t} else {\n\t\t\t\t\t// If the API request fails for any other reason, load the talk\n\t\t\t\t\t// page manually rather than leaving the spinner spinning.\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( options.title );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * Adds the content received from _loadContent to the Overlay and re-renders it.\n\t * @memberof TalkBoard\n\t * @instance\n\t * @private\n\t * @param {Object} pageData As returned from PageApi#getPage\n\t * @param {Object} options for the overlay\n\t */\n\t_addContent: function ( pageData, options ) {\n\t\tvar page = new Page( pageData ),\n\t\t\tsections = page.getSections();\n\n\t\tthis.page = page;\n\n\t\toptions.explanation = sections.length > 0 ? mw.msg( 'mobile-frontend-talk-explained' ) :\n\t\t\tmw.msg( 'mobile-frontend-talk-explained-empty' );\n\t\toptions.headings = sections;\n\n\t\t// content is there so re-render and hide the spinner\n\t\tthis.render( options );\n\t\tthis.hideSpinner();\n\t}\n} );\n\nmodule.exports = TalkBoard;\n","var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tutil = require( '../mobile.startup/util' ),\n\tautosign = require( './autosign' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tIcon = require( '../mobile.startup/Icon' );\n\n/**\n * Overlay for adding a talk section\n * @class TalkSectionAddOverlay\n * @extends Overlay\n * @uses Toast\n *\n * @param {Object} options Configuration options\n * @param {Object} options.title Title of the talk page being modified\n * @param {Object} options.currentPageTitle Title of the page before the overlay appears\n * @param {OO.EventEmitter} options.eventBus Object used to emit talk-added-wo-overlay\n * and talk-discussion-added events\n */\nfunction TalkSectionAddOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'input .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'change .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'click .confirm-save': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n\tthis.title = options.title;\n\tthis.currentPageTitle = options.currentPageTitle;\n\tthis.eventBus = options.eventBus;\n\t// Variable to indicate, if the overlay will be closed by the save function\n\t// or by the user. If this is false and there is content in the input fields,\n\t// the user will be asked, if he want to abandon his changes before we close\n\t// the Overlay, otherwise the Overlay will be closed without any question.\n\tthis._saveHit = false;\n}\n\nmfExtend( TalkSectionAddOverlay, Overlay, {\n\t/**\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.cancelMsg Caption for cancel button on edit form.\n\t * @property {string} defaults.topicTitlePlaceHolder Placeholder text to prompt user to add\n\t * a talk page topic subject.\n\t * @property {string} defaults.topicContentPlaceHolder Placeholder text to prompt user\n\t *  to add content to talk page content.\n\t * @property {string} defaults.editingMsg Label for button which\n\t *  submits a new talk page topic.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tcancelMsg: mw.msg( 'mobile-frontend-editor-cancel' ),\n\t\ttopicTitlePlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-subject-placeholder' ),\n\t\ttopicContentPlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-content-placeholder' ),\n\t\teditingMsg: mw.msg( 'mobile-frontend-talk-add-overlay-submit' ),\n\t\twaitMsg: mw.msg( 'mobile-frontend-talk-topic-wait' ),\n\t\t// icons.spinner can't be used, .loading has a fixed height, which breaks overlay-header\n\t\twaitIcon: new Icon( {\n\t\t\tname: 'spinner',\n\t\t\tadditionalClassNames: 'savespinner loading'\n\t\t} ).toHtmlString()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontentHeader: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay/contentHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.call( this );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.$confirm = this.$( 'button.confirm-save' );\n\t\tthis.$subject = this.$( '.summary' );\n\t\tthis.$ta = this.$( '.wikitext-editor' );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\thide: function () {\n\t\tvar empty,\n\t\t\tconfirmMessage = mw.msg( 'mobile-frontend-editor-cancel-confirm' );\n\n\t\tempty = ( !this.$subject.val() && !this.$ta.val() );\n\t\t// TODO: Replace with an OOUI dialog\n\t\tif ( this._saveHit || empty || window.confirm( confirmMessage ) ) {\n\t\t\treturn Overlay.prototype.hide.apply( this, arguments );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t/**\n\t * Handles an input into a textarea and enables or disables the submit button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonTextInput: function () {\n\t\tvar self = this;\n\n\t\tclearTimeout( this.timer );\n\t\tthis.timer = setTimeout( function () {\n\t\t\tif ( !self.$ta.val().trim() || !self.$subject.val().trim() ) {\n\t\t\t\tself.$confirm.prop( 'disabled', true );\n\t\t\t} else {\n\t\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\t}\n\t\t}, 250 );\n\t},\n\t/**\n\t * Handles a click on the save button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar self = this,\n\t\t\tisOnTalkPage = self.title === self.currentPageTitle;\n\n\t\tthis.showHidden( '.saving-header' );\n\t\tthis.save().then( function ( status ) {\n\t\t\tif ( status === 'ok' ) {\n\t\t\t\tif ( isOnTalkPage ) {\n\t\t\t\t\tself.eventBus.emit( 'talk-added-wo-overlay' );\n\t\t\t\t} else {\n\t\t\t\t\tself.pageGateway.invalidatePage( self.title );\n\t\t\t\t\ttoast.show( mw.msg( 'mobile-frontend-talk-topic-feedback' ) );\n\t\t\t\t\tself.eventBus.emit( 'talk-discussion-added' );\n\t\t\t\t\tself.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}, function ( error ) {\n\t\t\tvar editMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\n\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\tswitch ( error.details ) {\n\t\t\t\tcase 'protectedpage':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-protected' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noedit':\n\t\t\t\tcase 'blocked':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-permission' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spamdetected':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-spam' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'badtoken':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-badtoken' );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttoast.show( editMsg, 'error' );\n\t\t\tself.showHidden( '.save-header, .save-panel' );\n\t\t} );\n\t},\n\t/**\n\t * Save new talk section\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @return {jQuery.Deferred} Object that either will be resolved with ok parameter\n\t * or rejected with type error.\n\t */\n\tsave: function () {\n\t\tvar heading = this.$subject.val(),\n\t\t\tself = this,\n\t\t\td = util.Deferred(),\n\t\t\ttext = this.$ta.val();\n\n\t\tthis.$ta.removeClass( 'error' );\n\t\tthis.$subject.removeClass( 'error' );\n\n\t\t// propagate, that we save an edit and want to close the Overlay without\n\t\t// any interruption (user questions e.g.)\n\t\tthis._saveHit = true;\n\n\t\tthis.$( '.content' ).empty().addClass( 'loading' );\n\t\t// FIXME: while saving: a spinner would be nice\n\t\t// FIXME: This should be using a gateway e.g. TalkGateway, PageGateway or EditorGateway\n\t\treturn this.editorApi.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\tsection: 'new',\n\t\t\tsectiontitle: heading,\n\t\t\ttitle: self.title,\n\t\t\tsummary: mw.msg( 'newsectionsummary', heading ),\n\t\t\ttext: autosign( text )\n\t\t} ).then( function () {\n\t\t\treturn 'ok';\n\t\t}, function ( msg ) {\n\t\t\t// FIXME: Throw an Error\n\t\t\treturn d.reject( {\n\t\t\t\ttype: 'error',\n\t\t\t\tdetails: msg\n\t\t\t} );\n\t\t} );\n\t}\n} );\n\nmodule.exports = TalkSectionAddOverlay;\n","var\n\tuser = mw.user,\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tpopup = require( '../mobile.startup/toast' ),\n\tautosign = require( './autosign' ),\n\tPage = require( '../mobile.startup/Page' ),\n\tButton = require( '../mobile.startup/Button' );\n\n/**\n * Overlay for showing talk page section\n * @class TalkSectionOverlay\n * @extends Overlay\n * @uses PageGateway\n * @uses Page\n * @uses Button\n * @uses Toast\n * @param {Object} options\n */\nfunction TalkSectionOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'focus textarea': 'onFocusTextarea',\n\t\t\t\t'click .save-button': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n}\n\nmfExtend( TalkSectionOverlay, Overlay, {\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\theader: mw.template.get( 'mobile.talk.overlays', 'Section/header.hogan' ),\n\t\tcontent: mw.template.get( 'mobile.talk.overlays', 'Section/content.hogan' )\n\t} ),\n\t/**\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.title Title.\n\t * @property {Section} defaults.section that is currently being viewed in overlay.\n\t * @property {string} defaults.reply Reply heading.\n\t * @property {string} defaults.info Message that informs the user their talk reply will be\n\t * automatically signed.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tsaveButton: new Button( {\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'save-button',\n\t\t\tprogressive: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-editor-save' )\n\t\t} ).options,\n\t\ttitle: undefined,\n\t\tsection: undefined,\n\t\treply: mw.msg( 'mobile-frontend-talk-reply' ),\n\t\tinfo: mw.msg( 'mobile-frontend-talk-reply-info' )\n\t} ),\n\t/**\n\t * Fetches the talk topics of the page specified in options.title\n\t * if options.section is not defined.\n\t * @inheritdoc\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\tthis.$saveButton = this.$( '.save-button' );\n\t\tif ( !this.options.section ) {\n\t\t\tthis.renderFromApi( this.options );\n\t\t} else {\n\t\t\tthis.hideSpinner();\n\t\t\tthis._enableComments();\n\t\t}\n\t},\n\t/**\n\t * Enables comments on the current rendered talk topic\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @private\n\t */\n\t_enableComments: function () {\n\t\tthis.$commentBox = this.$( '.comment' );\n\t\tif ( user.isAnon() ) {\n\t\t\tthis.$commentBox.remove();\n\t\t} else {\n\t\t\tthis.$textarea = this.$commentBox.find( 'textarea' );\n\t\t}\n\t},\n\t/**\n\t * Loads the discussion from api and add it to the Overlay\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @param {Object} options Render options\n\t */\n\trenderFromApi: function ( options ) {\n\t\tvar self = this;\n\n\t\tthis.pageGateway.getPage( options.title ).then( function ( pageData ) {\n\t\t\tvar page = new Page( pageData );\n\t\t\toptions.section = page.getSection( options.id );\n\t\t\tself.render( options );\n\t\t\tself.hideSpinner();\n\t\t} );\n\t},\n\t/**\n\t * Handler for focus of textarea\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonFocusTextarea: function () {\n\t\tthis.$textarea.removeClass( 'error' );\n\t},\n\t/**\n\t * Handle a click on the save button\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar val = this.$textarea.val(),\n\t\t\tself = this;\n\n\t\tfunction enableSaveButton() {\n\t\t\tself.$saveButton.prop( 'disabled', false );\n\t\t}\n\t\tif ( val ) {\n\t\t\t// show a spinner\n\t\t\tthis.showSpinner();\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t\t// sign and add newline to front\n\t\t\tval = '\\n\\n' + autosign( val );\n\t\t\t// FIXME: This should be using a gateway\n\t\t\t// e.g. TalkGateway, PageGateway or EditorGateway\n\t\t\tthis.editorApi.postWithToken( 'csrf', {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: this.options.title,\n\t\t\t\tsection: this.options.id,\n\t\t\t\tappendtext: val,\n\t\t\t\tredirect: true\n\t\t\t} ).then( function () {\n\t\t\t\tpopup.show( mw.msg( 'mobile-frontend-talk-reply-success' ) );\n\t\t\t\t// invalidate the cache\n\t\t\t\tself.pageGateway.invalidatePage( self.options.title );\n\n\t\t\t\tself.renderFromApi( self.options );\n\n\t\t\t\tenableSaveButton();\n\t\t\t}, function ( data, response ) {\n\t\t\t\t// FIXME: Code sharing with EditorOverlay?\n\t\t\t\tvar msg,\n\t\t\t\t\t// When save failed with one of these error codes, the returned\n\t\t\t\t\t// message in response.error.info will be forwarded to the user.\n\t\t\t\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\t\t\t\twhitelistedErrorInfo = [\n\t\t\t\t\t\t'readonly',\n\t\t\t\t\t\t'blocked',\n\t\t\t\t\t\t'autoblocked'\n\t\t\t\t\t];\n\n\t\t\t\tif (\n\t\t\t\t\tresponse.error &&\n\t\t\t\t\twhitelistedErrorInfo.indexOf( response.error.code ) > -1\n\t\t\t\t) {\n\t\t\t\t\tmsg = response.error.info;\n\t\t\t\t} else {\n\t\t\t\t\tmsg = mw.msg( 'mobile-frontend-editor-error' );\n\t\t\t\t}\n\n\t\t\t\tself.hideSpinner();\n\t\t\t\tpopup.show( msg, 'toast error' );\n\n\t\t\t\tenableSaveButton();\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.$textarea.addClass( 'error' );\n\t\t}\n\t}\n} );\n\nmodule.exports = TalkSectionOverlay;\n","/**\n * Autosign a block of text if necessary\n * @instance\n * @param {string} text\n * @return {string} text with an autosign (\"~~~~\") if necessary\n */\nfunction autosign( text ) {\n\treturn /~{3,5}/.test( text ) ? text : text + ' ~~~~';\n}\n\nmodule.exports = autosign;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\ttalkOverlay = require( './talkOverlay' ),\n\tTalkSectionAddOverlay = require( './TalkSectionAddOverlay' ),\n\tTalkSectionOverlay = require( './TalkSectionOverlay' );\n\n// needed for minerva usages\nm.define( 'mobile.talk.overlays/talkOverlay', talkOverlay );\nm.deprecate( 'mobile.talk.overlays/TalkOverlay', talkOverlay,\n\t'mobile.talk.overlays/talkOverlay' );\nm.define( 'mobile.talk.overlays/TalkSectionAddOverlay', TalkSectionAddOverlay );\nm.define( 'mobile.talk.overlays/TalkSectionOverlay', TalkSectionOverlay ); // resource-modules-disable-line\n","var\n\tuser = mw.user,\n\tTalkBoard = require( './TalkBoard' ),\n\tAnchor = require( '../mobile.startup/Anchor' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Produce an overlay for talk page\n * @uses Overlay\n * @param {Object} options\n * @param {Api} options.api\n * @return {Overlay}\n */\nfunction talkOverlay( options ) {\n\tvar overlay,\n\t\tboard = new TalkBoard( options );\n\toverlay = new Overlay( {\n\t\theading: '<strong>' + mw.msg( 'mobile-frontend-talk-overlay-header' ) + '</strong>',\n\t\theaderButtonsListClassName: 'header-action',\n\t\theaderButtons: [ user.isAnon() ? {} : {\n\t\t\thref: '#/talk/new',\n\t\t\tclassName: 'add continue',\n\t\t\tmsg: mw.msg( 'mobile-frontend-talk-add-overlay-submit' )\n\t\t} ],\n\t\tfooterAnchor: new Anchor( {\n\t\t\tprogressive: true,\n\t\t\thref: mw.util.getUrl( options.title ),\n\t\t\tadditionalClassNames: 'footer-link talk-fullpage',\n\t\t\tlabel: mw.msg( 'mobile-frontend-talk-fullpage' )\n\t\t} ).options,\n\t\tclassName: 'talk-overlay overlay'\n\t} );\n\toverlay.$( '.overlay-content' ).append( board.$el );\n\treturn overlay;\n}\n\nmodule.exports = talkOverlay;\n"],"sourceRoot":""}