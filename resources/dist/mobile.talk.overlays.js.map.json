{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.talk.overlays/AddTopicForm.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionAddOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/autosign.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/makeAddTopicForm.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/mobile.talk.overlays.js"],"names":["mfExtend","require","View","util","makePanel","$child","panel","className","$el","append","AddTopicForm","options","call","this","extend","topicTitlePlaceHolder","mw","msg","topicContentPlaceHolder","events","input .wikitext-editor, input","change .wikitext-editor, input","postRender","disabled","$subject","parseHTML","attr","class","type","value","subject","placeholder","$body","cols","rows","val","body","panels","addClass","html","licenseMsg","map","$messageBody","prototype","apply","arguments","onTextInput","trim","test","module","exports","headers","Overlay","PageGateway","makeAddTopicForm","toast","TalkSectionAddOverlay","editorApi","api","pageGateway","onBeforeExit","bind","click .save","onSaveComplete","title","currentPageTitle","_saveHit","preRender","saveHeader","savingHeader","topicForm","showHidden","$confirm","find","$ta","exit","empty","confirmMessage","window","confirm","clearTimeout","timer","setTimeout","prop","onSaveClick","save","then","status","error","editMsg","details","show","heading","d","Deferred","removeClass","postWithToken","action","section","sectiontitle","summary","text","reject","user","icons","$spinner","spinner","header","popup","autosign","Button","TalkSectionOverlay","state","click","ev","target","tagName","indexOf","preventDefault","input textarea","focus textarea","click .save-button","templatePartials","content","template","defaults","saveButton","block","additionalClassNames","progressive","label","saveButtonMessage","undefined","reply","info","onInputTextarea","cancel","line","back","prepend","$saveButton","hideSpinner","_enableComments","$commentBox","isAnon","remove","$textarea","onFocusTextarea","self","showSpinner","id","appendtext","redirect","data","response","code","_ref","m","define"],"mappings":"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","file":"mobile.talk.overlays.js","sourcesContent":["const\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tView = require( '../mobile.startup/View' ),\n\tutil = require( '../mobile.startup/util' );\n\n/**\n * Create a panel with a child\n * @param {jQuery.Object} $child\n * @return {Panel}\n */\nfunction makePanel( $child ) {\n\tconst panel = new View( { className: 'panel' } );\n\tpanel.$el.append( $child );\n\treturn panel;\n}\n\n/**\n * Form for adding a talk section\n * @class AddTopicForm\n * @extends View\n *\n * @param {Object} options Configuration options\n * @param {string} options.licenseMsg license text (HTML strings accepted)\n * @param {Function} options.onTextInput callback for when text changes\n * @param {string} options.subject to prefill form with\n * @param {string} options.body to prefill form with\n * @param {boolean} options.disabled to mark the form inputs as disabled\n */\nfunction AddTopicForm( options ) {\n\tView.call( this,\n\t\tutil.extend( options, {\n\t\t\t// Template properties\n\t\t\ttopicTitlePlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-subject-placeholder' ),\n\t\t\ttopicContentPlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-content-placeholder' ),\n\n\t\t\t// Additional data\n\t\t\tclassName: 'add-topic-form',\n\t\t\tevents: {\n\t\t\t\t'input .wikitext-editor, input': 'onTextInput',\n\t\t\t\t'change .wikitext-editor, input': 'onTextInput'\n\t\t\t}\n\t\t} )\n\t);\n}\n\nmfExtend( AddTopicForm, View, {\n\t/**\n\t * @inheritdoc\n\t * @memberof AddTopicForm\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tconst options = this.options,\n\t\t\tdisabled = options.disabled,\n\t\t\t$subject = util.parseHTML( '<input>' ).attr( {\n\t\t\t\tclass: 'mw-ui-input',\n\t\t\t\ttype: 'text',\n\t\t\t\tdisabled,\n\t\t\t\tvalue: options.subject,\n\t\t\t\tplaceholder: options.topicTitlePlaceHolder\n\t\t\t} ),\n\t\t\t$body = util.parseHTML( '<textarea>' ).attr( {\n\t\t\t\tclass: 'wikitext-editor mw-ui-input',\n\t\t\t\tcols: 40,\n\t\t\t\trows: 10,\n\t\t\t\tdisabled,\n\t\t\t\tplaceholder: options.topicContentPlaceHolder\n\t\t\t} ).val( options.body ),\n\t\t\tpanels = [\n\t\t\t\tmakePanel( util.parseHTML( '<p>' ).addClass( 'license' ).html( options.licenseMsg ) ),\n\t\t\t\tmakePanel( $subject ),\n\t\t\t\tmakePanel( $body )\n\t\t\t];\n\n\t\tthis.$el.append(\n\t\t\tpanels.map( function ( panel ) {\n\t\t\t\treturn panel.$el;\n\t\t\t} )\n\t\t);\n\t\tthis.$subject = $subject;\n\t\tthis.$messageBody = $body;\n\t\tView.prototype.postRender.apply( this, arguments );\n\t},\n\t/**\n\t * Handles an input into a textarea and enables or disables the submit button\n\t * @memberof AddTopicForm\n\t * @instance\n\t */\n\tonTextInput: function () {\n\t\tif ( this.options.onTextInput ) {\n\t\t\tthis.options.onTextInput( this.$subject.val().trim(), this.$messageBody.val().trim() );\n\t\t}\n\t}\n} );\n\nAddTopicForm.test = {\n\tmakePanel\n};\n\nmodule.exports = AddTopicForm;\n","var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\theaders = require( '../mobile.startup/headers' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tutil = require( '../mobile.startup/util' ),\n\tmakeAddTopicForm = require( './makeAddTopicForm' ),\n\ttoast = require( '../mobile.startup/toast' );\n\n/**\n * Overlay for adding a talk section\n * @class TalkSectionAddOverlay\n * @extends Overlay\n *\n * @param {Object} options Configuration options\n * @param {mw.Api} options.api\n * @param {Object} options.title Title of the talk page being modified\n * @param {string} options.licenseMsg\n * @param {Object} options.currentPageTitle Title of the page before the overlay appears\n * @param {Function} [options.onSaveComplete] executed when a save has completed\n * and talk-discussion-added events\n */\nfunction TalkSectionAddOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tonBeforeExit: this.onBeforeExit.bind( this ),\n\t\t\tevents: {\n\t\t\t\t'click .save': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n\tthis.onSaveComplete = options.onSaveComplete;\n\tthis.title = options.title;\n\tthis.currentPageTitle = options.currentPageTitle;\n\t// Variable to indicate, if the overlay will be closed by the save function\n\t// or by the user. If this is false and there is content in the input fields,\n\t// the user will be asked, if he want to abandon his changes before we close\n\t// the Overlay, otherwise the Overlay will be closed without any question.\n\tthis._saveHit = false;\n}\n\nmfExtend( TalkSectionAddOverlay, Overlay, {\n\tpreRender: function () {\n\t\tthis.options.headers = [\n\t\t\t// contentHeader\n\t\t\theaders.saveHeader(\n\t\t\t\tmw.msg( 'mobile-frontend-talk-add-overlay-submit' ),\n\t\t\t\t'initial-header save-header'\n\t\t\t),\n\t\t\theaders.savingHeader( mw.msg( 'mobile-frontend-talk-topic-wait' ) )\n\t\t];\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tlet topicForm;\n\t\tOverlay.prototype.postRender.call( this );\n\t\ttopicForm = makeAddTopicForm( {\n\t\t\tsubject: '',\n\t\t\tbody: '',\n\t\t\tdisabled: false,\n\t\t\tlicenseMsg: this.options.licenseMsg,\n\t\t\tonTextInput: this.onTextInput.bind( this )\n\t\t} );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.$confirm = this.$el.find( 'button.save' );\n\t\tthis.$el.find( '.overlay-content' ).append( topicForm.$el );\n\t\tthis.$subject = topicForm.$el.find( 'input' );\n\t\tthis.$ta = topicForm.$el.find( '.wikitext-editor' );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonBeforeExit: function ( exit ) {\n\t\tvar empty,\n\t\t\tconfirmMessage = mw.msg( 'mobile-frontend-editor-cancel-confirm' );\n\n\t\tempty = ( !this.$subject.val() && !this.$ta.val() );\n\t\t// TODO: Replace with an OOUI dialog\n\t\tif ( this._saveHit || empty || window.confirm( confirmMessage ) ) {\n\t\t\texit();\n\t\t}\n\t},\n\t/**\n\t * Handles an input into a textarea and enables or disables the submit button\n\t * @memberof TalkSectionAddOverlay\n\t * @param {string} subject\n\t * @param {string} body\n\t * @instance\n\t */\n\tonTextInput: function ( subject, body ) {\n\t\tthis.subject = subject;\n\t\tthis.body = body;\n\n\t\tclearTimeout( this.timer );\n\t\tthis.timer = setTimeout( function () {\n\t\t\tif ( !body || !subject ) {\n\t\t\t\tthis.$confirm.prop( 'disabled', true );\n\t\t\t} else {\n\t\t\t\tthis.$confirm.prop( 'disabled', false );\n\t\t\t}\n\t\t}.bind( this ), 250 );\n\t},\n\t/**\n\t * Handles a click on the save button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tthis.showHidden( '.saving-header' );\n\t\tthis.save().then( function ( status ) {\n\t\t\tif ( status === 'ok' && this.options.onSaveComplete ) {\n\t\t\t\tthis.onSaveComplete();\n\t\t\t}\n\t\t}.bind( this ), function ( error ) {\n\t\t\tvar editMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\n\t\t\tthis.$confirm.prop( 'disabled', false );\n\t\t\tswitch ( error.details ) {\n\t\t\t\tcase 'protectedpage':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-protected' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noedit':\n\t\t\t\tcase 'blocked':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-permission' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spamdetected':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-spam' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'badtoken':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-badtoken' );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttoast.show( editMsg, { type: 'error' } );\n\t\t\tthis.showHidden( '.save-header, .save-panel' );\n\t\t}.bind( this ) );\n\t},\n\t/**\n\t * Save new talk section\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @return {jQuery.Deferred} Object that either will be resolved with ok parameter\n\t * or rejected with type error.\n\t */\n\tsave: function () {\n\t\tvar heading = this.subject,\n\t\t\td = util.Deferred();\n\n\t\tthis.$ta.removeClass( 'error' );\n\t\tthis.$subject.removeClass( 'error' );\n\n\t\t// propagate, that we save an edit and want to close the Overlay without\n\t\t// any interruption (user questions e.g.)\n\t\tthis._saveHit = true;\n\n\t\tthis.$el.find( '.content' ).empty().addClass( 'loading' );\n\t\t// FIXME: while saving: a spinner would be nice\n\t\t// FIXME: This should be using a gateway e.g. TalkGateway, PageGateway or EditorGateway\n\t\treturn this.editorApi.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\tsection: 'new',\n\t\t\tsectiontitle: heading,\n\t\t\ttitle: this.title,\n\t\t\tsummary: mw.msg( 'newsectionsummary', heading ),\n\t\t\ttext: this.body\n\t\t} ).then( function () {\n\t\t\treturn 'ok';\n\t\t}, function ( msg ) {\n\t\t\t// FIXME: Throw an Error\n\t\t\treturn d.reject( {\n\t\t\t\ttype: 'error',\n\t\t\t\tdetails: msg\n\t\t\t} );\n\t\t} );\n\t}\n} );\n\nmodule.exports = TalkSectionAddOverlay;\n","var\n\tuser = mw.user,\n\ticons = require( '../mobile.startup/icons' ),\n\t$spinner = icons.spinner().$el,\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\theader = require( '../mobile.startup/headers' ).header,\n\tutil = require( '../mobile.startup/util' ),\n\tpopup = require( '../mobile.startup/toast' ),\n\tautosign = require( './autosign' ),\n\tButton = require( '../mobile.startup/Button' );\n\n/**\n * Callback executed when a save has successfully completed.\n * @callback onSaveComplete\n */\n\n/**\n * Overlay for showing talk page section\n * @class TalkSectionOverlay\n * @extends Overlay\n * @param {Object} options\n * @param {number} options.id Section ID\n * @param {Section} options.section\n * @param {mw.Api} options.api\n * @param {string} options.title\n * @param {string} options.licenseMsg\n * @param {onSaveComplete} [options.onSaveComplete]\n */\nfunction TalkSectionOverlay( options ) {\n\tconst onBeforeExit = this.onBeforeExit.bind( this );\n\n\tthis.editorApi = options.api;\n\tthis.state = {\n\t\t// current value of the textarea\n\t\ttext: ''\n\t};\n\tOverlay.call( this,\n\t\tutil.extend( true, options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tonBeforeExit,\n\t\t\tevents: {\n\t\t\t\tclick: function ( ev ) {\n\t\t\t\t\t// If a link has been clicked (that's not the save button)\n\t\t\t\t\t// check that it's okay to exit\n\t\t\t\t\tif ( ev.target.tagName === 'A' &&\n\t\t\t\t\t\tev.target.className.indexOf( 'save-button' ) === -1\n\t\t\t\t\t) {\n\t\t\t\t\t\t// If the user says okay, do nothing, continuing as if normal link\n\t\t\t\t\t\tonBeforeExit( () => {}, function () {\n\t\t\t\t\t\t\t// if the user says no, prevent the default behaviour\n\t\t\t\t\t\t\tev.preventDefault();\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'input textarea': 'onInputTextarea',\n\t\t\t\t'focus textarea': 'onFocusTextarea',\n\t\t\t\t'click .save-button': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n}\n\nmfExtend( TalkSectionOverlay, Overlay, {\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontent: util.template( `\n<div class=\"content talk-section\">\n\t{{{section.text}}}\n\t<div class=\"comment\">\n\t\t<div class=\"list-header\">{{reply}}</div>\n\t\t<div class=\"comment-content\">\n\t\t\t<textarea class=\"wikitext-editor\"></textarea>\n\t\t\t<p class=\"license\">\n\t\t\t\t{{info}}\n\t\t\t\t{{{licenseMsg}}}\n\t\t\t</p>\n\t\t</div>\n\t</div>\n</div>\n\t\t` )\n\t} ),\n\t/**\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.title Title.\n\t * @property {Section} defaults.section that is currently being viewed in overlay.\n\t * @property {string} defaults.reply Reply heading.\n\t * @property {Button} defaults.saveButton\n\t * @property {string} defaults.info Message that informs the user their talk reply will be\n\t * automatically signed.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tsaveButton: new Button( {\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'save-button',\n\t\t\tprogressive: true,\n\t\t\tlabel: util.saveButtonMessage()\n\t\t} ),\n\t\ttitle: undefined,\n\t\tsection: undefined,\n\t\treply: mw.msg( 'mobile-frontend-talk-reply' ),\n\t\tinfo: mw.msg( 'mobile-frontend-talk-reply-info' )\n\t} ),\n\t/**\n\t * A function to run before exiting the overlay\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @param {Event} ev\n\t */\n\tonInputTextarea: function ( ev ) {\n\t\tthis.state.text = ev.target.value;\n\t},\n\t/**\n\t * A function to run before exiting the overlay\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @param {Function} exit\n\t * @param {Function} cancel\n\t */\n\tonBeforeExit: function ( exit, cancel ) {\n\t\tvar confirmMessage = mw.msg( 'mobile-frontend-editor-cancel-confirm' );\n\n\t\tif ( !this.state.text || window.confirm( confirmMessage ) ) {\n\t\t\texit();\n\t\t} else {\n\t\t\tcancel();\n\t\t}\n\t},\n\t/**\n\t * Accounts for the fact sections are loaded asynchronously and sets the headers\n\t * for the overlay\n\t * @inheritdoc\n\t */\n\tpreRender: function () {\n\t\tvar options = this.options;\n\t\tthis.options.headers = [\n\t\t\theader(\n\t\t\t\toptions.section ? options.section.line : '',\n\t\t\t\t[],\n\t\t\t\ticons.back(),\n\t\t\t\t'initial-header'\n\t\t\t)\n\t\t];\n\t},\n\t/**\n\t * Fetches the talk topics of the page specified in options.title\n\t * if options.section is not defined.\n\t * @inheritdoc\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\tthis.$el.find( '.talk-section' ).prepend( $spinner );\n\t\tthis.$saveButton = this.options.saveButton.$el;\n\t\tthis.$el.find( '.comment-content' ).append( this.$saveButton );\n\t\tthis.hideSpinner();\n\t\tthis._enableComments();\n\t},\n\t/**\n\t * Enables comments on the current rendered talk topic\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @private\n\t */\n\t_enableComments: function () {\n\t\tthis.$commentBox = this.$el.find( '.comment' );\n\t\tif ( user.isAnon() ) {\n\t\t\tthis.$commentBox.remove();\n\t\t} else {\n\t\t\tthis.$textarea = this.$commentBox.find( 'textarea' );\n\t\t}\n\t},\n\t/**\n\t * Handler for focus of textarea\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonFocusTextarea: function () {\n\t\tthis.$textarea.removeClass( 'error' );\n\t},\n\t/**\n\t * Handle a click on the save button\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar val = this.state.text,\n\t\t\tself = this;\n\n\t\tfunction enableSaveButton() {\n\t\t\tself.$saveButton.prop( 'disabled', false );\n\t\t}\n\t\tif ( val ) {\n\t\t\t// show a spinner\n\t\t\tthis.showSpinner();\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t\t// sign and add newline to front\n\t\t\tval = '\\n\\n' + autosign( val );\n\t\t\t// FIXME: This should be using a gateway\n\t\t\t// e.g. TalkGateway, PageGateway or EditorGateway\n\t\t\tthis.editorApi.postWithToken( 'csrf', {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: this.options.title,\n\t\t\t\tsection: this.options.id,\n\t\t\t\tappendtext: val,\n\t\t\t\tredirect: true\n\t\t\t} ).then( function () {\n\t\t\t\tif ( self.options.onSaveComplete ) {\n\t\t\t\t\tself.options.onSaveComplete();\n\t\t\t\t}\n\t\t\t}, function ( data, response ) {\n\t\t\t\t// FIXME: Code sharing with SourceEditorOverlay?\n\t\t\t\tvar msg,\n\t\t\t\t\t// When save failed with one of these error codes, the returned\n\t\t\t\t\t// message in response.error.info will be forwarded to the user.\n\t\t\t\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\t\t\t\twhitelistedErrorInfo = [\n\t\t\t\t\t\t'readonly',\n\t\t\t\t\t\t'blocked',\n\t\t\t\t\t\t'autoblocked'\n\t\t\t\t\t];\n\n\t\t\t\tif (\n\t\t\t\t\tresponse.error &&\n\t\t\t\t\twhitelistedErrorInfo.indexOf( response.error.code ) > -1\n\t\t\t\t) {\n\t\t\t\t\tmsg = response.error.info;\n\t\t\t\t} else {\n\t\t\t\t\tmsg = mw.msg( 'mobile-frontend-editor-error' );\n\t\t\t\t}\n\n\t\t\t\tself.hideSpinner();\n\t\t\t\tpopup.show( msg, 'toast error' );\n\t\t\t\tenableSaveButton();\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.$textarea.addClass( 'error' );\n\t\t}\n\t}\n} );\n\nmodule.exports = TalkSectionOverlay;\n","/**\n * Autosign a block of text if necessary\n * @instance\n * @param {string} text\n * @return {string} text with an autosign (\"~~~~\") if necessary\n */\nfunction autosign( text ) {\n\treturn /~{3,5}/.test( text ) ? text : text + ' ~~~~';\n}\n\nmodule.exports = autosign;\n","const AddTopicForm = require( './AddTopicForm' ),\n\tautosign = require( './autosign' );\n\n/**\n * Backwards compatible method for obtaining a TalkOverlay\n * used by Minerva until it updates itself.\n * @param {Object} options Configuration options\n * @param {string} options.licenseMsg license text (HTML strings accepted)\n * @param {Function} [options.onTextInput] callback for when text changes\n * @param {string} options.subject to prefill form with\n * @param {string} options.body to prefill form with\n * @param {boolean} options.disabled to mark the form inputs as disabled\n * @return {AddTopicForm}\n */\nfunction makeAddTopicForm( { licenseMsg, onTextInput, subject, body, disabled } ) {\n\tconst form = new AddTopicForm( {\n\t\tlicenseMsg,\n\t\tdisabled,\n\t\tsubject,\n\t\tbody,\n\t\tonTextInput: onTextInput ? function ( subject, body ) {\n\t\t\t// if the body has content, autosign it!\n\t\t\tif ( body ) {\n\t\t\t\tbody = autosign( body );\n\t\t\t}\n\t\t\t// propagate up the autosigned content\n\t\t\tonTextInput.call( this, subject, body );\n\t\t} : undefined\n\t} );\n\treturn form;\n}\n\nmodule.exports = makeAddTopicForm;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\tTalkSectionAddOverlay = require( './TalkSectionAddOverlay' ),\n\tTalkSectionOverlay = require( './TalkSectionOverlay' );\n\nm.define( 'mobile.talk.overlays/TalkSectionAddOverlay', TalkSectionAddOverlay );\nm.define( 'mobile.talk.overlays/TalkSectionOverlay', TalkSectionOverlay );\n"],"sourceRoot":""}