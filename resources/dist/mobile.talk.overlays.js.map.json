{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkBoard.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionAddOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/TalkSectionOverlay.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/autosign.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/mobile.talk.overlays.js","webpack://mfModules.[name]/./src/mobile.talk.overlays/talkOverlay.js"],"names":["util","require","mfExtend","View","PageGateway","icons","Page","TalkBoard","options","this","eventBus","pageGateway","api","call","extend","className","isTemplateMode","template","mw","get","postRender","prototype","$el","append","spinner","$spinner","$","$board","headings","_loadContent","on","bind","showSpinner","hide","show","hideSpinner","self","empty","getPage","title","then","pageData","_addContent","resp","sections","onFail","window","location","getUrl","page","getSections","explanation","length","msg","render","module","exports","Overlay","autosign","toast","Icon","TalkSectionAddOverlay","editorApi","events","input .wikitext-editor, .summary","change .wikitext-editor, .summary","click .confirm-save","currentPageTitle","_saveHit","defaults","cancelMsg","topicTitlePlaceHolder","topicContentPlaceHolder","editingMsg","waitMsg","waitIcon","name","additionalClassNames","toHtmlString","templatePartials","contentHeader","saveHeader","showHidden","$confirm","$subject","$ta","confirmMessage","val","confirm","apply","arguments","onTextInput","clearTimeout","timer","setTimeout","trim","prop","onSaveClick","isOnTalkPage","save","status","emit","invalidatePage","error","editMsg","details","heading","d","Deferred","text","removeClass","addClass","postWithToken","action","section","sectiontitle","summary","reject","type","user","popup","Button","TalkSectionOverlay","focus textarea","click .save-button","header","content","saveButton","block","progressive","label","undefined","reply","info","$saveButton","_enableComments","renderFromApi","$commentBox","isAnon","remove","$textarea","find","getSection","id","onFocusTextarea","enableSaveButton","appendtext","redirect","data","response","indexOf","code","test","m","talkOverlay","define","Anchor","overlay","board","headerButtonsListClassName","headerButtons","href","footerAnchor"],"mappings":"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","file":"mobile.talk.overlays.js","sourcesContent":["var\n\tutil = require( '../mobile.startup/util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tView = require( '../mobile.startup/View' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\ticons = require( '../mobile.startup/icons' ),\n\tPage = require( '../mobile.startup/Page' );\n/**\n * Board of talk topics\n * @class TalkBoard\n * @extends View\n * @uses Page\n * @uses PageGateway\n * @param {Object} options\n * @param {Section[]} [options.headings] for rendering heading links.\n *   Api will be used if absent.\n * @param {mw.Api} options.api\n * @param {OO.EventEmitter} options.eventBus Object used to listen for\n * talk-discussion-added events\n */\nfunction TalkBoard( options ) {\n\tthis.eventBus = options.eventBus;\n\tthis.pageGateway = new PageGateway( options.api );\n\tView.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-board'\n\t\t} )\n\t);\n}\n\nmfExtend( TalkBoard, View, {\n\tisTemplateMode: true,\n\ttemplate: mw.template.get( 'mobile.talk.overlays', 'TalkBoard.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\tpostRender: function ( options ) {\n\t\tView.prototype.postRender.call( this, options );\n\t\tthis.$el.append( icons.spinner().$el );\n\t\tthis.$spinner = this.$( '.spinner' );\n\t\tthis.$board = this.$( '.board' );\n\t\tif ( !this.options.headings ) {\n\t\t\tthis._loadContent( this.options );\n\t\t}\n\t\tthis.eventBus.on( 'talk-discussion-added', this._loadContent.bind( this ) );\n\t},\n\n\t/**\n\t * Show a loading spinner\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\tshowSpinner: function () {\n\t\tthis.$board.hide();\n\t\tthis.$spinner.show();\n\t},\n\n\t/**\n\t * Hide the loading spinner\n\t * @memberof TalkBoard\n\t * @instance\n\t */\n\thideSpinner: function () {\n\t\tthis.$spinner.hide();\n\t\tthis.$board.show();\n\t},\n\n\t/**\n\t * Load content of the talk page into the overlay\n\t * @memberof TalkBoard\n\t * @instance\n\t * @param {Object} options for the overlay\n\t * @private\n\t */\n\t_loadContent: function ( options ) {\n\t\tvar self = this;\n\t\toptions = options || this.options;\n\n\t\t// show a spinner\n\t\tthis.showSpinner();\n\t\t// clear actual content, if any\n\t\tthis.$( '.topic-title-list' ).empty();\n\n\t\tthis.pageGateway.getPage( options.title ).then( function ( pageData ) {\n\t\t\tself._addContent( pageData, options );\n\t\t}, function ( resp ) {\n\t\t\t// If the API returns the error code 'missingtitle', that means the\n\t\t\t// talk page doesn't exist yet.\n\t\t\tif ( resp === 'missingtitle' ) {\n\t\t\t\t// Create an empty page for new pages\n\t\t\t\tself._addContent( {\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tsections: []\n\t\t\t\t}, options );\n\t\t\t} else {\n\t\t\t\tif ( self.options.onFail ) {\n\t\t\t\t\t// Run failure callback with current title\n\t\t\t\t\tself.options.onFail( options.title );\n\t\t\t\t} else {\n\t\t\t\t\t// If the API request fails for any other reason, load the talk\n\t\t\t\t\t// page manually rather than leaving the spinner spinning.\n\t\t\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\t\t\twindow.location = mw.util.getUrl( options.title );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\t/**\n\t * Adds the content received from _loadContent to the Overlay and re-renders it.\n\t * @memberof TalkBoard\n\t * @instance\n\t * @private\n\t * @param {Object} pageData As returned from PageApi#getPage\n\t * @param {Object} options for the overlay\n\t */\n\t_addContent: function ( pageData, options ) {\n\t\tvar page = new Page( pageData ),\n\t\t\tsections = page.getSections();\n\n\t\tthis.page = page;\n\n\t\toptions.explanation = sections.length > 0 ? mw.msg( 'mobile-frontend-talk-explained' ) :\n\t\t\tmw.msg( 'mobile-frontend-talk-explained-empty' );\n\t\toptions.headings = sections;\n\n\t\t// content is there so re-render and hide the spinner\n\t\tthis.render( options );\n\t\tthis.hideSpinner();\n\t}\n} );\n\nmodule.exports = TalkBoard;\n","var\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tutil = require( '../mobile.startup/util' ),\n\tautosign = require( './autosign' ),\n\ttoast = require( '../mobile.startup/toast' ),\n\tIcon = require( '../mobile.startup/Icon' );\n\n/**\n * Overlay for adding a talk section\n * @class TalkSectionAddOverlay\n * @extends Overlay\n * @uses Toast\n *\n * @param {Object} options Configuration options\n * @param {Object} options.title Title of the talk page being modified\n * @param {Object} options.currentPageTitle Title of the page before the overlay appears\n * @param {OO.EventEmitter} options.eventBus Object used to emit talk-added-wo-overlay\n * and talk-discussion-added events\n */\nfunction TalkSectionAddOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'input .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'change .wikitext-editor, .summary': 'onTextInput',\n\t\t\t\t'click .confirm-save': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n\tthis.title = options.title;\n\tthis.currentPageTitle = options.currentPageTitle;\n\tthis.eventBus = options.eventBus;\n\t// Variable to indicate, if the overlay will be closed by the save function\n\t// or by the user. If this is false and there is content in the input fields,\n\t// the user will be asked, if he want to abandon his changes before we close\n\t// the Overlay, otherwise the Overlay will be closed without any question.\n\tthis._saveHit = false;\n}\n\nmfExtend( TalkSectionAddOverlay, Overlay, {\n\t/**\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.cancelMsg Caption for cancel button on edit form.\n\t * @property {string} defaults.topicTitlePlaceHolder Placeholder text to prompt user to add\n\t * a talk page topic subject.\n\t * @property {string} defaults.topicContentPlaceHolder Placeholder text to prompt user\n\t *  to add content to talk page content.\n\t * @property {string} defaults.editingMsg Label for button which\n\t *  submits a new talk page topic.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tcancelMsg: mw.msg( 'mobile-frontend-editor-cancel' ),\n\t\ttopicTitlePlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-subject-placeholder' ),\n\t\ttopicContentPlaceHolder: mw.msg( 'mobile-frontend-talk-add-overlay-content-placeholder' ),\n\t\teditingMsg: mw.msg( 'mobile-frontend-talk-add-overlay-submit' ),\n\t\twaitMsg: mw.msg( 'mobile-frontend-talk-topic-wait' ),\n\t\t// icons.spinner can't be used, .loading has a fixed height, which breaks overlay-header\n\t\twaitIcon: new Icon( {\n\t\t\tname: 'spinner',\n\t\t\tadditionalClassNames: 'savespinner loading'\n\t\t} ).toHtmlString()\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplate: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay.hogan' ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\tcontentHeader: mw.template.get( 'mobile.talk.overlays', 'SectionAddOverlay/contentHeader.hogan' ),\n\t\tsaveHeader: mw.template.get( 'mobile.editor.overlay', 'saveHeader.hogan' )\n\t} ),\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.call( this );\n\t\tthis.showHidden( '.initial-header' );\n\t\tthis.$confirm = this.$( 'button.confirm-save' );\n\t\tthis.$subject = this.$( '.summary' );\n\t\tthis.$ta = this.$( '.wikitext-editor' );\n\t},\n\t/**\n\t * @inheritdoc\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\thide: function () {\n\t\tvar empty,\n\t\t\tconfirmMessage = mw.msg( 'mobile-frontend-editor-cancel-confirm' );\n\n\t\tempty = ( !this.$subject.val() && !this.$ta.val() );\n\t\t// TODO: Replace with an OOUI dialog\n\t\tif ( this._saveHit || empty || window.confirm( confirmMessage ) ) {\n\t\t\treturn Overlay.prototype.hide.apply( this, arguments );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t/**\n\t * Handles an input into a textarea and enables or disables the submit button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonTextInput: function () {\n\t\tvar self = this;\n\n\t\tclearTimeout( this.timer );\n\t\tthis.timer = setTimeout( function () {\n\t\t\tif ( !self.$ta.val().trim() || !self.$subject.val().trim() ) {\n\t\t\t\tself.$confirm.prop( 'disabled', true );\n\t\t\t} else {\n\t\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\t}\n\t\t}, 250 );\n\t},\n\t/**\n\t * Handles a click on the save button\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar self = this,\n\t\t\tisOnTalkPage = self.title === self.currentPageTitle;\n\n\t\tthis.showHidden( '.saving-header' );\n\t\tthis.save().then( function ( status ) {\n\t\t\tif ( status === 'ok' ) {\n\t\t\t\tif ( isOnTalkPage ) {\n\t\t\t\t\tself.eventBus.emit( 'talk-added-wo-overlay' );\n\t\t\t\t} else {\n\t\t\t\t\tself.pageGateway.invalidatePage( self.title );\n\t\t\t\t\ttoast.show( mw.msg( 'mobile-frontend-talk-topic-feedback' ) );\n\t\t\t\t\tself.eventBus.emit( 'talk-discussion-added' );\n\t\t\t\t\tself.hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}, function ( error ) {\n\t\t\tvar editMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\n\t\t\tself.$confirm.prop( 'disabled', false );\n\t\t\tswitch ( error.details ) {\n\t\t\t\tcase 'protectedpage':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-protected' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'noedit':\n\t\t\t\tcase 'blocked':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-permission' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spamdetected':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-spam' );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'badtoken':\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error-badtoken' );\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\teditMsg = mw.msg( 'mobile-frontend-talk-topic-error' );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttoast.show( editMsg, 'error' );\n\t\t\tself.showHidden( '.save-header, .save-panel' );\n\t\t} );\n\t},\n\t/**\n\t * Save new talk section\n\t * @memberof TalkSectionAddOverlay\n\t * @instance\n\t * @return {jQuery.Deferred} Object that either will be resolved with ok parameter\n\t * or rejected with type error.\n\t */\n\tsave: function () {\n\t\tvar heading = this.$subject.val(),\n\t\t\tself = this,\n\t\t\td = util.Deferred(),\n\t\t\ttext = this.$ta.val();\n\n\t\tthis.$ta.removeClass( 'error' );\n\t\tthis.$subject.removeClass( 'error' );\n\n\t\t// propagate, that we save an edit and want to close the Overlay without\n\t\t// any interruption (user questions e.g.)\n\t\tthis._saveHit = true;\n\n\t\tthis.$( '.content' ).empty().addClass( 'loading' );\n\t\t// FIXME: while saving: a spinner would be nice\n\t\t// FIXME: This should be using a gateway e.g. TalkGateway, PageGateway or EditorGateway\n\t\treturn this.editorApi.postWithToken( 'csrf', {\n\t\t\taction: 'edit',\n\t\t\tsection: 'new',\n\t\t\tsectiontitle: heading,\n\t\t\ttitle: self.title,\n\t\t\tsummary: mw.msg( 'newsectionsummary', heading ),\n\t\t\ttext: autosign( text )\n\t\t} ).then( function () {\n\t\t\treturn 'ok';\n\t\t}, function ( msg ) {\n\t\t\t// FIXME: Throw an Error\n\t\t\treturn d.reject( {\n\t\t\t\ttype: 'error',\n\t\t\t\tdetails: msg\n\t\t\t} );\n\t\t} );\n\t}\n} );\n\nmodule.exports = TalkSectionAddOverlay;\n","var\n\tuser = mw.user,\n\tmfExtend = require( '../mobile.startup/mfExtend' ),\n\tPageGateway = require( '../mobile.startup/PageGateway' ),\n\tOverlay = require( '../mobile.startup/Overlay' ),\n\tutil = require( '../mobile.startup/util' ),\n\tpopup = require( '../mobile.startup/toast' ),\n\tautosign = require( './autosign' ),\n\tPage = require( '../mobile.startup/Page' ),\n\tButton = require( '../mobile.startup/Button' );\n\n/**\n * Overlay for showing talk page section\n * @class TalkSectionOverlay\n * @extends Overlay\n * @uses PageGateway\n * @uses Page\n * @uses Button\n * @uses Toast\n * @param {Object} options\n */\nfunction TalkSectionOverlay( options ) {\n\tthis.editorApi = options.api;\n\tthis.pageGateway = new PageGateway( options.api );\n\tOverlay.call( this,\n\t\tutil.extend( options, {\n\t\t\tclassName: 'talk-overlay overlay',\n\t\t\tevents: {\n\t\t\t\t'focus textarea': 'onFocusTextarea',\n\t\t\t\t'click .save-button': 'onSaveClick'\n\t\t\t}\n\t\t} )\n\t);\n}\n\nmfExtend( TalkSectionOverlay, Overlay, {\n\ttemplatePartials: util.extend( {}, Overlay.prototype.templatePartials, {\n\t\theader: mw.template.get( 'mobile.talk.overlays', 'Section/header.hogan' ),\n\t\tcontent: mw.template.get( 'mobile.talk.overlays', 'Section/content.hogan' )\n\t} ),\n\t/**\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @mixes Overlay#defaults\n\t * @property {Object} defaults Default options hash.\n\t * @property {string} defaults.title Title.\n\t * @property {Section} defaults.section that is currently being viewed in overlay.\n\t * @property {string} defaults.reply Reply heading.\n\t * @property {string} defaults.info Message that informs the user their talk reply will be\n\t * automatically signed.\n\t */\n\tdefaults: util.extend( {}, Overlay.prototype.defaults, {\n\t\tsaveButton: new Button( {\n\t\t\tblock: true,\n\t\t\tadditionalClassNames: 'save-button',\n\t\t\tprogressive: true,\n\t\t\tlabel: mw.msg( 'mobile-frontend-editor-save' )\n\t\t} ).options,\n\t\ttitle: undefined,\n\t\tsection: undefined,\n\t\treply: mw.msg( 'mobile-frontend-talk-reply' ),\n\t\tinfo: mw.msg( 'mobile-frontend-talk-reply-info' )\n\t} ),\n\t/**\n\t * Fetches the talk topics of the page specified in options.title\n\t * if options.section is not defined.\n\t * @inheritdoc\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\tOverlay.prototype.postRender.apply( this );\n\t\tthis.$saveButton = this.$( '.save-button' );\n\t\tif ( !this.options.section ) {\n\t\t\tthis.renderFromApi( this.options );\n\t\t} else {\n\t\t\tthis.hideSpinner();\n\t\t\tthis._enableComments();\n\t\t}\n\t},\n\t/**\n\t * Enables comments on the current rendered talk topic\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @private\n\t */\n\t_enableComments: function () {\n\t\tthis.$commentBox = this.$( '.comment' );\n\t\tif ( user.isAnon() ) {\n\t\t\tthis.$commentBox.remove();\n\t\t} else {\n\t\t\tthis.$textarea = this.$commentBox.find( 'textarea' );\n\t\t}\n\t},\n\t/**\n\t * Loads the discussion from api and add it to the Overlay\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t * @param {Object} options Render options\n\t */\n\trenderFromApi: function ( options ) {\n\t\tvar self = this;\n\n\t\tthis.pageGateway.getPage( options.title ).then( function ( pageData ) {\n\t\t\tvar page = new Page( pageData );\n\t\t\toptions.section = page.getSection( options.id );\n\t\t\tself.render( options );\n\t\t\tself.hideSpinner();\n\t\t} );\n\t},\n\t/**\n\t * Handler for focus of textarea\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonFocusTextarea: function () {\n\t\tthis.$textarea.removeClass( 'error' );\n\t},\n\t/**\n\t * Handle a click on the save button\n\t * @memberof TalkSectionOverlay\n\t * @instance\n\t */\n\tonSaveClick: function () {\n\t\tvar val = this.$textarea.val(),\n\t\t\tself = this;\n\n\t\tfunction enableSaveButton() {\n\t\t\tself.$saveButton.prop( 'disabled', false );\n\t\t}\n\t\tif ( val ) {\n\t\t\t// show a spinner\n\t\t\tthis.showSpinner();\n\t\t\tthis.$saveButton.prop( 'disabled', true );\n\t\t\t// sign and add newline to front\n\t\t\tval = '\\n\\n' + autosign( val );\n\t\t\t// FIXME: This should be using a gateway\n\t\t\t// e.g. TalkGateway, PageGateway or EditorGateway\n\t\t\tthis.editorApi.postWithToken( 'csrf', {\n\t\t\t\taction: 'edit',\n\t\t\t\ttitle: this.options.title,\n\t\t\t\tsection: this.options.id,\n\t\t\t\tappendtext: val,\n\t\t\t\tredirect: true\n\t\t\t} ).then( function () {\n\t\t\t\tpopup.show( mw.msg( 'mobile-frontend-talk-reply-success' ) );\n\t\t\t\t// invalidate the cache\n\t\t\t\tself.pageGateway.invalidatePage( self.options.title );\n\n\t\t\t\tself.renderFromApi( self.options );\n\n\t\t\t\tenableSaveButton();\n\t\t\t}, function ( data, response ) {\n\t\t\t\t// FIXME: Code sharing with EditorOverlay?\n\t\t\t\tvar msg,\n\t\t\t\t\t// When save failed with one of these error codes, the returned\n\t\t\t\t\t// message in response.error.info will be forwarded to the user.\n\t\t\t\t\t// FIXME: This shouldn't be needed when info texts are all localized.\n\t\t\t\t\twhitelistedErrorInfo = [\n\t\t\t\t\t\t'readonly',\n\t\t\t\t\t\t'blocked',\n\t\t\t\t\t\t'autoblocked'\n\t\t\t\t\t];\n\n\t\t\t\tif (\n\t\t\t\t\tresponse.error &&\n\t\t\t\t\twhitelistedErrorInfo.indexOf( response.error.code ) > -1\n\t\t\t\t) {\n\t\t\t\t\tmsg = response.error.info;\n\t\t\t\t} else {\n\t\t\t\t\tmsg = mw.msg( 'mobile-frontend-editor-error' );\n\t\t\t\t}\n\n\t\t\t\tself.hideSpinner();\n\t\t\t\tpopup.show( msg, 'toast error' );\n\n\t\t\t\tenableSaveButton();\n\t\t\t} );\n\t\t} else {\n\t\t\tthis.$textarea.addClass( 'error' );\n\t\t}\n\t}\n} );\n\nmodule.exports = TalkSectionOverlay;\n","/**\n * Autosign a block of text if necessary\n * @instance\n * @param {string} text\n * @return {string} text with an autosign (\"~~~~\") if necessary\n */\nfunction autosign( text ) {\n\treturn /~{3,5}/.test( text ) ? text : text + ' ~~~~';\n}\n\nmodule.exports = autosign;\n","var m = require( './../mobile.startup/moduleLoaderSingleton' ),\n\ttalkOverlay = require( './talkOverlay' ),\n\tTalkSectionAddOverlay = require( './TalkSectionAddOverlay' ),\n\tTalkSectionOverlay = require( './TalkSectionOverlay' );\n\n// needed for minerva usages\nm.define( 'mobile.talk.overlays/talkOverlay', talkOverlay );\nm.define( 'mobile.talk.overlays/TalkSectionAddOverlay', TalkSectionAddOverlay );\nm.define( 'mobile.talk.overlays/TalkSectionOverlay', TalkSectionOverlay ); // resource-modules-disable-line\n","var\n\tuser = mw.user,\n\tTalkBoard = require( './TalkBoard' ),\n\tAnchor = require( '../mobile.startup/Anchor' ),\n\tOverlay = require( '../mobile.startup/Overlay' );\n\n/**\n * Produce an overlay for talk page\n * @uses Overlay\n * @param {Object} options\n * @param {Api} options.api\n * @return {Overlay}\n */\nfunction talkOverlay( options ) {\n\tvar overlay,\n\t\tboard = new TalkBoard( options );\n\toverlay = new Overlay( {\n\t\theading: '<strong>' + mw.msg( 'mobile-frontend-talk-overlay-header' ) + '</strong>',\n\t\theaderButtonsListClassName: 'header-action',\n\t\theaderButtons: [ user.isAnon() ? {} : {\n\t\t\thref: '#/talk/new',\n\t\t\tclassName: 'add continue',\n\t\t\tmsg: mw.msg( 'mobile-frontend-talk-add-overlay-submit' )\n\t\t} ],\n\t\tfooterAnchor: new Anchor( {\n\t\t\tprogressive: true,\n\t\t\thref: mw.util.getUrl( options.title ),\n\t\t\tadditionalClassNames: 'footer-link talk-fullpage',\n\t\t\tlabel: mw.msg( 'mobile-frontend-talk-fullpage' )\n\t\t} ).options,\n\t\tclassName: 'talk-overlay overlay'\n\t} );\n\toverlay.$( '.overlay-content' ).append( board.$el );\n\treturn overlay;\n}\n\nmodule.exports = talkOverlay;\n"],"sourceRoot":""}