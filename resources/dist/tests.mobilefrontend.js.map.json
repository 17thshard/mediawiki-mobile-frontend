{"version":3,"sources":["webpack://mobileFrontend.[name]/./src/mobile.startup/modules.js","webpack://mobileFrontend.[name]/./tests/node-qunit/mobile.startup/modules.test.js"],"names":["ModuleLoader","this","_register","OO","EventEmitter","call","prototype","require","id","module","args","registry","localRequire","hasOwnProperty","Error","split","mw","loader","e","define","obj","self","deprecate","deprecatedId","replacement","msg","log","mixinClass","mobileFrontend","on","exports","__webpack_require__","QUnit","beforeEach","test","assert","strictEqual","throws"],"mappings":"+JASA,SAAAA,IAKAC,KAAAC,aACAC,GAAAC,aAAAC,KAAAJ,MAGAD,EAAAM,WAUAC,QAAA,SAAAC,GACA,IAAAC,EAAAC,EACAC,EAAAV,KAAAC,UAKA,SAAAU,IACA,IAAAD,EAAAE,eAAAL,GACA,UAAAM,MAAA,oCAAAN,GAEA,OAAAG,EAAAH,GAEAE,EAAAF,EAAAO,MAAA,KACA,IAEA,OADAN,EAAAO,GAAAC,OAAAV,QAAAG,EAAA,KACAA,EAAA,IACAD,EAAAC,EAAA,IAEAE,IAEG,MAAAM,GACH,OAAAN,MAYAO,OAAA,SAAAX,EAAAY,GACA,IAAAC,EAAApB,KAEA,GAAAA,KAAAC,UAAAW,eAAAL,GACA,UAAAM,MAAA,0BAAAN,GAIA,OAFAP,KAAAC,UAAAM,GAAAY,GAQAE,UAAA,SAAAC,GACAF,EAAAC,UAAAC,EAAAH,EAAAZ,MAcAc,UAAA,SAAAd,EAAAY,EAAAI,GACA,IAAAC,EACAD,IAEAC,EAAA,OAAAD,EAAA,aAGAR,GAAAU,IAAAJ,UAAArB,KAAAC,UAAAM,EAAAY,EAAAK,KAGAtB,GAAAwB,WAAA3B,EAAAG,GAAAC,cASAY,GAAAY,eAAA,IAAA5B,EACAgB,GAAAU,IAAAJ,UAAAN,GAAAY,eAAA,KAAAZ,GAAAY,eAAAC,GACA,yDAEApB,EAAAqB,QAAA9B,mDClHA,IAAAA,EAAA+B,EAAA,GAEAC,MAAAvB,OAAA,+BACAwB,WAAA,WACAhC,KAAAgB,OAAA,IAAAjB,KAIAgC,MAAAE,KAAA,oBAAAC,GACAlC,KAAAgB,OAAAE,OAAA,SACAlB,KAAAgB,OAAAE,OAAA,SAEAgB,EAAAC,YAAAnC,KAAAgB,OAAAV,QAAA,uCACA4B,EAAAC,YAAAnC,KAAAgB,OAAAV,QAAA,uCAEA4B,EAAAE,OAAA,WACApC,KAAAgB,OAAAV,QAAA,oBACE,uCACF4B,EAAAE,OAAA,WACApC,KAAAgB,OAAAV,QAAA,uBACE,2DAGFyB,MAAAE,KAAA,mBAAAC,GACA,IAAAlB,EAAAhB,KAAAgB,OACAA,EAAAE,OAAA,SACAF,EAAAE,OAAA,SACAgB,EAAAE,OAAA,WACApB,EAAAE,OAAA,WACE,gDACFgB,EAAAC,YAAAnC,KAAAgB,OAAAV,QAAA","file":"tests.mobilefrontend.js","sourcesContent":["/**\n * Class for managing modules\n *\n * A module in this context is essentially a Javascript class (not to be confused with\n * ResourceLoader modules).\n *\n * @class ModuleLoader\n * @extends OO.EventEmitter\n */\nfunction ModuleLoader() {\n\t/**\n\t * @property {Object} register of defined modules\n\t * @private\n\t */\n\tthis._register = {};\n\tOO.EventEmitter.call( this );\n}\n\nModuleLoader.prototype = {\n\t/**\n\t * Require (import) a module previously defined using define().\n\t * Searches core module registry using mw.loader.require before consulting\n\t * its own local registry. This method is deprecated, please do not use.\n\t * @memberof ModuleLoader\n\t * @instance\n\t * @param {string} id Required module id.\n\t * @return {Object} Required module, can be any JavaScript object.\n\t */\n\trequire: function ( id ) {\n\t\tvar module, args,\n\t\t\tregistry = this._register;\n\n\t\t/**\n\t\t * @return {Object} Module\n\t\t */\n\t\tfunction localRequire() {\n\t\t\tif ( !registry.hasOwnProperty( id ) ) {\n\t\t\t\tthrow new Error( 'MobileFrontend Module not found: ' + id );\n\t\t\t}\n\t\t\treturn registry[ id ];\n\t\t}\n\t\targs = id.split( '/' );\n\t\ttry {\n\t\t\tmodule = mw.loader.require( args[0] );\n\t\t\tif ( module[ args[1] ] ) {\n\t\t\t\treturn module[ args[1] ];\n\t\t\t} else {\n\t\t\t\treturn localRequire();\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\treturn localRequire();\n\t\t}\n\t},\n\n\t/**\n\t * Define a module which can be later required (imported) using require().\n\t * @memberof ModuleLoader\n\t * @instance\n\t * @param {string} id Defined module id.\n\t * @param {Object} obj Defined module body, can be any JavaScript object.\n\t * @return {Object}\n\t */\n\tdefine: function ( id, obj ) {\n\t\tvar self = this;\n\n\t\tif ( this._register.hasOwnProperty( id ) ) {\n\t\t\tthrow new Error( 'Module already exists: ' + id );\n\t\t}\n\t\tthis._register[ id ] = obj;\n\t\t// return an object of additionally functions to do with the registered module\n\t\treturn {\n\t\t\t/**\n\t\t\t * @see ModuleLoader#deprecate\n\t\t\t * @param {string} deprecatedId Defined module id, which is deprecated.\n\t\t\t * @ignore\n\t\t\t */\n\t\t\tdeprecate: function ( deprecatedId ) {\n\t\t\t\tself.deprecate( deprecatedId, obj, id );\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * Deprecate a module and give an replacement (if there is any).\n\t * @memberof ModuleLoader\n\t * @instance\n\t * @param {string} id Defined module id, which is deprecated.\n\t * @param {Object} obj Defined module body, can be any JavaScript object.\n\t * @param {string} [replacement] Give an optional replacement for this module (which\n\t * needs to be already defined!)\n\t */\n\tdeprecate: function ( id, obj, replacement ) {\n\t\tvar msg;\n\t\tif ( replacement ) {\n\t\t\t// add an alternative for this module, if any given\n\t\t\tmsg = 'Use ' + replacement + ' instead.';\n\t\t}\n\t\t// register it as a deprecated one\n\t\tmw.log.deprecate( this._register, id, obj, msg );\n\t}\n};\nOO.mixinClass( ModuleLoader, OO.EventEmitter );\n\n/**\n *\n * FIXME: In a wonderful world all this could run in a file called init.js,\n * all the above code would be core and everyone would be happy.\n * @class mw.mobileFrontend\n * @singleton\n */\nmw.mobileFrontend = new ModuleLoader();\nmw.log.deprecate( mw.mobileFrontend, 'on', mw.mobileFrontend.on,\n\t'The global EventEmitter should not be used (T156186).' );\n\nmodule.exports = ModuleLoader;\n","var ModuleLoader = require( '../../../src/mobile.startup/modules' );\n\nQUnit.module( 'MobileFrontend ModuleLoader', {\n\tbeforeEach: function () {\n\t\tthis.loader = new ModuleLoader();\n\t}\n} );\n\nQUnit.test( '#require', function ( assert ) {\n\tthis.loader.define( 'foo', 1 );\n\tthis.loader.define( 'bar', 5 );\n\n\tassert.strictEqual( this.loader.require( 'foo' ), 1, 'Returns appropriate module' );\n\tassert.strictEqual( this.loader.require( 'bar' ), 5, 'Returns appropriate module' );\n\n\tassert.throws( function () {\n\t\tthis.loader.require( 'undefinedmodule' );\n\t}, 'Cannot require an undefined module.' );\n\tassert.throws( function () {\n\t\tthis.loader.require( 'mobile.modules/Foo' );\n\t}, 'Cannot require an undefined export on a known module.' );\n} );\n\nQUnit.test( '#define', function ( assert ) {\n\tvar loader = this.loader;\n\tloader.define( 'foo', 1 );\n\tloader.define( 'bar', 5 );\n\tassert.throws( function () {\n\t\tloader.define( 'bar', 50 );\n\t}, 'Cannot define two modules with the same name' );\n\tassert.strictEqual( this.loader.require( 'bar' ), 5, 'Returns first definition of module.' );\n} );\n"],"sourceRoot":""}